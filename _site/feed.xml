<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://www.helloted.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.helloted.com/" rel="alternate" type="text/html" /><updated>2018-03-27T19:02:44+08:00</updated><id>http://www.helloted.com/</id><title type="html">Helloted Blog</title><subtitle>Write your site description here. It will be used as your sites meta description as well!</subtitle><entry><title type="html">OpenGL ES编程指南（三）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_3/" rel="alternate" type="text/html" title="OpenGL ES编程指南（三）" /><published>2018-03-25T20:00:00+08:00</published><updated>2018-03-25T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_3</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_3/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;四通过opengl-es和glkit来画&quot;&gt;四、通过OpenGL ES和GLKit来画&lt;/h3&gt;

&lt;p&gt;GLKit框架提供了View和ViewController类，它们消除了OpenGL ES内容绘制和动画制作所需的设置和代码维护。 GLKView类管理OpenGL ES基础结构并为绘图代码提供位置，而GLKViewController类则为GLKit视图中的OpenGL ES内容的平滑动画提供渲染循环。 这些类扩展了用于绘制视图内容和管理视图表示的标准UIKit设计模式。 因此，您可以将精力主要放在您的OpenGL ES渲染代码上，并让您的应用程序快速启动并运行。 GLKit框架还提供了其他功能来简化OpenGL ES 2.0和3.0的开发。&lt;/p&gt;

&lt;h4 id=&quot;glkit-view&quot;&gt;GLKit View&lt;/h4&gt;

&lt;p&gt;GLKView类提供了基于OpenGL ES的的绘图，与标准UIView绘图循环等价。 UIView实例自动配置其图形上下文，以便您的drawRect：实现只需执行Quartz 2D绘图命令；而GLKView实例自动配置它自己，绘图只需执行OpenGL ES绘图命令。 GLKView类通过维护一个保存OpenGL ES绘图命令结果的framebuffer对象来提供这种功能，然后在绘图方法返回时自动将它们呈现给Core Animation。&lt;/p&gt;

&lt;p&gt;与标准UIKit视图一样，GLKit视图按需呈现其内容。首次显示视图时，它将调用您的绘图方法 - Core Animation会缓存呈现的输出并在显示视图时显示它。如果要更改视图的内容，请调用setNeedsDisplay方法，视图再次调用绘图方法，缓存结果图像并将其显示在屏幕上。当用于渲染图像的数据不经常更改或仅响应用户操作时，此方法非常有用。通过仅在需要时渲染新的视图内容，您可以节省设备上的电池电量，并为设备执行其他操作留出更多时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/06.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建并配置一个glkit-view&quot;&gt;创建并配置一个GLKit View&lt;/h4&gt;

&lt;p&gt;您可以通过编程或使用Interface Builder来创建和配置GLKView对象。 在将其用于绘制之前，您必须将其与EAGLContext对象关联（请参阅配置OpenGL ES上下文）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以编程方式创建视图时，首先创建一个上下文，然后将其传递给视图的 &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithFrame:context:&lt;/code&gt; 方法。&lt;/li&gt;
  &lt;li&gt;从storyboard加载视图后，创建一个上下文并将其设置为视图的上下文属性的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GLKit视图会自动创建和配置自己的OpenGL ES帧缓冲区对象和渲染缓冲区。 您可以使用视图的可绘制属性来控制这些对象的属性，如下所示。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)viewDidLoad
{
    [super viewDidLoad];
 
    // Create an OpenGL ES context and assign it to the view loaded from storyboard
    GLKView *view = (GLKView *)self.view;
    view.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
 
    // Configure renderbuffers created by the view
    view.drawableColorFormat = GLKViewDrawableColorFormatRGBA8888;
    view.drawableDepthFormat = GLKViewDrawableDepthFormat24;
    view.drawableStencilFormat = GLKViewDrawableStencilFormat8;
 
    // Enable multisampling
    view.drawableMultisample = GLKViewDrawableMultisample4X;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果您更改GLKit视图的大小，比例因子或可绘制属性，则会在下次绘制内容时自动删除并重新创建适当的帧缓冲区对象和渲染缓冲区.&lt;/p&gt;

&lt;p&gt;您可以使用其drawableMultisample属性为GLKView实例启用多重采样。 多重采样是抗锯齿的一种形式，可平滑锯齿状边缘，以大幅增加内存和碎片处理时间为代价提高大多数3D应用的图像质量 - 如果启用多重采样，则始终测试应用的性能以确保其可接受性。&lt;/p&gt;

&lt;h4 id=&quot;用glkit-view进行绘制&quot;&gt;用GLKit View进行绘制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)drawRect:(CGRect)rect
{
    // Clear the framebuffer
    glClearColor(0.0f, 0.0f, 0.1f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
    // Draw using previously configured texture, shader, uniforms, and vertex array
    glBindTexture(GL_TEXTURE_2D, _planetTexture);
    glUseProgram(_diffuseShading);
    glUniformMatrix4fv(_uniformModelViewProjectionMatrix, 1, 0, _modelViewProjectionMatrix.m);
    glBindVertexArrayOES(_planetMesh);
    glDrawElements(GL_TRIANGLE_STRIP, 256, GL_UNSIGNED_SHORT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：glClear函数提示OpenGL ES可以丢弃任何现有的帧缓冲区内容，避免了将以前的内容加载到内存中的昂贵的内存操作。 为确保最佳性能，在绘制之前应始终调用此函数。&lt;/p&gt;

&lt;p&gt;GLKView类能够为OpenGL ES绘图提供一个简单的接口，因为它管理着OpenGL ES渲染过程的标准部分：&lt;/p&gt;

&lt;p&gt;在调用绘图方法之前，视图：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使其EAGLContext对象成为当前上下文&lt;/li&gt;
  &lt;li&gt;根据当前大小，比例因子和可绘制属性（如果需要）创建帧缓冲区对象和渲染缓冲区，&lt;/li&gt;
  &lt;li&gt;将帧缓冲区对象绑定为绘图命令的当前目标&lt;/li&gt;
  &lt;li&gt;设置OpenGL ES视口以匹配帧缓冲区大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;绘图方法返回后，视图：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解决多重采样缓冲区（如果启用了多重采样）&lt;/li&gt;
  &lt;li&gt;放弃其内容不再需要的渲染缓冲区&lt;/li&gt;
  &lt;li&gt;将渲染缓冲区内容呈现给Core Animation进行缓存和显示&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;用一个代理对象来进行渲染&quot;&gt;用一个代理对象来进行渲染&lt;/h4&gt;

&lt;p&gt;许多OpenGL ES应用程序在自定义类中实现渲染代码。 这种方法的一个优点是它允许您通过为每个渲染算法类定义不同的渲染器类来轻松支持多种渲染算法。 具有共同功能的渲染算法可以从父类继承。 例如，您可能使用不同的渲染器类来支持OpenGL ES 2.0和3.0（请参阅配置OpenGL ES上下文）。 或者您可以使用它们来定制渲染，以便在具有更强大硬件的设备上获得更好的图像质量&lt;/p&gt;

&lt;p&gt;GLKit非常适合这种方法 - 您可以使您的渲染器对象为标准GLKView实例的代理。 您的渲染器类不使用GLKView的子类并实现&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，而是使用GLKViewDelegate协议并实现&lt;code class=&quot;highlighter-rouge&quot;&gt;glkView:drawInRect:&lt;/code&gt;方法。 下面代码在应用启动时基于硬件特性选择渲染器类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Create a context so we can test for features
    EAGLContext *context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
    [EAGLContext setCurrentContext:context];
 
    // Choose a rendering class based on device features
    GLint maxTextureSize;
    glGetIntegerv(GL_MAX_TEXTURE_SIZE, &amp;amp;maxTextureSize);
    if (maxTextureSize &amp;gt; 2048)
        self.renderer = [[MyBigTextureRenderer alloc] initWithContext:context];
    else
        self.renderer = [[MyRenderer alloc] initWithContext:context];
 
    // Make the renderer the delegate for the view loaded from the main storyboard
    GLKView *view = (GLKView *)self.window.rootViewController.view;
    view.delegate = self.renderer;
 
    // Give the OpenGL ES context to the view so it can draw
    view.context = context;
 
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;glkit-view-controller&quot;&gt;GLKit View Controller&lt;/h4&gt;

&lt;p&gt;默认情况下，GLKView对象根据需要呈现其内容。 也就是说，使用OpenGL ES进行绘图的一个关键优势是它能够使用图形处理硬件来连续动画复杂的场景 - 例如游戏和模拟等应用很少呈现静态图像。 对于这些情况，GLKit框架提供了一个View Controller类，为其管理的GLKView对象维护一个动画循环。 该循环遵循游戏和模拟中常见的设计模式，分为两个阶段：更新和显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/06.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于更新阶段，View Controller调用它自己的更新方法（或其代理的glkViewControllerUpdate方法）。在这种方法里，你应该准备绘制下一帧。例如，游戏可能会使用这种方法根据自上一帧以来接收到的输入事件来确定玩家和敌人角色的位置，科学可视化可能会使用此方法来运行其模拟步骤。如果您需要计时信息来确定下一帧的应用程序状态，请使用视图控制器的计时属性之一，例如timeSinceLastUpdate属性。在上图中，更新阶段增加一个角度变量并使用它来计算变换矩阵。&lt;/p&gt;

&lt;p&gt;对于显示阶段，View Controller调用其视图的显示方法，该方法又调用您的绘图方法。在您的绘图方法中，您将OpenGL ES绘图命令提交给GPU以呈现您的内容。为了获得最佳性能，应用程序应该在渲染新帧时开始修改OpenGL ES对象，然后提交绘制命令。显示阶段将着色器程序中的统一变量设置为更新阶段计算的矩阵，然后提交绘制命令以渲染新内容。&lt;/p&gt;

&lt;p&gt;动画循环以视图控制器的framesPerSecond属性所指示的速率在这两个阶段之间交替。您可以使用preferredFramesPerSecond属性设置所需的帧速率 - 以优化当前显示硬件的性能，视图控制器会自动选择接近您首选值的最佳帧速率。&lt;/p&gt;

&lt;p&gt;重要提示：为获得最佳效果，请选择您的应用可以始终实现的帧速率。平滑一致的帧速率产生比不规律变化的帧速率更令人愉快的用户体验。&lt;/p&gt;

&lt;h4 id=&quot;使用glkit-view-controller&quot;&gt;使用GLKit View Controller&lt;/h4&gt;

&lt;p&gt;下面代码演示了使用GLKViewController子类和GLKView实例呈现动画OpenGL ES内容的典型策略。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlanetViewController&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// subclass of GLKViewController
&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Create an OpenGL ES context and assign it to the view loaded from storyboard
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GLKView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLKView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EAGLContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kEAGLRenderingAPIOpenGLES2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Set animation frame rate
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredFramesPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Not shown: load shaders, textures and vertex arrays, set up projection matrix
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupGL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeSinceLastUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// one quarter rotation per second
&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// Set up transform matrices for the rotating planet
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GLKMatrix4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelViewMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLKMatrix4MakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_normalMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLKMatrix3InvertAndTranspose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLKMatrix4GetMatrix3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelViewMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_modelViewProjectionMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLKMatrix4Multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_projectionMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelViewMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glkView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLKView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawInRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Clear the framebuffer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;glClearColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glClear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_COLOR_BUFFER_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_DEPTH_BUFFER_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Set shader uniforms to values calculated in -update
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;glUseProgram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_diffuseShading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glUniformMatrix4fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_uniformModelViewProjectionMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_modelViewProjectionMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glUniformMatrix3fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_uniformNormalMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_normalMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Draw using previously configured texture and vertex array
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;glBindTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_planetTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glBindVertexArrayOES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_planetMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glDrawElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TRIANGLE_STRIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_UNSIGNED_SHORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这个例子中，一个PlanetViewController类的实例（一个自定义的GLKViewController子类）从storyboard加载，以及一个标准的GLKView实例及其可绘制属性。 viewDidLoad方法创建一个OpenGL ES上下文并将其提供给视图，并且还设置动画循环的帧速率。&lt;/p&gt;

&lt;p&gt;视图控制器自动成为其视图的代理，因此它实现了动画循环的更新和显示阶段。 在更新方法中，它会计算显示旋转行星所需的变换矩阵。 在&lt;code class=&quot;highlighter-rouge&quot;&gt;glkView:drawInRect:&lt;/code&gt;方法中，它将这些矩阵提供给着色器程序并提交绘制命令来渲染行星几何。&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（二）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_2/" rel="alternate" type="text/html" title="OpenGL ES编程指南（二）" /><published>2018-03-25T20:00:00+08:00</published><updated>2018-03-25T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_2</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_2/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;三配置opengl-es上下文&quot;&gt;三、配置OpenGL ES上下文&lt;/h3&gt;

&lt;p&gt;OpenGL ES的每个实现都提供了一种方式来创建渲染上下文来管理OpenGL ES规范所需状态。 通过把上述状态放入上下文中，多个应用程序可以轻松共享图形硬件而不会相互干扰&lt;/p&gt;

&lt;h4 id=&quot;先初始化&quot;&gt;先初始化&lt;/h4&gt;

&lt;p&gt;在您的应用程序可以调用任何OpenGL ES函数之前，它必须初始化一个EAGLContext对象。 &lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;类还提供了用于将OpenGL ES内容与Core Animation集成的方法。&lt;/p&gt;

&lt;h4 id=&quot;当前上下文&quot;&gt;当前上下文&lt;/h4&gt;

&lt;p&gt;iOS应用程序中的每个线程都有一个当前上下文; 当您调用OpenGL ES函数时，其实是上下文的状态发生了改变&lt;/p&gt;

&lt;p&gt;要设置线程的当前上下文，请在该线程上执行时调用EAGLContext类方法setCurrentContext：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[EAGLContext setCurrentContext: myContext];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：如果您的应用程序在同一线程中的两个或更多个上下文之间主动切换，请在将新上下文设置为当前上下文之前调用glFlush函数。 这确保以前提交的命令及时传送到图形硬件。&lt;/p&gt;

&lt;p&gt;获取线程的当前上下文可以用这个：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[EAGLContext currentContext];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OpenGL ES持有与当前上下文对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;对象的强引用。 （如果您正在使用手动引用计数，则OpenGL ES将保留此对象。）当您调用setCurrentContext：方法更改当前上下文时，OpenGL ES不再引用上一个上下文。 （如果使用手动引用计数，OpenGL ES会释放EAGLContext对象。）为防止EAGLContext对象在不是当前上下文时被释放，您的应用程序必须对这些对象进行强引用（或保留）。&lt;/p&gt;

&lt;h4 id=&quot;每个上下文都针对特定版本的opengl-es&quot;&gt;每个上下文都针对特定版本的OpenGL ES&lt;/h4&gt;

&lt;p&gt;一个&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;对象只支持一个版本的OpenGL ES。例如，为OpenGL ES 1.1编写的代码与OpenGL ES 2.0或3.0上下文不兼容。使用核心OpenGL ES 2.0功能的代码与OpenGL ES 3.0上下文兼容，并且为OpenGL ES 2.0扩展设计的代码通常可以在OpenGL ES 3.0上下文中使用，只需稍作更改。许多新的OpenGL ES 3.0功能和增强的硬件功能需要OpenGL ES 3.0上下文。&lt;/p&gt;

&lt;p&gt;您的应用在创建并初始化EAGLContext对象时决定支持哪种版本的OpenGL ES。如果设备不支持请求的OpenGL ES版本，则initWithAPI：方法返回nil。在使用它之前，您的应用必须进行测试以确保上下文已成功初始化。&lt;/p&gt;

&lt;p&gt;要在应用中支持多个版本的OpenGL ES作为渲染选项，应首先尝试初始化要定位的最新版本的渲染上下文。如果返回的对象为零，请改为初始化旧版本的上下文。下面的代码表示如何执行此操作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EAGLContext* CreateBestEAGLContext()
{
   EAGLContext *context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES3];
   if (context == nil) {
      context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
   }
   return context;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上下文的API属性指定上下文支持哪个版本的OpenGL ES。 您的应用程序应该测试上下文的API属性并使用它来选择正确的呈现路径。 实现此行为的常见模式是为每个呈现路径创建一个类。 您的应用程序在初始化时测试上下文并创建一次渲染器。&lt;/p&gt;

&lt;h4 id=&quot;eagl-sharegroup为上下文管理opengl-es对象&quot;&gt;EAGL Sharegroup为上下文管理OpenGL ES对象&lt;/h4&gt;

&lt;p&gt;尽管上下文保存了OpenGL ES状态，但它不直接管理OpenGL ES对象。相反，OpenGL ES对象由&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLSharegroup&lt;/code&gt;对象创建和维护。每个上下文都包含一个&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLSharegroup&lt;/code&gt;对象，它将对象创建委托给它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/05.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，当两个或两个以上的上下文引用相同的Sharegroup时，Sharegroup的优点变得明显。当多个上下文连接到一个公共Sharegroup时，任何上下文创建的OpenGL ES对象都可用于所有上下文;如果绑定到与创建它的另一个上下文相同的对象标识符，则引用相同的OpenGL ES对象。移动设备上的资源往往很少;在多个上下文中创建相同内容的多个副本是浪费的。共享公共资源可以更好地利用设备上的可用图形资源。&lt;/p&gt;

&lt;p&gt;Sharegroup是一个不透明的对象;它没有应用程序可以调用的方法或属性。使用共享组对象的上下文保持强烈的引用。&lt;/p&gt;

&lt;p&gt;在两种特定情况下，Sharegroup是最有用的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当上下文之间共享的大部分资源不变时。&lt;/li&gt;
  &lt;li&gt;当您希望您的应用程序能够在渲染器的主线程以外的线程上创建新的OpenGL ES对象时。 在这种情况下，第二个上下文运行在单独的线程上，专门用于获取数据和创建资源。 资源加载后，第一个上下文可以绑定到对象并立即使用它。 &lt;code class=&quot;highlighter-rouge&quot;&gt;GLKTextureLoader&lt;/code&gt;类使用此模式来提供异步纹理加载。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要创建引用相同Sharegroup的多个上下文，首先通过调用initWithAPI来初始化第一个上下文： 会自动为上下文创建Sharegroup。 通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;initWithAPI:sharegroup:&lt;/code&gt; 方法，第二个和之后的上下文被初始化为使用第一个上下文的Sharegroup。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EAGLContext* firstContext = CreateBestEAGLContext();
EAGLContext* secondContext = [[EAGLContext alloc] initWithAPI:[firstContext API] sharegroup: [firstContext sharegroup]];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;：与同一Sharegroup关联的所有上下文必须使用与初始上下文相同版本的OpenGL ES API。&lt;/p&gt;

&lt;p&gt;当Sharegroup由多个上下文共享时，您的应用程序有责任管理对OpenGL ES对象的状态更改。 下面是规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果对象未被修改，您的应用程序可能会同时访问多个上下文中的对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当对象被发送到上下文的命令修改时，不得在任何其他上下文中读取或修改该对象。&lt;/li&gt;
  &lt;li&gt;对象修改后，所有上下文都必须重新绑定对象才能看到更改。 如果上下文在绑定它之前引用它，则该对象的内容是未定义的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下是您的应用程序应该遵循的更新OpenGL ES对象的步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在每个可能使用该对象的上下文中调用glFlush。&lt;/li&gt;
  &lt;li&gt;在想要修改对象的上下文中，调用一个或多个OpenGL ES函数来更改对象。&lt;/li&gt;
  &lt;li&gt;在接收到状态修改命令的上下文中调用glFlush。&lt;/li&gt;
  &lt;li&gt;在其他任何情况下，重新绑定对象标识符。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（一）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL_1/" rel="alternate" type="text/html" title="OpenGL ES编程指南（一）" /><published>2018-03-24T20:00:00+08:00</published><updated>2018-03-24T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL_1</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL_1/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;一关于opengl-es&quot;&gt;一、关于OpenGL ES&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Open Graphics Library&lt;/em&gt;（OpenGL）用于可视化2D和3D数据。 它是一个多用途的开放标准图形库，支持2D和3D数字内容创建，机械和建筑设计，虚拟样机，飞行模拟，视频游戏等应用。 您可以使用OpenGL来配置3D图形管道并向其提交数据。 顶点被转换并且被点亮，然后组装成图元，并被光栅化用以创建2D图像。 OpenGL旨在将函数调用转换为可发送到底层图形硬件的图形命令。 由于底层硬件专用于处理图形命令，所以OpenGL绘图通常非常快速。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OpenGL for Embedded Systems (OpenGL ES)&lt;/em&gt; 是OpenGL的简化版本，它消除了冗余功能，提供了一个易于学习和易于在移动图形硬件中实现的库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/04.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;预览&quot;&gt;预览&lt;/h4&gt;

&lt;p&gt;OpenGL ES允许应用程序利用底层图形处理器的强大功能。 iOS设备上的GPU可以执行复杂的2D和3D绘图，以及最终图像中每个像素的复杂阴影计算。 如果您的应用程序的设计要求需要最直接，最全面地访问GPU硬件，则应该使用OpenGL ES。 OpenGL ES的典型客户端包括呈现3D图形的视频游戏和模拟。&lt;/p&gt;

&lt;p&gt;OpenGL ES是一个底层的，以硬件为中心的API。 虽然它提供了最强大和最灵活的图形处理工具，但它的学习曲线陡峭，对应用程序的整体设计也有重大影响。 对于需要高性能图形以进行更多专业用途的应用程序，iOS提供了几个更高层的框架：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sprite Kit框架提供了一个为创建2D游戏而优化的硬件加速动画系统。&lt;/li&gt;
  &lt;li&gt;Core Image框架为静止和视频图像提供实时滤镜和分析。&lt;/li&gt;
  &lt;li&gt;Core Animation为所有iOS应用程序提供了硬件加速的图形渲染和动画基础结构，以及一个简单的声明式编程模型，使得实现复杂的用户界面动画变得非常简单。&lt;/li&gt;
  &lt;li&gt;您可以使用UIKit框架中的功能为Cocoa Touch用户界面添加动画，基于物理的动态效果和其他特殊效果。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二构建适用于ios-app的opengl-es清单&quot;&gt;二、构建适用于iOS APP的OpenGL ES清单&lt;/h3&gt;

&lt;p&gt;OpenGL ES规范定义了一系列独立于平台的API，用于使用GPU硬件渲染图形。实现OpenGL ES的平台提供了：一个渲染上下文用于执行OpenGL ES命令、帧缓冲区用于保存渲染结果，以及一个或多个渲染目标用以呈现帧缓冲区内容以供显示。在iOS中，&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;类实现了渲染上下文。 iOS只提供一种类型的帧缓冲区也就是OpenGL ES framebuffer对象，GLKView和CAEAGLLayer类实现渲染目标。&lt;/p&gt;

&lt;p&gt;在iOS中构建OpenGL ES应用程序需要考虑几个问题，其中一些是OpenGL ES编程通用的，其中一些针对iOS。按照此清单以及下面的详细部分进行使用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确定哪些版本的OpenGL ES为有您的应用程序需要的功能，并创建OpenGL ES上下文。&lt;/li&gt;
  &lt;li&gt;在运行时验证设备是否支持您要使用的OpenGL ES功能。&lt;/li&gt;
  &lt;li&gt;选择渲染OpenGL ES内容的位置。&lt;/li&gt;
  &lt;li&gt;确保您的应用在iOS中正常运行。&lt;/li&gt;
  &lt;li&gt;实现你的渲染引擎。&lt;/li&gt;
  &lt;li&gt;使用Xcode和Instruments调试您的OpenGL ES应用程序并调整它以获得最佳性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;选择版本&quot;&gt;选择版本&lt;/h4&gt;

&lt;p&gt;确定您的应用是否应该支持OpenGL ES 3.0，OpenGL ES 2.0，OpenGL ES 1.1或多个版本。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenGL ES 3.0是iOS 7中的新功能。它增加了许多新功能，可以实现更高性能，通用GPU计算技术以及以前只能在桌面级硬件和游戏控制台上实现的更复杂的视觉效果。&lt;/li&gt;
  &lt;li&gt;OpenGL ES 2.0是iOS设备的基准配置文件，具有基于可编程着色器的可配置图形管道。&lt;/li&gt;
  &lt;li&gt;OpenGL ES 1.1只提供了一个基本的固定功能图形管道，并且在iOS中主要用于向后兼容。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;验证opengl-es功能&quot;&gt;验证OpenGL ES功能&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013599&quot;&gt;&lt;em&gt;iOS Device Compatibility Reference&lt;/em&gt; &lt;/a&gt;总结了在iOS设备上可用的功能和拓展，但是为了尽可能多的系统版本和设备能够运行，你的APP应该总是在运行时查询OpenGL ES声明来检测功能。&lt;/p&gt;

&lt;p&gt;要确定特定实现的限制（如最大纹理大小或顶点属性的最大数量），请使用适当的glGet函数查找其数据，查找相应标记的值（如gl_h头中的MAX_TEXTURE_SIZE或MAX_VERTEX_ATTRIBS） 类型。&lt;/p&gt;

&lt;p&gt;要检查OpenGL ES 3.0扩展，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;glGetIntegerv&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;glGetStringi&lt;/code&gt;函数，如下面的代码示例所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOOL CheckForExtension(NSString *searchName)
{
    // Create a set containing all extension names.
    // (For better performance, create the set only once and cache it for future use.)
    int max = 0;
    glGetIntegerv(GL_NUM_EXTENSIONS, &amp;amp;max);
    NSMutableSet *extensions = [NSMutableSet set];
    for (int i = 0; i &amp;lt; max; i++) {
        [extensions addObject: @( (char *)glGetStringi(GL_EXTENSIONS, i) )];
    }
    return [extensions containsObject: searchName];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要检查OpenGL ES 1.1和2.0扩展，请调用&lt;code class=&quot;highlighter-rouge&quot;&gt;glGetString&lt;/code&gt;（GL_EXTENSIONS）以获取所有扩展名的列表。&lt;/p&gt;

&lt;h4 id=&quot;选择一个渲染目标&quot;&gt;选择一个渲染目标&lt;/h4&gt;

&lt;p&gt;在iOS中，帧缓冲区对象存储绘图命令的结果。 （iOS不实现窗口系统提供的帧缓冲区。）你可以以多种方式使用帧缓冲区对象的内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GLKit框架提供了一个View，该View绘制OpenGL ES内容并管理其自己的帧缓冲区对象，以及支持动画OpenGL ES内容的View Controller。使用这些类创建全屏views或将您的OpenGL ES内容合并到UIKit视图层次结构中。&lt;/li&gt;
  &lt;li&gt;CAEAGLLayer类提供了一种将OpenGL ES内容绘制为Core Animation Layer组成部分的方法。使用此类时，您必须创建自己的帧缓冲区对象。&lt;/li&gt;
  &lt;li&gt;与任何OpenGL ES实现一样，您还可以使用帧缓冲器进行离屏图形处理或渲染纹理，以用于图形管道中的其他位置。借助OpenGL ES 3.0，可以在使用多个渲染目标的渲染算法中使用屏幕外缓冲区。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;与ios集成&quot;&gt;与iOS集成&lt;/h4&gt;

&lt;p&gt;iOS应用程序默认支持多任务处理，但在OpenGL ES应用程序中正确处理此功能需要额外考虑。不正确地使用OpenGL ES会导致您的应用在后台被系统杀死。&lt;/p&gt;

&lt;p&gt;许多iOS设备都包含高分辨率显示器，因此您的应用应支持多种显示屏尺寸和分辨率&lt;/p&gt;

&lt;h4 id=&quot;实现渲染引擎&quot;&gt;实现渲染引擎&lt;/h4&gt;

&lt;p&gt;设计OpenGL ES绘图代码有许多可能的策略，其全部细节超出了本文档的范围。渲染引擎设计的许多方面对于OpenGL和OpenGL ES的所有实现都是通用的。&lt;/p&gt;

&lt;h4 id=&quot;调试和分析&quot;&gt;调试和分析&lt;/h4&gt;

&lt;p&gt;Xcode和Instruments提供了许多工具来跟踪渲染问题并分析应用程序中的OpenGL ES性能。&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL初识</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL/" rel="alternate" type="text/html" title="OpenGL初识" /><published>2018-03-24T20:00:00+08:00</published><updated>2018-03-24T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL/">&lt;h4 id=&quot;什么是opengl&quot;&gt;什么是OpenGL&lt;/h4&gt;

&lt;p&gt;OpenGL（全写Open Graphics Library）是指定义了一个跨编程语言、跨平台的编程接口规格的专业的图形程序接口。它用于三维图像（二维的亦可），是一个功能强大，调用方便的底层图形库。&lt;/p&gt;

&lt;p&gt;OpenGL™ 是行业领域中最为广泛接纳的 2D/3D 图形 API，其自诞生至今已催生了各种计算机平台及设备上的数千优秀应用程序。OpenGL™ 是独立于视窗操作系统或其它操作系统的，亦是网络透明的。在包含CAD、内容创作、能源、娱乐、游戏开发、制造业、制药业及虚拟现实等行业领域中，OpenGL™ 帮助程序员实现在 PC、工作站、超级计算机等硬件设备上的高性能、极具冲击力的高视觉表现力图形处理软件的开发。&lt;/p&gt;

&lt;h4 id=&quot;opengl主要功能是什么&quot;&gt;OpenGL主要功能是什么？&lt;/h4&gt;

&lt;p&gt;OpenGL是一个开放的三维图形软件包，它独立于窗口系统和操作系统，以它为基础开发的应用程序可以十分方便地在各种平台间移植；OpenGL可以与Visual C++紧密接口，便于实现机械手的有关计算和图形算法，可保证算法的正确性和可靠性；OpenGL使用简便，效率高。它具有七大功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、建模：OpenGL图形库除了提供基本的点、线、多边形的绘制函数外，还提供了复杂的三维物体（球、锥、多面体、茶壶等）以及复杂曲线和曲面绘制函数。&lt;/li&gt;
  &lt;li&gt;2、变换：OpenGL图形库的变换包括基本变换和投影变换。基本变换有平移、旋转、缩放、镜像四种变换，投影变换有平行投影（又称正射投影）和透视投 影两种变换。其变换方法有利于减少算法的运行时间，提高三维图形的显示速度。&lt;/li&gt;
  &lt;li&gt;3、颜色模式设置：OpenGL颜色模式有两种，即RGBA模式和颜色索引（Color Index）。&lt;/li&gt;
  &lt;li&gt;4、光照和材质设置：OpenGL光有自发光（Emitted Light）、环境光（Ambient Light）、漫反射光（Diffuse Light）和高光（Specular Light）。材质是用光反射率来表示。场景（Scene）中物体最终反映到人眼的颜色是光的红绿蓝分量与材质红绿蓝分量的反射率相乘后形成的颜色。&lt;/li&gt;
  &lt;li&gt;5、纹理映射（Texture Mapping）。利用OpenGL纹理映射功能可以十分逼真地表达物体表面细节。&lt;/li&gt;
  &lt;li&gt;6、位图显示和图象增强图象功能除了基本的拷贝和像素读写外，还提供融合（Blending）、抗锯齿（反走样）（Antialiasing）和雾（fog）的特殊图象效果处理。以上三条可使被仿真物更具真实感，增强图形显示的效果。&lt;/li&gt;
  &lt;li&gt;7、双缓存动画（Double Buffering）双缓存即前台缓存和后台缓存，简言之，后台缓存计算场景、生成画面，前台缓存显示后台缓存已画好的画面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;opengl-es是什么&quot;&gt;OpenGL ES是什么？&lt;/h4&gt;

&lt;p&gt;OpenGL ES (OpenGL for Embedded Systems) 是 OpenGL 三维图形 API 的子集，针对手机、PDA和游戏主机等嵌入式设备而设计。该API由Khronos集团定义推广，Khronos是一个图形软硬件行业协会，该协会主要关注图形和多媒体方面的开放标准。&lt;/p&gt;

&lt;h4 id=&quot;opengl-vs-opencv&quot;&gt;OpenGL VS OpenCV&lt;/h4&gt;

&lt;p&gt;Open CV是 Open Source Computer Vision Library
Open GL是 Open Graphics Library
Open CV主要是提供图像处理和视频处理的基础算法库，还涉及一些机器学习的算法。比如你想实现视频的降噪、运动物体的跟踪、目标（比如人脸）的识别这些都是CV的领域
OpenGL则专注在Graphics，3D绘图。
其实两者的区别就是Computer Vision和Computer Graphics这两个学科之间的区别，前者专注于从采集到的视觉图像中获取信息，是用机器来理解图像；后者是用机器绘制合适的视觉图像给人看。(摘自知乎)&lt;/p&gt;

&lt;h3 id=&quot;二opengl的ios环境&quot;&gt;二、OpenGL的iOS环境&lt;/h3&gt;

&lt;p&gt;GLKit是苹果iOS 5引入的一个为简化OpenGL ES的使用的框架，它为OpenGL ES的使用提供了相关的类和函数，GLKit是Cocoa Touch以及多个其他的框架（包含UIKit）的一部分。而GLKView和GLKViewController类名字中的GLK前缀表明这些类是GLKit框架的一部分&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">什么是OpenGL</summary></entry><entry><title type="html">OpenCV学习简介</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/11/OpenCV_1/" rel="alternate" type="text/html" title="OpenCV学习简介" /><published>2018-03-11T20:00:00+08:00</published><updated>2018-03-11T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/11/OpenCV_1</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/11/OpenCV_1/">&lt;h3 id=&quot;一前言&quot;&gt;一、前言&lt;/h3&gt;

&lt;h4 id=&quot;什么是opencv&quot;&gt;什么是OpenCV&lt;/h4&gt;

&lt;p&gt;OpenCV 是一个开源的计算机视觉库，&lt;a href=&quot;https://opencv.org/&quot;&gt;项目主页&lt;/a&gt;，采用C/C++语言编写，还提供了Python,Ruby，MATLAB等语言的接口。OpenCV的一个目标是构建一个简单易用的计算机视觉框架，以帮助开发人员更便捷地设计更复杂的计算机视觉相关应用程序。因为计算机视觉和机器学习密切相关，所以OpenCV还提供了MLL(Machine Learning Library)机器学习库。&lt;/p&gt;

&lt;h4 id=&quot;什么是计算机视觉&quot;&gt;什么是计算机视觉&lt;/h4&gt;

&lt;p&gt;计算机视觉是将来自静止图像或视频的数据转换成一个决策或者一种新的表达方式的过程，所有的这些装换都是为了达到某个目标。&lt;/p&gt;

&lt;p&gt;人脑将视觉信号划分如很多个通道，将各种不同的信息输入你的大脑。你的大脑有一个关注系统，会根据任务识别出图像的重要部分，并做重点分析，而其他部分则分析得较少，从而进行识别。&lt;/p&gt;

&lt;p&gt;在 计算机视觉系统中，计算机接收到的是来自摄像机或者磁盘文件的一个数值决战。一般来说，没有内置的模式识别系统，没有自动控制的对焦和光圈，没有多年的经验积累，视觉系统通常很低级。&lt;/p&gt;

&lt;h3 id=&quot;一mac配置opencv&quot;&gt;一、Mac配置OpenCV&lt;/h3&gt;

&lt;p&gt;1、下载OpenCV源码，&lt;a href=&quot;https://opencv.org/releases.html&quot;&gt;地址&lt;/a&gt;，可以看到有Windows，iOS，Android版本的下载，没有针对MacOS的需要我们自己去编译，下载Sources源码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_5/01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、安装CMake，用Homebrew安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、用CMake编译OpenCV&lt;/p&gt;

&lt;p&gt;在解压后的opencv文件夹内，新建一个文件夹release，并且cd进入，分别执行以下的命令行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake -G &quot;Unix Makefiles&quot; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_5/02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4、测试使用OpenCV&lt;/p&gt;

&lt;p&gt;建立一个文件夹，里面放入三个文件&lt;/p&gt;

&lt;p&gt;a.png&lt;/p&gt;

&lt;p&gt;DisplayImage.cpp&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;opencv2/opencv.hpp&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No image data &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namedWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Display Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINDOW_AUTOSIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Display Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;waitKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CMakeLists.txt&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake_minimum_required(VERSION 2.8)

//show 项目
project( show )
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
add_executable( show main.cpp )
target_link_libraries( show ${OpenCV_LIBS} )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在文件夹内执行命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake .
make
./show a.png
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以把图片a打开来&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_5/03.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">一、前言</summary></entry><entry><title type="html">Tomcat+Servlet</title><link href="http://www.helloted.com/java/2018/02/05/Java-Tomcat/" rel="alternate" type="text/html" title="Tomcat+Servlet" /><published>2018-02-05T20:00:00+08:00</published><updated>2018-02-05T20:00:00+08:00</updated><id>http://www.helloted.com/java/2018/02/05/Java-Tomcat</id><content type="html" xml:base="http://www.helloted.com/java/2018/02/05/Java-Tomcat/">&lt;h3 id=&quot;一安装tomcat&quot;&gt;一、安装Tomcat&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Tomcat&lt;/em&gt;是应用(java)服务器,它只是一个servlet容器.&lt;/p&gt;

&lt;p&gt;1、先去Tomcat官网下载&lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/12.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、将Zip文件解压并且重命名文件夹到一个目录，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Tomcat/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、使用命令行修改文件夹的权限&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod 755 /Library/Tomcat/bin/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、cd到&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Tomcat/bin&lt;/code&gt;文件夹下，启动Tomcat&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/14.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、打开浏览器,输入&lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;，出现下面的页面说明启动成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/13.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、关闭命令是&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh shutdown.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;二新建网页服务器&quot;&gt;二、新建网页服务器&lt;/h3&gt;

&lt;p&gt;使用intellij idea这个IDE来搭建&lt;/p&gt;

&lt;p&gt;1、新建项目，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Java Enterprise&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Web Application&lt;/code&gt;然后next&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、输入项目名称已经存放目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/16.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、完成进入项目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/17.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中index.jsp是默认的首页网页，此时点击右上角的Tomcat开启服务器，会自动打开一个网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/18.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看看网页源代码&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;$Title$&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  $END$
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实就是index.jsp的代码，说明此时访问的是index.jsp的页面。下面我们来新建新的页面&lt;/p&gt;

&lt;p&gt;4、添加web.xml.&lt;/p&gt;

&lt;p&gt;File-&amp;gt;Project Structure&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/19.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在项目中会有一个新的文件夹，里面就有web.xml文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/20.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、新建一个Servlet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/21.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名为first&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/22.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时web.xml会自动配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/23.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、编写Servlet&lt;/p&gt;

&lt;p&gt;在fisrt.java的doGet里添加代码如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is First Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7、配置访问路径&lt;/p&gt;

&lt;p&gt;在web.xml里添加以下代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;first&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/first&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/24.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8、点击右上角的tomcat运行，访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/first&lt;/code&gt;可以看到第一个网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/25.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>Ted</name></author><category term="Java" /><summary type="html">一、安装Tomcat</summary></entry><entry><title type="html">View编程指南(四)</title><link href="http://www.helloted.com/ios/2018/01/15/View_4/" rel="alternate" type="text/html" title="View编程指南(四)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_4</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_4/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;五动画&quot;&gt;五、动画&lt;/h3&gt;

&lt;p&gt;动画在用户界面的不同状态之间提供流畅的视觉转换。 在iOS中，动画广泛用于重新定位view，更改大小，将其从view层次结构中移除，并将其隐藏起来。 您可以使用动画将反馈传达给用户或实现有趣的视觉效果。&lt;/p&gt;

&lt;p&gt;在iOS中，创建复杂的动画不需要您编写任何绘图代码。 本章介绍的所有动画技术都使用Core Animation提供的内置支持。 您只需触发动画并让Core Animation处理单个帧的渲染。 这使得创建复杂的动画非常容易，只需要几行代码。&lt;/p&gt;

&lt;h4 id=&quot;哪些可以有动画&quot;&gt;哪些可以有动画？&lt;/h4&gt;

&lt;p&gt;UIKit和Core Animation都支持动画，但每种技术提供的支持水平都不相同。 在UIKit中，动画是使用UIView对象执行的。 view支持一组涵盖许多常见任务的基本动画。 例如，您可以对view的属性进行动画更改，或使用过渡动画将一组view替换为另一组view&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Property&lt;/th&gt;
      &lt;th&gt;Changes you can make&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改View的位置和大小 (如果View的 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; 没有包含identity transform, 那么取而代之，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; .)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改 view’s size.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改相对于父View坐标系统的中心点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改相对于其中心点的移动缩放旋转. 这是2D层面的 (如果要3D层面需要使用 Core Animation.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改 view的透明度.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改View的背景颜色&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentStretch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来使内容更好地适应填充&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;动画view转换是一种让您对view hierarchy进行更改的方式，而不是view controller提供的view hierarchy。虽然您应该使用view controller来管理简洁的view hierarchy，但有时您可能需要替换全部或部分view hierarchy。在这些情况下，您可以使用基于view的转换来动画添加和删除view。
在你想要执行更复杂的动画的时候，或者UIView类不支持的动画中，你可以使用Core Animation和view的底层layer来创建动画。由于view和layer对象错综复杂地链接在一起，因此对view layer的更改会影响view本身。使用核心动画，您可以为您的view的layer设置以下类型的更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;layer的大小和位置&lt;/li&gt;
  &lt;li&gt;执行转换时使用的中心点&lt;/li&gt;
  &lt;li&gt;转换到三维空间中的layer或其sublayer&lt;/li&gt;
  &lt;li&gt;从layer分层结构中添加或删除layer&lt;/li&gt;
  &lt;li&gt;相对于其他兄弟layer的Z层顺序&lt;/li&gt;
  &lt;li&gt;layer的shadow&lt;/li&gt;
  &lt;li&gt;layer的border（包括layer的边角是否圆整）&lt;/li&gt;
  &lt;li&gt;在调整大小操作期间延伸的layer部分&lt;/li&gt;
  &lt;li&gt;layer的不透明度&lt;/li&gt;
  &lt;li&gt;位于layer边界之外的子layer的剪切行为&lt;/li&gt;
  &lt;li&gt;layer的当前内容&lt;/li&gt;
  &lt;li&gt;layer的栅格化行为&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，如果你的View用了一个自定义的layer对象，也就是这个对象没有与View相关联，你必须用Core Animation来修改它&lt;/p&gt;

&lt;h4 id=&quot;用block动画&quot;&gt;用Block动画&lt;/h4&gt;

&lt;p&gt;有几种基于block的方法为动画block提供不同级别的配置。 这些方法是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:animations:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:animations:completion:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:delay:options:animations:completion:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于这些是类方法，因此您使用它们创建的动画块不会绑定到单个view。 因此，您可以使用这些方法创建一个包含对多个view进行更改的动画&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;firstView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;secondView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;前一个例子中的动画只运行一次，使用一个ease-in，ease-out的动画曲线。 如果要更改默认的动画参数，则必须使用&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration：delay：options：animations：completion：&lt;/code&gt;方法来执行动画。 该方法可以让您自定义以下动画参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开始动画之前使用的延迟&lt;/li&gt;
  &lt;li&gt;在动画中使用的时间曲线的类型&lt;/li&gt;
  &lt;li&gt;动画应该重复的次数&lt;/li&gt;
  &lt;li&gt;当动画到达最后时，动画是否会自动反转&lt;/li&gt;
  &lt;li&gt;触摸事件是否在动画进行过程中传递到view&lt;/li&gt;
  &lt;li&gt;动画是否应该中断任何正在进行的动画，或者在开始之前等到动画完成&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showHideView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fade out the view right away
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseIn&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;thirdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Wait one second and then fade in the view
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;thirdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重要提示：当涉及该属性的动画已在进行中时，更改属性的值不会停止当前动画。 而是当前的动画继续，新值会有动画。&lt;/p&gt;

&lt;p&gt;如果您的应用程序在iOS 3.2及更早版本中运行，则必须使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;beginAnimations：context：&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;commitAnimations&lt;/code&gt;类方法来定义您的动画块。iOS4之后则应该用block动画&lt;/p&gt;

&lt;h4 id=&quot;动画block嵌套&quot;&gt;动画block嵌套&lt;/h4&gt;

&lt;p&gt;您可以通过嵌套其他动画blcok来为动画block的某些部分分配不同的时序和配置选项。 顾名思义，嵌套动画block是在现有动画block内创建的新动画block。 嵌套动画与任何父动画同时启动，但运行（大部分）与他们自己的配置选项。 默认情况下，嵌套动画会继承父级的持续时间和动画曲线，但即使这些选项可以根据需要被覆盖&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;aView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
            &lt;span class=&quot;c1&quot;&gt;// Create a nested animation that has a different
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// duration, timing curve, and configuration.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                 &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionOverrideInheritedCurve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionOverrideInheritedDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionRepeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionAutoreverse&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAnimationRepeatCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;anotherView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这种情况下，两个view正在被淡化为完全透明，但是另一个view对象的透明度在最终隐藏之前来回地多次改变。 在嵌套动画块中使用的UIViewAnimationOptionOverrideInheritedCurve和UIViewAnimationOptionOverrideInheritedDuration键允许为第二个动画修改第一个动画的曲线和持续时间值。 如果这些键不存在，则将使用外部动画块的持续时间和曲线。&lt;/p&gt;

&lt;h4 id=&quot;在view之间创建动画转换&quot;&gt;在View之间创建动画转换&lt;/h4&gt;

&lt;p&gt;view转换可帮助您隐藏与在view层次结构中添加，删除，隐藏或显示view相关的突然更改。 您使用view transitions来实现以下类型的更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改现有view的可见subview。 当您想对现有view进行相对较小的更改时，通常会选择此选项。&lt;/li&gt;
  &lt;li&gt;用不同的view替换view层次结构中的一个view。 如果要替换跨越全部或大部分屏幕的view层次结构，通常选择此选项。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重要提示：view转换不应与view controller启动的转换相混淆，例如present view controller的呈现或将新view controller推到navigation堆栈上。 view转换仅影响view层次，而view - controller转换也改变活动view controller。 因此，对于view转换，如果你在初始化转换时保持活动，那么VC在转换结束时也是活动的&lt;/p&gt;

&lt;h4 id=&quot;修改view的subviews&quot;&gt;修改View的subviews&lt;/h4&gt;

&lt;p&gt;更改view的subview允许您对view进行适度更改。例如，您可以添加或删除subview以在两种不同状态之间切换superview。在动画完成时，显示相同的view，但其内容现在不同。&lt;/p&gt;

&lt;p&gt;在iOS 4和更高版本中，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionWithView：duration：options：animations：completion：&lt;/code&gt;方法为view启动过渡动画。在传递给此方法的动画块中，通常动画的唯一更改是与显示，隐藏，添加或删除子view相关的更改。将动画限制为该集合允许view创建view之前和之后版本的快照图像，并且在两个图像之间创建动画，这更高效。但是，如果您需要动画其他更改，则可以在调用方法时包含&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewAnimationOptionAllowAnimatedContent&lt;/code&gt;选项。包含该选项可防止view创建快照，并直接动画化所有更改。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;displayNewPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionWithView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionCurlUp&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Save the old text and then swap the views.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveNotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
            &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换一个View&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggleMainViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionFromView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;duration:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionFlipFromRight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionFlipFromLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;view和layer动画一起&quot;&gt;View和layer动画一起&lt;/h4&gt;

&lt;p&gt;应用程序可以根据需要自由混合基于view和基于layer的动画代码，但配置动画参数的过程取决于谁拥有layer。 更改view拥有的层与更改view本身相同，并且应用于layer属性的任何动画都尊重当前基于view的动画块的动画参数。 你自己创建的layer也是如此。 自定义layer对象会忽略基于view的动画块参数，而是使用默认的“核心动画”参数。&lt;/p&gt;

&lt;p&gt;如果要为所创建的layer自定义动画参数，则必须直接使用Core Animation。 通常，使用Core Animation动画化layer包括创建一个CABasicAnimation对象或CAAnimation的其他具体子类。 然后，您将该动画添加到相应的layer。 您可以从基于view的动画块内部或外部应用动画。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Animate the first half of the view rotation.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;c1&quot;&gt;// Rotate the embedded CALayer in the opposite direction.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CABasicAnimation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationWithKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//CACurrentMediaTime() + 1;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAValueFunction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAValueFunctionRotateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAMediaTimingFunction&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;functionWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;layerAnimation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Now do the second half of the view rotation.
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;359&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">View编程指南(三)</title><link href="http://www.helloted.com/ios/2018/01/15/View_3/" rel="alternate" type="text/html" title="View编程指南(三)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_3</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_3/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;四views&quot;&gt;四、Views&lt;/h3&gt;

&lt;p&gt;由于View对象是应用程序与用户交互的主要方式，因此它们有许多责任。 这里仅仅是少数：&lt;/p&gt;

&lt;p&gt;布局和subview管理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view定义了与其父view相关的默认调整大小行为。&lt;/li&gt;
  &lt;li&gt;一个view可以管理subview列表。&lt;/li&gt;
  &lt;li&gt;view可以根据需要重写subview的大小和位置。&lt;/li&gt;
  &lt;li&gt;view可以将其坐标系中的点转换为其他view或window的坐标系。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;绘画和动画&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view在其矩形区域绘制内容。&lt;/li&gt;
  &lt;li&gt;一些view属性可以动画变成新的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事件处理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view可以接收触摸事件。&lt;/li&gt;
  &lt;li&gt;view参与响应者链。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;创建view&quot;&gt;创建View&lt;/h4&gt;

&lt;p&gt;创建View最简单的方法是使用Interface Builder以图形方式进行组装。从Interface Builder中，您可以将View添加到界面，将这些view排列到层次结构中，配置每个view的设置，并将与view相关的行为连接到您的代码。由于Interface Builder使用实时view对象（即view类的实际实例），因此您在设计时看到的是运行时获得的内容。然后将这些活动对象保存在一个nib文件中，这是一个资源文件，用于保留对象的状态和配置。&lt;/p&gt;

&lt;p&gt;您通常会创建nib文件，以便为应用程序的一个view controller存储整个view层次结构。 nib文件的顶层通常包含一个表示view controllerview的view对象。（view controller本身通常由文件的所有者对象来表示。）顶层view的大小应该适合目标设备，并且包含所有要呈现的其他view。使用nib文件仅存储view controllerview层次结构的一部分是很少见的。&lt;/p&gt;

&lt;p&gt;在view controller中使用nib文件时，只需使用nib文件信息初始化view controller即可。view controller在适当的时候处理view的加载和卸载。但是，如果您的nib文件未与view controller关联，则可以使用NSBundle或UINib对象手动加载nib文件内容，该对象使用nib文件中的数据来重构view对象。&lt;/p&gt;

&lt;p&gt;或者用代码创建&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;viewRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;设置view的属性&quot;&gt;设置View的属性&lt;/h4&gt;

&lt;p&gt;UIView类有几个声明的属性来控制View的外观和行为。 这些属性用于操纵View的大小和位置，View的透明度，背景颜色和渲染行为。 所有这些属性都具有适当的默认值，您可以根据需要稍后进行更改。您还可以使用“Inspector”窗口在Interface Builder中配置其中的许多属性。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;用处&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;opaque&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性影响view的不透明度。 alpha和hidden属性直接改变view的不透明度。opaque属性告诉系统如何合成view。 如果view的内容完全不透明，则将此属性设置为YES，因此不会显示任何底层view的内容。 将此属性设置为YES可消除不必要的合成操作，从而提高性能。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性会影响view的大小和位置。 center和frame属性表示view相对于superview的位置。 该frame还包括view的大小。 bounds属性定义了view在其自己的坐标系中的可见内容区域。transform属性用于以复杂的方式动画或移动整个view。 例如，您将使用变换来旋转或缩放view。 如果当前变换不是身份变换，则frame属性是不确定的，应该忽略。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizingMask&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizesSubviews&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性会影响view及其子view的自动调整大小行为。 autoresizingMask属性控制view如何响应其父view bounds中的更改。 autoresizesSubviews属性控制是否调整当前view的subview的大小。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentMode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;contentStretch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;contentScaleFactor&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性影响view内部内容的呈现行为。 contentMode和contentStretch属性确定在view的宽度或高度更改时如何处理内容。 contentScaleFactor属性仅在需要为高分辨率屏幕自定义view的绘制行为时使用。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gestureRecognizers&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;userInteractionEnabled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;multipleTouchEnabled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;exclusiveTouch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性会影响view处理触摸事件的方式。 gestureRecognizers属性包含附加到view的手势识别器。 其他属性控制view支持的触摸事件。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subviews&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect:&lt;/code&gt;method, &lt;code class=&quot;highlighter-rouge&quot;&gt;layer&lt;/code&gt;, (&lt;code class=&quot;highlighter-rouge&quot;&gt;layerClass&lt;/code&gt; method)&lt;/td&gt;
      &lt;td&gt;这些属性和方法可以帮助您管理view的实际内容。 对于简单的view，您可以设置背景颜色并添加一个或多个subviews。 subviews属性本身包含subview的只读列表，但有几种添加和重新排列subview的方法。 对于具有自定义绘图行为的view，您必须重写drawRect：方法。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;UIView类包含一个tag属性，您可以使用它来为各个view对象添加一个整数值。 您可以使用tag唯一地标识view层次结构中的view，并在运行时执行对这些view的搜索。（基于tag的搜索比自己迭代view层次更快。）tag属性的默认值为0。&lt;/p&gt;

&lt;p&gt;要搜索带tag的view，请使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWithTag：&lt;/code&gt;方法。 此方法执行接收器及其subview的深度优先搜索。 它不搜索superview或view层次结构的其他部分。 因此，从层次结构的root view调用此方法会搜索层次结构中的所有view，但是从特定的subview调用它只会搜索view的子集。&lt;/p&gt;

&lt;h4 id=&quot;创建和管理一个view-hierarchy&quot;&gt;创建和管理一个View Hierarchy&lt;/h4&gt;

&lt;p&gt;管理view层次结构是开发应用程序用户界面的关键部分。 您的view的组织影响您的应用程序的外观，以及您的应用程序如何响应更改和事件。 例如，view层次结构中的父子关系确定哪些对象可能处理特定的触摸事件。 同样，父子关系定义每个view如何响应界面方向的变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/16.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;添加和删除子view&quot;&gt;添加和删除子view&lt;/h4&gt;

&lt;p&gt;Interface Builder是构建view层次结构最方便的方式，因为您可以用图形方式组装view，查看view之间的关系，并确切了解在运行时将如何显示这些view。使用Interface Builder时，将结果view层次结构保存在一个nib文件中，在运行时加载，因为需要相应的view。&lt;/p&gt;

&lt;p&gt;如果您希望以编程方式创建view，请创建并初始化它们，然后使用以下方法将它们排列为层次结构：&lt;/p&gt;

&lt;p&gt;要将subview添加到superview，请调用superview的&lt;code class=&quot;highlighter-rouge&quot;&gt;addSubview：&lt;/code&gt;方法。此方法将subview添加到父级View的subviews列表的末尾。
要在superview的subviews中间插入subview，请调用superview的任何&lt;code class=&quot;highlighter-rouge&quot;&gt;insertSubview：...&lt;/code&gt;方法。在list中间插入一个subview可视化地将该view放置在列表中稍后的任何view的后面。
要对其superview的现有subviews进行重新排序，请调用superview的&lt;code class=&quot;highlighter-rouge&quot;&gt;bringSubviewToFront：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;sendSubviewToBack：&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;exchangeSubviewAtIndex：&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;withSubviewAtIndex：&lt;/code&gt;方法。使用这些方法比删除subview并重新插入它们要快。
要从其superview移除subview，请调用subview的removeFromSuperview方法（而不是superview）。
当subview添加到其父项时，subview的当前frame矩形表示它在superview内的初始位置。frame位于其superview的可见边界之外的subview在默认情况下不会被剪切。如果您希望将subview剪裁到superview的边界，则必须明确地将superview的clipsToBounds属性设置为YES。&lt;/p&gt;

&lt;p&gt;一个地方你可以添加subview到view层次结构是在VC的loadView或viewDidLoad方法。如果以编程方式构建view，则将view创建代码放置在view controller的loadView方法中。无论是以编程方式创建view还是从nib文件加载view，都可以在viewDidLoad方法中包含其他view配置代码。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;TransitionsTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// create the container view which we will use for transition animation (centered horizontally)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                                        &lt;span class=&quot;n&quot;&gt;kTopPlacement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// The container view can represent the images for accessibility.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setIsAccessibilityElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAccessibilityLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;ImagesTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// create the initial image view
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImageView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;scene1.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// create the alternate image view (to transition between)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipToView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImageView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipToView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;scene2.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重要提示：Superviews自动retain subviews，所以在嵌入subview之后，释放该subview是安全的。 实际上，建议这样做是因为它会阻止您的应用程序保留一次太多的view，并在稍后导致内存泄漏。 请记住，如果您从其supview中删除subview并打算重用它，则必须再次保留该subview。 &lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromSuperview&lt;/code&gt;方法在移除之前autorelease一个subview。 如果在下一个事件循环周期之前不retain view，view将被released。&lt;/p&gt;

&lt;p&gt;将subview添加到另一个View时，UIKit会通知superview和subview。 如果实现自定义view，则可以通过重写&lt;code class=&quot;highlighter-rouge&quot;&gt;willMoveToSuperview：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;willMoveToWindow：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;willRemoveSubview：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;didAddSubview：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;didMoveToSuperview&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;didMoveToWindow&lt;/code&gt;方法中的一个或多个拦截这些通知。 您可以使用这些通知来更新与您的view层次结构相关的任何状态信息或执行其他任务。&lt;/p&gt;

&lt;p&gt;创建view层次结构后，可以使用superivew和subview属性以编程方式导航它。 每个view的window属性包含当前显示view的window（如果有的话）。 由于view层次结构中的root view没有父view，因此其superview属性设置为nil。 对于当前在屏幕上的view，window对象是view层次结构的root view。&lt;/p&gt;

&lt;h4 id=&quot;隐藏view&quot;&gt;隐藏View&lt;/h4&gt;

&lt;p&gt;要以可视方式隐藏view，可以将其hidden属性设置为YES，也可以将其alpha属性更改为0.0。隐藏的view不会从系统接收触摸事件。但是，隐藏的view会参与与view层次关联的自动调整和其他布局操作。因此，隐藏view通常是从view层次结构中删除view的一种方便的替代方法，特别是如果您计划在不久的将来再次显示view时。&lt;/p&gt;

&lt;p&gt;重要提示：如果您隐藏当前是第一响应者的view，则该view不会自动退出其第一响应者状态。针对第一响应者的事件仍然传递到隐藏的view。为了防止这种情况发生，当您隐藏它时，您应该强制您的view退出第一个响应者状态。&lt;/p&gt;

&lt;p&gt;如果要为view的可视化转换为隐藏（或相反），您必须使用view的alpha属性进行动画处理。隐藏的属性不是一个动画属性，所以你对它做出的任何改变立即生效。&lt;/p&gt;

&lt;h4 id=&quot;定位view-hierarchy中的view&quot;&gt;定位View Hierarchy中的view&lt;/h4&gt;

&lt;p&gt;在view层次结构中定位view有两种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;将指针存储在适当位置的任何相关view中，例如拥有view的VC中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为每个view的tag属性分配一个唯一的整数，并使用viewWithTag：方法来定位它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;存储对相关view的引用是定位view的最常见方法，并使访问这些view非常方便。如果使用Interface Builder创建view，则可以使用outlet将nib文件中的对象连接到另一个对象。对于以编程方式创建的view，可以在私有成员变量中存储对这些view的引用。无论您使用outlets还是私有成员变量，您都有责任根据需要保留view，然后将其释放。确保对象被保留和正确释放的最好方法是使用声明的属性。&lt;/p&gt;

&lt;p&gt;tag是减少硬编码依赖性并支持更加动态和灵活的解决方案的有用方法。你可以使用它的tag来定位它而不是存储一个指向view的指针。tag也是引用view的更持久的方式。例如，如果要保存应用程序中当前可见的view列表，则应将每个可见view的tag写入文件。这比归档实际的view对象更简单，特别是在只跟踪当前可见view的情况下。当您的应用程序随后被加载时，您将重新创建您的view并使用保存的tag列表来设置每个view的可见性，从而将您的view层次结构返回到之前的状态。&lt;/p&gt;

&lt;h4 id=&quot;移动缩放旋转view&quot;&gt;移动、缩放、旋转View&lt;/h4&gt;

&lt;p&gt;每个view都有一个关联的affine transform，可以用来移动，缩放或旋转view的内容。 view transform会改变view的最终渲染外观，通常用于实现滚动，动画或其他视觉效果。&lt;/p&gt;

&lt;p&gt;UIView的transform属性包含一个应用了转换的CGAffineTransform结构。 默认情况下，此属性设置为标记转换，不会修改view的外观。 您可以随时为此属性分配一个新的转换。 例如，要将view旋转45度，可以使用以下代码：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将上述代码中的变换应用于view将围绕其中心点顺时针旋转。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/17.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将多个transform应用于view时，将这些transform添加到CGAffineTransform结构的顺序非常重要。 旋转view然后移动与先移动后旋转是不一样的。 即使在每种情况下旋转和平移的数量是相同的，但是变换的顺序影响最终的结果。 此外，您添加的任何转换都将应用于相对于view的center。 因此，应用旋转因子围绕其中心点旋转view。 缩放view会更改view的宽度和高度，但不会更改其center.&lt;/p&gt;

&lt;h4 id=&quot;view-hierarchy中转换坐标&quot;&gt;View Hierarchy中转换坐标&lt;/h4&gt;

&lt;p&gt;在许多情况下，特别是在处理事件时，应用程序可能需要将坐标值从一个参照系转换为另一个参照系。 例如，触摸事件报告每个触摸在windows坐标系中的位置，但view对象通常需要view的本地坐标系中的信息。 UIView类定义了以下用于将坐标转换为view本地坐标系的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:fromView:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:fromView:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:toView:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:toView:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convert ...：fromView：&lt;/code&gt;方法将坐标从其他view的坐标系转换为当前view的局部坐标系（bounds矩形）。 相反，&lt;code class=&quot;highlighter-rouge&quot;&gt;convert ...：toView：&lt;/code&gt;方法将坐标从当前view的本地坐标系（bounds矩形）转换为指定view的坐标系。 如果您将nil指定为任何方法的参考view，则将转换到包含view的window的坐标系并从该view的坐标系转换。&lt;/p&gt;

&lt;p&gt;除了UIView转换方法之外，UIWindow类还定义了几种转换方法。 这些方法类似于UIView版本，除了不是从view的局部坐标系转换而是从window的坐标系转换而来。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:fromWindow:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:fromWindow:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:toWindow:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:toWindow:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在旋转view中转换坐标时，UIKit会在假定要返回的矩形反映源矩形所覆盖的屏幕区域的情况下转换矩形。&lt;/p&gt;

&lt;p&gt;图显示了一个转换过程中如何导致矩形大小改变的例子。 在图中，外部父view包含旋转的subview。 将subview坐标系中的矩形转换为父坐标系，得到一个物理上较大的矩形。 这个较大的矩形实际上是outerView bounds中最小的矩形，它完全包围了旋转的矩形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/18.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;运行时调整view的大小和位置&quot;&gt;运行时调整View的大小和位置&lt;/h4&gt;

&lt;p&gt;每当view的大小发生变化时，其subview的大小和位置都必须相应地改变。 UIView类支持view hierarchy中的view的自动和手动布局。 通过自动布局，您可以设置每个view在其父view调整大小时应遵循的规则，然后完全忽略调整大小的操作。 通过手动布局，您可以根据需要手动调整view的大小和位置。&lt;/p&gt;

&lt;p&gt;在view中发生以下任何事件时，可能会发生布局更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view bounds矩形的大小发生变化。&lt;/li&gt;
  &lt;li&gt;发生界面方向更改，通常会触发root view bounds矩形中的更改。&lt;/li&gt;
  &lt;li&gt;与view图层相关联的核心动画sublayers发生更改并需要布局。&lt;/li&gt;
  &lt;li&gt;您的应用程序通过调用view的&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded&lt;/code&gt;方法来强制执行布局。&lt;/li&gt;
  &lt;li&gt;您的应用程序通过调用view 底层layer的&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout&lt;/code&gt;方法来强制布局。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当您更改view的大小时，通常需要更改嵌入的子view的位置和大小，以考虑其父级的新大小。 superview的autoresizesSubviews属性决定子view是否调整大小。如果此属性设置为YES，则该view使用每个子view的autoresizingMask属性来确定如何调整和定位该子view。对任何子view的大小更改会触发嵌入式子view的类似布局调整。&lt;/p&gt;

&lt;p&gt;对于view层次结构中的每个view，将该view的autoresizingMask属性设置为适当的值是处理自动布局更改的重要部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/19.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置自动调整规则的最简单方法是使用Interface Builder的“Size”检查器中的“AutoSizing”控件。 上图中灵活的宽度和高度常数与“AutoSizing”控件图中的宽度和大小指示器具有相同的行为。 但是，保证的行为和使用是有效的逆转。 在界面构建器中，边缘指示符的存在意味着边距具有固定大小，并且缺少指示符意味着边距具有灵活的大小。 幸运的是，Interface Builder提供了一个动画来展示自动修改行为对你的view的影响。&lt;/p&gt;

&lt;p&gt;重要提示：如果view的transform属性不包含标识转换，则该view的frame是未定义的，其自动调整行为的结果也是如此。&lt;/p&gt;

&lt;h4 id=&quot;手动调整view的布局&quot;&gt;手动调整view的布局&lt;/h4&gt;

&lt;p&gt;只要view的大小发生变化，UIKit就会应用该view的subview的自动调整行为，然后调用view的layoutSubviews方法以使其进行手动更改。您可以在自定义view中实现layoutSubviews方法，当自动执行行为本身不会产生所需的结果时。此方法的实现可以执行以下任何操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;调整任何直接subview的大小和位置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;添加或删除subview或核心动画layer。&lt;/li&gt;
  &lt;li&gt;通过调用setNeedsDisplay或setNeedsDisplayInRect：方法强制subview重绘。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;应用程序经常手动布置root view的一个地方是在实现大的可滚动区域时。由于对其可滚动内容拥有一个大view是不切实际的，因此应用程序通常会实现一个root view，其中包含许多较小的view。每个图块代表可滚动内容的一部分。当滚动事件发生时，根view调用其setNeedsLayout方法来启动布局更改。其layoutSubviews方法然后根据发生的滚动量重新定位平铺view。当tile从view的可见区域滚出时，layoutSubviews方法将tile移动到传入边缘，替换进程中的内容。&lt;/p&gt;

&lt;p&gt;在编写布局代码时，请务必以下列方式测试您的代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改view的方向以确保布局在所有支持的接口方向上正确。&lt;/li&gt;
  &lt;li&gt;确保你的代码正确响应状态栏高度的变化。当打电话时，状态栏高度会增加，当用户结束通话时，状态栏的大小会减小。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;在运行时修改view&quot;&gt;在运行时修改view&lt;/h4&gt;

&lt;p&gt;随着应用程序从用户接收输入，他们调整其用户界面以响应该输入。应用程序可能会通过重新排列view，更改其大小或位置，隐藏或显示view或加载全新的view来修改view。在iOS应用程序中，有几种地方和方法可以执行这些操作：&lt;/p&gt;

&lt;p&gt;在VC中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;view controller必须在显示它们之前创建其view。它可以从一个nib文件加载view或以编程方式创建它们。当这些views不再需要时，就把它们处理掉。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当设备改变方向时，view controller可能会调整view的大小和位置以匹配。作为调整新方向的一部分，可能会隐藏一些views，并显示其他views。&lt;/li&gt;
  &lt;li&gt;当view controller管理可编辑的内容时，它可能会调整其view层次结构时，编辑模式。例如，它可能会添加额外的按钮和其他控件来方便编辑其内容的各个方面。这可能还需要调整任何现有的view以适应额外的控制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在动画块中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当您想要在用户界面的不同view集之间切换时，您可以隐藏一些view并在动画块中显示其他view。&lt;/li&gt;
  &lt;li&gt;实现特殊效果时，可以使用动画块来修改view的各种属性。例如，要动画改变view的大小，你可以改变它的frame矩形的大小。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;触摸事件或手势发生时，您的界面可能会通过加载一组新的view或更改当前的view来作出响应。有关处理事件的信息，请参阅iOS事件处理指南。&lt;/li&gt;
  &lt;li&gt;当用户与滚动view交互时，大的可滚动区域可能会隐藏并显示切片子view。有关支持可滚动内容的更多信息，请参阅&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/UIScrollView_pg/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008179&quot;&gt;&lt;em&gt;Scroll View Programming Guide for iOS&lt;/em&gt;&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;当键盘出现时，您可以重新定位或调整view的大小，使其不会位于键盘下方。有关如何与键盘交互的信息，请参阅&lt;a href=&quot;https://developer.apple.com/library/content/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009542&quot;&gt;Text Programming Guide for iOS&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;view controller是对view进行更改的常用位置。由于view controller管理与正在显示的内容相关联的view分层结构，因此它最终负责这些view发生的所有事情。当加载其view或处理方向更改时，view controller可以添加新view，隐藏或替换现有view，并进行任意数量的更改以使view准备好显示。如果您实现了对编辑view内容的支持，则UIViewController中的&lt;code class=&quot;highlighter-rouge&quot;&gt;setEditing：animated：&lt;/code&gt;方法为您提供了将view转换为可编辑版本的地方。&lt;/p&gt;

&lt;p&gt;动画块是启动view相关更改的另一个常见位置。内置到UIView类中的动画支持可以轻松地将更改设置为查看属性。您也可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionWithView：duration：options：animations：completion：&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionFromView：toView：duration：options：completion：&lt;/code&gt;将新整个view换出的方法&lt;/p&gt;

&lt;h4 id=&quot;与core-animation-layers交互&quot;&gt;与Core Animation Layers交互&lt;/h4&gt;

&lt;p&gt;每个view对象都有一个专用的Core Animation Layer，用于管理屏幕上view内容的显示和动画。 虽然您可以使用view对象做很多事情，但您也可以根据需要直接使用相应的layer对象。 view的layer对象存储在view的layer属性中。&lt;/p&gt;

&lt;p&gt;与view关联的layer类型在创建view后无法更改。 因此，每个view使用layerClass类方法来指定其layer对象的类。 此方法的默认实现返回CALayer类，更改此值的唯一方法是子类，重写该方法，并返回一个不同的值。 您可以更改此值以使用不同类型的图层。 例如，如果view使用平铺来显示大的可滚动区域，则可能需要使用CATiledLayer类来支持view。&lt;/p&gt;

&lt;p&gt;实现layerClass方法应该简单地创建所需的Class对象并返回它。 例如，使用平铺的view将为此方法提供以下实现：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layerClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CATiledLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每个view在其初始化过程中尽早调用其layerClass方法，并使用返回的类来创建其图层对象。 另外，view总是将自己指定为其图层对象的delegate。 在这一点上，view拥有它的层，view和层之间的关系不能改变。 您还必须不分配与任何其他图层对象的delegate相同的view。 更改view的所有权或delegate关系会导致绘图问题和应用程序中的潜在崩溃&lt;/p&gt;

&lt;p&gt;如果您主要使用图层对象而不是view，则可以根据需要将自定义图层对象合并到view层次结构中。 自定义图层对象是不属于view的CALayer的任何实例。 您通常以编程方式创建自定义图层，并使用Core Animation例程将其合并。 自定义图层不接收事件或参与响应者链，但根据核心动画规则绘制自己的图形并响应其父view或图层中的大小更改&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Create the layer.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Set the contents of the layer to a fixed image. And set
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// the size of the layer to match the image size.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layerContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;myImage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layerContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layerContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Add the layer to the view.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;viewLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSublayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Center the layer in the view.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;viewBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetMidX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectGetMidY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Release the layer, since it is retained by the view's layer
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;响应事件&quot;&gt;响应事件&lt;/h4&gt;

&lt;p&gt;view对象是响应者对象（UIResponder类的实例），因此能够接收触摸事件。当触摸事件发生时，window将相应的事件对象分派到发生触摸的view。如果你的view对一个事件不感兴趣，它可以忽略它，或者把它传递给响应者链，由另一个对象处理。&lt;/p&gt;

&lt;p&gt;除了直接处理触摸事件之外，view还可以使用手势识别器来检测轻敲，滑动，捏，以及其他类型的常见触摸相关的手势。手势识别器在追踪触摸事件方面付出了艰辛的努力，并确保他们按照正确的标准将其定位为目标手势。您可以创建手势识别器，为其分配合适的目标对象和操作方法，而不必使用跟踪触摸事件的应用程序，并使用&lt;code class=&quot;highlighter-rouge&quot;&gt;addGestureRecognizer：&lt;/code&gt;方法将其安装在view上。手势识别器然后在相应手势发生时调用您的操作方法。&lt;/p&gt;

&lt;p&gt;如果您希望直接处理触摸事件，则可以针对您的view实现以下方法，这些方法在iOS事件处理指南中有更详细的描述：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesBegan：withEvent：&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesMoved：withEvent：&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesEnded：withEvent：&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesCancelled：withEvent：&lt;/code&gt;
view的默认行为是一次只响应一次触摸。如果用户放下第二根手指，系统将忽略触摸事件，并不会将其报告给您的view。如果您打算从view的事件处理程序方法跟踪多手指手势，则需要通过将view的multipleTouchEnabled属性设置为YES来启用多点触控事件。&lt;/p&gt;

&lt;p&gt;一些view（如标签和图像）最初会禁用事件处理。您可以通过更改view的userInteractionEnabled属性的值来控制view是否能够接收触摸事件。您可能会暂时将此属性设置为NO，以防止用户在长时间操作未决时操纵view的内容。为了防止事件到达任何view，还可以使用UIApplication对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;beginIgnoringInteractionEvents&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;endIgnoringInteractionEvents&lt;/code&gt;方法。这些方法影响整个应用程序的事件传递，而不仅仅是一个view。&lt;/p&gt;

&lt;p&gt;注意：UIView的动画方法通常在动画进行时禁用触摸事件。您可以通过适当地配置动画来覆盖此行为。有关执行动画的更多信息，请参阅动画。&lt;/p&gt;

&lt;p&gt;当它处理触摸事件时，UIKit使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;hitTest：withEvent：&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;pointInside：withEvent：&lt;/code&gt;方法来确定触摸事件是否发生在给定view的边界内。尽管您很少需要重写这些方法，但您可以这样做，以实现view的自定义触摸行为。例如，您可以重写这些方法来防止子view处理触摸事件。&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">View编程指南(二)</title><link href="http://www.helloted.com/ios/2018/01/15/View_2/" rel="alternate" type="text/html" title="View编程指南(二)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_2</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_2/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;三windows&quot;&gt;三、Windows&lt;/h3&gt;

&lt;p&gt;每个iOS应用程序至少需要一个window- 一个UIWindow类的实例 - 有些可能包含多个window。一个window对象有几个职责：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;它包含您的应用程序的可见内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;它在将触摸事件传递到View和其他应用程序对象中起着关键作用。&lt;/li&gt;
  &lt;li&gt;它与您的应用程序的View controller协同工作，以方便更改。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在iOS中，Windows没有标题栏，关闭框或其他视觉装饰。一个window始终只是一个或多个view的空白容器。此外，应用程序不会通过显示新window来更改其内容。如果要更改显示的内容，请改为改变window的最前面的view。&lt;/p&gt;

&lt;p&gt;大多数iOS应用程序在其生命周期中只创建并使用一个window。该window横跨设备的整个主屏幕，并在应用程序生命周期的早期从应用程序的主要nib文件（或以编程方式创建）加载。但是，如果应用程序支持使用外部显示器进行视频输出，则可以创建一个额外的window来在该外部显示器上显示内容。所有其他window通常由系统创建，通常是为了响应特定事件（例如来电）创建的。&lt;/p&gt;

&lt;h4 id=&quot;涉及windows的任务&quot;&gt;涉及Windows的任务&lt;/h4&gt;

&lt;p&gt;对于许多应用程序，应用程序与window交互的唯一时间是在启动时创建windws时。 但是，您可以使用应用程序的window对象来执行几个与应用程序相关的任务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用window对象将点和矩形转换为window的本地坐标系或从window的本地坐标系进行转换。 例如，如果在window坐标中提供了一个值，那么在尝试使用它之前，可能需要将其转换为特定view的坐标系。&lt;/li&gt;
  &lt;li&gt;使用window通知来跟踪与window相关的更改。 Windows会在显示或隐藏通知或者接受或退出密钥状态时生成通知。 您可以使用这些通知在应用程序的其他部分执行操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;创建和配置一个window&quot;&gt;创建和配置一个window&lt;/h4&gt;

&lt;p&gt;您可以通过编程方式或使用Interface Builder来创建和配置应用程序的主window。 无论哪种情况，您都可以在启动时创建window，并保留该window并将其引用存储在您的应用程序delegate对象中。 如果你的应用程序创建了额外的window，让应用程序在需要时创建它们。 例如，如果您的应用程序支持在外部显示器上显示内容，则应在创建相应window之前等待显示器连接。&lt;/p&gt;

&lt;p&gt;无论您的应用程序是启动到前台还是后台，您都应始终在启动时创建应用程序的主window。 创建和配置window本身并不是一个昂贵的操作。 但是，如果您的应用程序直接进入后台，则应避免在应用程序进入前台之前使window可见。&lt;/p&gt;

&lt;h4 id=&quot;在interface-builder中创建windows&quot;&gt;在Interface Builder中创建Windows&lt;/h4&gt;

&lt;p&gt;使用Interface Builder创建应用程序的main window非常简单，因为Xcode项目模板可以帮你实现。每个新的Xcode应用程序项目都包含一个包含应用程序main window的主要nib文件（通常名称为MainWindow.xib或其某些变体）。另外，这些模板还为应用程序delegate对象中的该window定义了一个出口。您可以使用此outlet访问代码中的window对象。&lt;/p&gt;

&lt;p&gt;重要提示：在Interface Builder中创建window时，建议您在属性检查器中启用“全屏启动”选项。如果此选项未启用且您的window小于目标设备的屏幕，则某些view不会接收触摸事件。这是因为window（如所有view）不会在边界矩形外接收触摸事件。由于默认情况下，view不会被剪切到window边界，所以view仍然可见，但是事件不能到达它们。在启动时启用全屏选项可确保window适合当前屏幕。&lt;/p&gt;

&lt;p&gt;如果您正在改造一个项目以使用Interface Builder，那么使用Interface Builder创建一个window就是将window对象拖到您的nib文件中的简单方法。当然，你也应该做到以下几点：&lt;/p&gt;

&lt;p&gt;要在运行时访问window，应该将window连接到outlet，通常是在应用程序delegate或者nib文件的文件所有者中定义的window。
如果改造计划包括将新的nib文件作为应用程序的主要nib文件，则还必须将应用程序的Info.plist文件中的NSMainNibFile键设置为nib文件的名称。更改此键的值可确保在调用应用程序delegate的应用程序：didFinishLaunchingWithOptions：方法时，nib文件已加载并可供使用。&lt;/p&gt;

&lt;h4 id=&quot;以编程方式创建window&quot;&gt;以编程方式创建window&lt;/h4&gt;

&lt;p&gt;如果您希望以编程方式创建应用程序的main window，则应在应用程序中包含与以下代码相似的代码：didFinishLaunchingWithOptions：应用程序delegate的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.window = [[[UIWindow alloc] initWithFrame：[[UIScreen mainScreen] bounds]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在前面的示例中，self.window被假定为您的应用程序delegate的声明属性，该属性被配置为保留window对象。如果您是为外部显示创建window，则应将其分配给其他变量，并且需要指定代表该显示的非主UIScreen对象的边界。&lt;/p&gt;

&lt;p&gt;创建window时，应始终将window的大小设置为屏幕的全部范围。您不应该减小window的大小来容纳状态栏或任何其他项目。状态栏总是浮在window的顶部，所以你应该缩小以容纳状态栏的唯一的东西就是你放入window的view。如果你使用view contoller，VC应该自动处理你的view的大小。&lt;/p&gt;

&lt;h4 id=&quot;将内容添加到window&quot;&gt;将内容添加到Window&lt;/h4&gt;

&lt;p&gt;每个window通常都有一个root view对象（由相应的view controller管理），其中包含代表您的内容的所有其他view。使用单个root view简化了更改界面的过程;要显示新的内容，你所要做的就是替换root view。要在window中安装view，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;addSubview：&lt;/code&gt;方法。例如，要安装由VC管理的view，可以使用类似于以下内容的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[window addSubview:viewController.view];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代替上述代码，您可以在您的nib文件中配置window的rootViewController属性。此属性提供了一种使用nib文件而非编程方式配置window的root view的便捷方法。如果在从其nib文件加载window时设置此属性，则UIKit会自动将相关VC的view安装为window的root view。此属性仅用于安装root view，不用于window与VC进行通信。
您可以使用任何您想要的view作为window的root view。取决于你的界面设计，root view可以是一个通用的UIView对象，充当一个或多个子view的容器，root view可以是标准的系统view，或者rootview可以是你定义的自定义view。通常用作roo tview的一些标准系统view包括滚动view，表view和图像view。
在配置window的rootview时，您需要负责在window内设置其初始大小和位置。对于不包含状态栏或显示半透明状态栏的应用程序，请将view大小设置为与window大小相匹配。对于显示不透明状态栏的应用程序，请将您的view放置在状态栏下方并相应地缩小其大小。从view的高度减去状态栏的高度可以防止view的顶部被遮挡。
注意：如果window的rootview由容器view控制器（如选项卡栏控制器，导航控制器或分割view控制器）提供，则不需要自行设置view的初始大小。容器view控制器root据状态栏是否可见，自动调整view大小。&lt;/p&gt;

&lt;h4 id=&quot;更改window级别&quot;&gt;更改Window级别&lt;/h4&gt;

&lt;p&gt;每个UIWindow对象都有一个可配置的windowLevel属性，用于确定该window相对于其他window的位置。 大多数情况下，您不需要更改应用程序window的级别。 新建window在创建时自动分配到正常window级别。 正常的window级别表示该window显示与应用程序相关的内容。 对于需要悬浮在应用程序内容之上的信息（比如系统状态栏或警报消息）保留更高的window级别。 虽然你可以自己分配window到这些级别，但是当你使用特定的接口时，系统通常会为你做这些。 例如，当您显示或隐藏状态栏或显示警报视图时，系统会自动创建所需的window来显示这些项目。&lt;/p&gt;

&lt;h4 id=&quot;监听window改变&quot;&gt;监听Window改变&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidBecomeVisibleNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidBecomeHiddenNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidBecomeKeyNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidResignKeyNotification&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">View编程指南</title><link href="http://www.helloted.com/ios/2018/01/15/View_1/" rel="alternate" type="text/html" title="View编程指南" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_1</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_1/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;一简介&quot;&gt;一、简介&lt;/h3&gt;

&lt;p&gt;在iOS中，您可以使用windows和views在屏幕上显示应用程序的内容。 Windows本身没有任何可见的内容，但为应用程序的views提供了一个基本的容器。 views定义了您想要填充某些内容的windows的一部分。 例如，您可能具有显示图像，文本，形状或其组合的views。 您还可以使用views来组织和管理其他views。&lt;/p&gt;

&lt;p&gt;每个应用程序至少有一个windows和一个views来显示其内容。 UIKit和其他系统框架提供了预定义的views，您可以使用它来呈现您的内容。 这些view的范围从简单的按钮和文本标签到更复杂的view，如tableview，pickerview和scroll view。 在预定义views不提供您需要的地方，您还可以定义自定义views并自行管理views和事件处理。&lt;/p&gt;

&lt;h4 id=&quot;view管理应用程序可见内容&quot;&gt;View管理应用程序可见内容&lt;/h4&gt;

&lt;p&gt;view是UIView类（或其子类之一）的一个实例对象，并在应用程序window中管理矩形区域。view负责绘制内容，处理多点触控事件以及管理任何子view的布局。绘图涉及使用图形技术，例如Core Graphics，OpenGL ES或UIKit在view的矩形区域内绘制形状，图像和文本。view通过使用手势识别器或通过直接处理触摸事件来响应其矩形区域中的触摸事件。在view层次结构中，父view负责定位和调整其子view的大小，并且可以动态地执行。这种动态修改子view的功能使您的view能够适应不断变化的条件，如界面旋转和动画。&lt;/p&gt;

&lt;p&gt;您可以将view视为用于构建用户界面的构建块。您不是使用一个view呈现所有内容，而是经常使用多个view来构建view层次结构。层次结构中的每个view呈现用户界面的特定部分，通常针对特定类型的内容进行优化。例如，UIKit具有专门用于呈现图像，文本和其他类型的内容的view。&lt;/p&gt;

&lt;h4 id=&quot;windows协调显示views&quot;&gt;Windows协调显示Views&lt;/h4&gt;

&lt;p&gt;Windows是UIWindow类的一个实例，并处理应用程序用户界面的整体表示。 Windows使用view（及其拥有的view controller）来管理与可见view hierarchy的交互以及对可见view hierarchy的更改。 大多数情况下，您的应用程序的Windows永远不会改变。 Windows创建后，它保持不变，只有它显示的view改变。 每个应用程序至少有一个Window，在应用程序的主屏幕上显示应用程序的用户界面。 如果外部显示器连接到设备，应用程序可以创建另一个Window来在该屏幕上显示内容。&lt;/p&gt;

&lt;h4 id=&quot;animations为ui交互提供可见反馈&quot;&gt;Animations为UI交互提供可见反馈&lt;/h4&gt;

&lt;p&gt;动画为用户提供关于view hierarchy变化的可见反馈。 系统定义了标准动画，用于显示不同的view组之间的presenting model view和过渡。 然而，view的许多属性也可以直接动画。 例如，通过动画，您可以更改view的透明度，其在屏幕上的位置，大小，背景颜色或其他属性。 如果直接使用view的底层Core Animation layer对象，则还可以执行许多其他动画。&lt;/p&gt;

&lt;h4 id=&quot;interface-builder&quot;&gt;Interface Builder&lt;/h4&gt;

&lt;p&gt;Interface Builder是一个应用程序，用于以图形方式构建和配置应用程序的Windows和view。 使用Interface Builder，您可以组装view并将它们放置在一个nib文件中，该文件是存储view和其他对象的冻干版本的资源文件。 当你在运行时加载一个nib文件的时候，它里面的对象被重新编译成实际的对象，你的代码可以通过编程来操作。&lt;/p&gt;

&lt;p&gt;Interface Builder极大地简化了您在创建应用程序的用户界面方面所做的工作。 由于对Interface Builder和nib文件的支持已经整合到iOS中，所以将nib文件合并到您的应用程序的设计中需要一点努力。&lt;/p&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;p&gt;因为view是非常复杂和灵活的对象，所以不可能在一个文档中覆盖所有的行为。 但是，其他文档可帮助您了解管理view和用户界面的其他方面。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view控制器是管理应用程序view的重要组成部分。 一个view controller主持所有的view在一个单一的view hierarchy，并方便在屏幕上显示这些view。 有关view controller和他们扮演的角色的更多信息, &lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457&quot;&gt;&lt;em&gt;View Controller Programming Guide for iOS&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;view是应用程序中手势和触摸事件的关键接收者， &lt;em&gt;Event Handling Guide for iOS&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;自定义view必须使用可用的绘图技术来呈现其内容。 有关使用这些技术来绘制view的信息，&lt;a href=&quot;https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156&quot;&gt;&lt;em&gt;Drawing and Printing Guide for iOS&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;在标准view动画不够用的地方，可以使用Core Animation。 有关使用Core Animation实现动画的信息, &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514&quot;&gt;&lt;em&gt;Core Animation Programming Guide&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二view-and-window-架构&quot;&gt;二、View and Window 架构&lt;/h3&gt;

&lt;p&gt;View和window呈现您的应用程序的用户界面，并处理与该界面的交互。 UIKit和其他系统框架提供了许多views，你可以很少或根本没有修改就直接使用或者根据需要自定义View。&lt;/p&gt;

&lt;p&gt;无论您使用系统View还是创建自己的自定义View，都需要了解UIView和UIWindow类提供的基础结构。 这些课程提供先进的设施来管理View的布局和表示。 了解这些设施的工作方式对于在应用程序发生更改时确保View的行为是非常重要的。&lt;/p&gt;

&lt;h4 id=&quot;view架构基础&quot;&gt;View架构基础&lt;/h4&gt;

&lt;p&gt;大部分你可能想要做的事情都是通过view对象来完成的 - UIView类的实例。view对象在屏幕上定义了一个矩形区域，并处理该区域中的drawing和touch事件。View还可以作为其他view的父项，并协调这些view的布局和大小。 UIView类在管理这些View之间的这些关系方面做了大部分工作，但是您也可以根据需要自定义默认行为。&lt;/p&gt;

&lt;p&gt;View与Core Animation Layer一起工作来处理View内容的渲染和动画。 UIKit中的每个View都由一个layer对象（通常是CALayer类的一个实例）支持，这个layer管理View的后备存储并处理与View相关的动画。你执行的大多数操作应该通过UIView接口。但是，在需要更多地控制view的渲染或动画行为的情况下，您可以通过其layer执行操作。&lt;/p&gt;

&lt;p&gt;要理解View和图层之间的关系，有助于看一个例子。下图显示了ViewTransitions示例应用程序的view hierarchy以及与底层Core Animation layer的关系。每个View都有一个对应的layer对象，可以通过该view的layer属性访问。 （因为bar按钮项不是View，所以不能直接访问它的图层。）在这些layer对象的后面是Core Animation渲染对象，最后是用于管理屏幕上实际位的硬件缓冲区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/10.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Core Animation layer对象的使用对性能有重要的影响。 view对象的实际绘图代码被尽可能少地调用，并且当调用代码时，结果被Core Animation缓存，并在稍后被重用。 重用已经呈现的内容消除了通常需要更新view的昂贵的绘图周期。 在动画中重复使用这些内容是非常重要的，在动画中可以操纵现有的内容。 这种重复使用比创建新内容要便宜得多。&lt;/p&gt;

&lt;h4 id=&quot;view的层次结构和管理子view&quot;&gt;View的层次结构和管理子View&lt;/h4&gt;

&lt;p&gt;除了提供自己的内容之外，view还可以充当其他view的容器。当一个view包含另一个view时，两个view之间会创建一个父子关系。关系中的子view称为subview，父View称为superview。创建这种类型的关系对于应用程序的外观和应用程序的行为都有影响。
从视觉上来说，子view的内容掩盖了其父view的全部或部分内容。如果子view是完全不透明的，则子view占用的区域完全遮蔽了父view的相应区域。如果子View是部分透明的，则来自两个view的内容在被显示在屏幕上之前被混合在一起。每个superview将其子view存储在有序数组中，并且该数组中的顺序也会影响每个子View的可见性。如果两个兄弟子view彼此重叠，则最后添加的子view（或移动到子view数组的末尾）会出现在另一个之上。
Superview - subview关系也会影响多个view的行为。更改父view的大小会产生连锁效应，导致任何子view的大小和位置也发生变化。当您更改父view的大小时，可以通过适当地配置view来控制每个子view的大小调整行为。影响子view的其他更改包括隐藏superview，更改superview的透明度，或将数学变换应用于superview的坐标系。
View层次结构中的排列也决定了应用程序如何响应事件。当在特定view内发生触摸时，系统将带有触摸信息的事件对象直接发送到该view进行处理。但是，如果view不处理特定的触摸事件，它可以将事件对象传递给其superview。如果superview不处理事件，它将事件对象传递给它的superview，等等这样一个响应者链。特定的view也可以将事件对象传递给介入的响应者对象，如viewcontroller。如果没有对象处理事件，它最终会到达application对象，通常会丢弃它。&lt;/p&gt;

&lt;h4 id=&quot;view的绘图周期&quot;&gt;View的绘图周期&lt;/h4&gt;

&lt;p&gt;UIView类使用按需绘制模型来呈现内容。当一个view第一次出现在屏幕上时，系统要求它画出其内容。系统捕获此内容的snapshot，并将该snapshot用作view的视觉表示。如果你永远不改变view的内容，view的绘图代码可能永远不会再被调用。大多数涉及view的操作都会重用snapshot。如果您更改内容，则通知系统view已更改。这个View会重新绘制View并捕获新结果的快照。&lt;/p&gt;

&lt;p&gt;当你的view的内容改变时，你不要直接重绘这些改变。而是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsDisplay&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsDisplayInRect：&lt;/code&gt;方法使view无效。这些方法告诉系统，view的内容改变了，需要在下一个机会重新绘制。在启动任何绘图操作之前，系统等待直到当前run loop的结束。这种延迟使您有机会使多个view失效，从您的层次结构中添加或删除view，隐藏view，调整view大小，并一次重新定位view。然后你所做的所有改变都会同时反映出来。&lt;/p&gt;

&lt;p&gt;注：更改view的(geometry)几何图形不会自动导致系统重新绘制view的内容。view的contentMode属性确定如何解释对geometry的更改。大多数contentMode在View的边界内拉伸或重新定位现有的快照，而不是创建一个新的快照。&lt;/p&gt;

&lt;p&gt;当呈现view的内容时，实际的绘图过程会根据View及其配置而变化。系统view通常实现私有绘图方法来呈现其内容。这些相同的系统View经常公开可用于配置view的实际外观的接口。对于自定义UIView子类，通常会覆盖View的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，并使用该方法绘制view的内容。还有其他方法可以提供view的内容，比如直接设置layer的内容，但是覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法是最常用的技术。&lt;/p&gt;

&lt;h4 id=&quot;content-modes&quot;&gt;Content Modes&lt;/h4&gt;

&lt;p&gt;每个view都有一个Content Modes，用于控制view如何回应其内容以响应View几何体的变化以及是否回收其内容。当view第一次显示时，它像往常一样渲染其内容，并将结果捕获在底层位图中。之后，对view’s geometry的更改并不总是会导致重新创建位图。相反，contentMode属性中的值决定是否缩放位图以适应新的边界，或者只是固定到View的一个角或边缘。&lt;/p&gt;

&lt;p&gt;view的content modes在您执行以下操作时应用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改view的frame或bounds矩形的宽度或高度。&lt;/li&gt;
  &lt;li&gt;将包含比例因子的变换分配给view的transform属性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认情况下，大多数view的contentMode属性被设置为UIViewContentModeScaleToFill，这会导致view的内容被缩放以适应新的frame size。下图显示了一些可用的内容模式的结果。从图中可以看出，并不是所有的content mode都会导致view的边界被完全填满，而那些content mode可能会扭曲view的内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/11.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Content Modes对回收view的内容非常有用，但是当您特别希望自定义view在缩放和调整大小操作期间重新绘制自己的内容时，您还可以将内容模式设置为UIViewContentModeRedraw值。 将view的Content Modes设置为该值会迫使系统调用view的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法来响应几何变化。 一般来说，你应该尽可能的避免使用这个值，你一定不要在标准系统view中使用它.&lt;/p&gt;

&lt;h4 id=&quot;可伸缩view&quot;&gt;可伸缩View&lt;/h4&gt;

&lt;p&gt;您可以指定View的一部分为可拉伸的，以便当view的大小改变时，只有可拉伸部分的内容受到影响。 您通常在按钮或其他View中使用可拉伸区域，其中部分view定义了可重复的图案。 您指定的可拉伸区域可以允许沿View的一个或两个轴伸展。 当然，当沿着两个轴伸展View时，view的边缘也必须定义可重复的图案以避免任何失真。  来自每个view的原始像素的颜色被复制以填充大view中的对应区域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/12.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;您可以使用contentStretch属性指定view的可拉伸区域。该属性接受一个矩形，其值被规范化为0.0到1.0的范围。当拉伸View时，系统将这些归一化值乘以view的当前边界和比例因子，以确定哪些像素或像素需要拉伸。每当View边界发生变化时，使用规范化值就可以减少更新contentStretch属性的必要性。&lt;/p&gt;

&lt;p&gt;view的content mode在确定如何使用view的可拉伸区域方面也起着重要作用。仅当content mode会导致View的内容被缩放时才使用可伸缩区域。这意味着只有UIViewContentModeScaleToFill，UIViewContentModeScaleAspectFit和UIViewContentModeScaleAspectFill内容模式才支持可伸缩view。如果指定将内容固定到边或角的内容模式（因此实际上不会缩放内容），则view将忽略可拉伸区域。&lt;/p&gt;

&lt;p&gt;注意：在可拉伸的UIImage对象为view指定背景时，才建议使用contentStretch属性。 可伸缩View完全在Core Animation layer中处理，通常可以提供更好的性能。&lt;/p&gt;

&lt;h4 id=&quot;内置的动画支持&quot;&gt;内置的动画支持&lt;/h4&gt;

&lt;p&gt;在每个view背后都有一个layer对象的好处之一是可以轻松地动画许多与view相关的更改。动画是向用户传递信息的有效方法，在设计应用程序时应始终考虑动画。 UIView类的许多属性都是可以动画的，也就是说，存在从一个值到另一个值的动画的半自动支持。要为其中一个动画属性执行动画，您只需执行以下操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;告诉UIKit你想要执行一个动画。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改属性的值。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以在UIView对象上动画的属性如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Frame - 使用此动画设置为view更改位置和大小变化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;bounds - 使用这个动画来改变view的大小。&lt;/li&gt;
  &lt;li&gt;center - 使用此可以动画显示view的位置。&lt;/li&gt;
  &lt;li&gt;transform - 使用它来旋转或缩放view。&lt;/li&gt;
  &lt;li&gt;alpha - 使用这个来改变view的透明度。&lt;/li&gt;
  &lt;li&gt;backgroundColor - 使用此更改view的背景颜色。&lt;/li&gt;
  &lt;li&gt;contentStretch - 使用它来改变view内容的拉伸方式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;动画非常重要的一个地方是从一组views转换到另一个views。通常，您使用view contoller来管理与用户界面各部分之间的重大更改相关联的动画。例如，对于涉及从较高级别信息到较低级别信息的接口，通常使用导航控制器来管理显示每个连续数据级别的view之间的转换。但是，您也可以使用动画而不是view controller在两组View之间创建转换。你可能会在标准的view controller动画没有产生你想要的结果的地方这样做。&lt;/p&gt;

&lt;p&gt;除了使用UIKit类创建的动画外，还可以使用Core Animation layer创建动画。layer可以更好地控制动画的时间和属性。&lt;/p&gt;

&lt;h4 id=&quot;view的几何和坐标系统&quot;&gt;View的几何和坐标系统&lt;/h4&gt;

&lt;p&gt;UIKit中的默认坐标系统的原点位于左上角，并具有从原点向下和向右延伸的轴。 坐标值使用浮点数来表示，无论底层的屏幕分辨率如何，都可以精确地布局和定位内容。 除了屏幕坐标系之外，window和view还定义了自己的局部坐标系，使您可以指定相对于window或view原点的坐标，而不是相对于屏幕。&lt;/p&gt;

&lt;p&gt;重要提示：某些iOS技术定义默认坐标系，其原点和方向与UIKit使用的坐标系不同。 例如，Core Graphics和OpenGL ES使用坐标系统，坐标系统的原点位于View或窗口的左下角，y轴相对于屏幕向上。 绘制或创建内容时，您的代码必须考虑到这些差异，并根据需要调整坐标值（或坐标系的默认方向）。&lt;/p&gt;

&lt;h4 id=&quot;frame-bounds-and-center&quot;&gt;Frame, Bounds, and Center&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt; 包含了 &lt;em&gt;frame 矩形&lt;/em&gt;, 在superview中定义View的大小和位置&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; 包含了 &lt;em&gt;bounds 矩形&lt;/em&gt;, 它在view的本地坐标系统中指定View的大小（及其内容的原点）。&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; 包含了在superview坐标系统中view的中点的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;您主要使用center和frame属性来操作当前view的几何图形。例如，在构建view层次结构或在运行时更改view的位置或大小时使用这些属性。如果您只改变view的位置（而不是View的大小），则中心属性是更好的选择。即使缩放或旋转因子已添加到View的变换中，属性中的值始终有效。对于frame属性中的值也是如此，如果view的变换不等于标识变换，则认为该值是无效的。&lt;/p&gt;

&lt;p&gt;绘图时主要使用bounds属性。bounds矩形在View的本地坐标系中表示。此矩形的默认原点是（0，0），其大小与frame矩形的大小相匹配。您在此矩形内绘制的任何东西都是view可见内容的一部分。如果更改bounds矩形的原点，则在新矩形内绘制的内容将成为view可见内容的一部分。&lt;/p&gt;

&lt;p&gt;图显示了图像View的frame和bounds之间的关系。在图中，图像view的左上角位于其superivew坐标系中的点（40,40），矩形的大小是240×380点。对于bounds矩形，原点为（0,0），矩形的大小为240乘380点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/13.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然更改frame，bounds和center的方法是相互独立的，但其中一个属性的更改会影响其他属性，方法如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当您设置frame属性时，bounds属性中的size值将更改为与frame矩形的新大小相匹配。 center属性中的值同样会更改为匹配frame矩形的新中心点。&lt;/li&gt;
  &lt;li&gt;当您设置center属性时，frame中的origin值会相应更改。&lt;/li&gt;
  &lt;li&gt;设置bounds属性的大小时，frame属性中的size值会更改为与bounds矩形的size相匹配。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认情况下，view的frame不会剪切到其superview的frame。 因此，任何超出superview frame的子view都将被完整地呈现。 不过，您可以通过将superview的clipsToBounds属性设置为YES来更改此行为。 无论子view是否可视化剪切，触摸事件总是尊重目标view的superview的边界矩形。 换句话说，发生在superview bounds矩形之外的view的一部分中的触摸事件不会被传送到该view。&lt;/p&gt;

&lt;h4 id=&quot;坐标系统转换&quot;&gt;坐标系统转换&lt;/h4&gt;

&lt;p&gt;坐标系转换提供了一种快速方便地更改view（或其内容）的方法。 &lt;em&gt;affine transform&lt;/em&gt;是一个数学矩阵，指定一个坐标系中的点如何映射到不同坐标系中的点。 您可以将&lt;em&gt;affine transform&lt;/em&gt;应用于整个view，以相对于其superivew更改View的大小，位置或方向。 您还可以在绘图代码中使用&lt;em&gt;affine transform&lt;/em&gt;对各个渲染内容进行相同类型的操作。 如何应用仿射变换取决于上下文：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;要修改整个view，请在View的transform属性中修改&lt;em&gt;affine transform&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;要修改view的特定内容,用&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，请修改与活动图形上下文关联的transform。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当您要实现动画时，通常会修改view的transform属性。 例如，您可以使用此属性来创建围绕其中心点旋转view的动画。 您不会使用此属性对您的view进行永久更改，例如在其superview的坐标空间内修改其view的位置或大小。 对于这种类型的更改，您应该修改view的frame矩形。&lt;/p&gt;

&lt;p&gt;注意：修改view的transform属性时，所有的转换都是相对于view的中心点执行的。&lt;/p&gt;

&lt;p&gt;每个子View的坐标系建立在其super的坐标系上。所以当你修改一个View的transform属性时，这个改变会影响view及其所有的subview。但是，这些更改仅影响屏幕上view的最终呈现。由于每个view都是绘制其内容，并将其子view相对于其bounds进行布局，所以在绘制和布局过程中可以忽略其superview的变换。&lt;/p&gt;

&lt;p&gt;图展示了两种不同的旋转因素在渲染时如何组合。在View的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法内部，对shape应用45度旋转因子会使该shape旋转45度。将单独的45度旋转因子应用于view，然后使shape看起来旋转90度。相对于绘制的view，shape仍然只旋转了45度，但view旋转使其看起来被旋转了更多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/14.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重要提示：如果View的transform属性不是标识transform，那么该View的frame属性的值是未定义的，必须忽略。 将变换应用于view时，必须使用view的bounds和center属性来获取view的size和position。 任何子view的frame矩形仍然有效，因为它们是相对于view的bounds&lt;/p&gt;

&lt;h4 id=&quot;view的运行时交互模型&quot;&gt;View的运行时交互模型&lt;/h4&gt;

&lt;p&gt;每当用户与您的用户界面进行交互时，或者您自己的代码以编程方式更改某些内容时，都会在UIKit内部发生一系列复杂的事件来处理该交互。 在这个序列的特定时间点，UIKit会调用您的Views，并让他们有机会代表您的应用程序进行响应。 理解这些标注点对于理解View适合系统的位置很重要。 图显示了用户触摸屏幕开始的事件的基本顺序，以图形系统作为响应更新屏幕内容结束。 任何由程序启动的动作也会发生相同的事件序列。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/15.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;用户触摸屏幕。
硬件将触摸事件报告给UIKit框架。
UIKit框架将触摸包装到UIEvent对象中并将其分派到相应的View。
view的事件处理代码响应事件。例如，您的代码可能会：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;更改view或其subview的属性（frame，bounds，alpha等）。&lt;/li&gt;
      &lt;li&gt;调用setNeedsLayout方法将view（或subviews）标记为需要布局更新。&lt;/li&gt;
      &lt;li&gt;调用setNeedsDisplay或setNeedsDisplayInRect：方法将view（或其subviews）标记为需要重绘。&lt;/li&gt;
      &lt;li&gt;通知controllers有关对某些数据的更改。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当然，由你来决定这些view应该做哪些事情以及应该调用哪些方法。
如果view的几何因任何原因而改变，则UIKit根据以下规则更新其subview：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;如果您为view配置了autoresizing规则，则UIKit会根据这些规则调整每个view。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果view实现了layoutSubviews方法，UIKit会调用它。&lt;/p&gt;

        &lt;p&gt;您可以在自定义view中重写此方法，并使用它来调整任何subview的位置和大小。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果任何view的任何部分被标记为需要重绘，则UIKit会要求view重绘本身。
对于显式定义&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法的自定义view，UIKit调用该方法。这个方法的实现应该尽可能快地重绘view的指定区域，而不是其他的。此时不要进行额外的布局更改，也不要对应用程序的数据模型进行其他更改。此方法的目的是更新view的可视内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;标准系统view通常不执行&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，而是在这个时候管理他们的绘图。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;任何更新的view都会与应用程序的其余可见内容合成，并发送到图形硬件进行显示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;图形硬件将渲染的内容传输到屏幕上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意：上述更新模型主要适用于使用标准系统view和绘图技术的应用程序。 使用OpenGL ES进行绘制的应用程序通常会配置一个全屏View，并直接绘制到关联的OpenGL ES图形上下文中。 在这种情况下，view仍然可以处理触摸事件，但由于它是全屏的，所以不需要布置subviews。&lt;/p&gt;

&lt;p&gt;在前面的一系列步骤中，您自定义View的主要集成点是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;事件处理方法:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesBegan:withEvent:&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesMoved:withEvent:&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesEnded:withEvent:&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesCancelled:withEvent:&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutSubviews&lt;/code&gt; 方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect:&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些是view中最常用的重写方法，但您可能不需要重写所有这些方法。 如果使用手势识别器来处理事件，则不需要重写任何事件处理方法。 同样，如果您的view不包含subview或其大小不会更改，则没有理由重写layoutSubviews方法。 最后，只有在view的内容可以在运行时更改并且使用本技术（如UIKit或Core Graphics）进行绘制时，才需要&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&quot;高效地使用view&quot;&gt;高效地使用View&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;View不总是有一个相应的view controller&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	view和viewcontroller之间很少有一对一的关系。 viewcontroller的工作是管理一个View层次结构，通常由多个view组成，用于实现一些独立的功能。 对于iPhone应用程序，每个view层次结构通常填充整个屏幕，但对于iPad应用程序，view层次结构可能只填充屏幕的一部分。&lt;/p&gt;

&lt;p&gt;​	在设计应用程序的用户界面时，重要的是要考虑view controller将扮演的角色。 view controller提供了许多重要的行为，例如协调屏幕上的view显示，协调从屏幕上删除这些view，响应低内存警告释放内存，以及响应接口方向更改而旋转view。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最小化自定义绘图&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然自定义view有时是必要的，但它也是你应该尽可能避免的东西。 只有当现有系统View类不提供所需的外观或功能时，才能真正做到任何自定义绘图。 任何时候，您的内容都可以与现有View的组合进行组合，最好的办法就是将这些view对象组合成一个自定义的view层次结构。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;利用content mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;content mode可以减少重绘view的时间。 默认情况下，view使用UIViewContentModeScaleToFill内容模式，该模式缩放view的现有内容以适合view的框架矩形。 您可以根据需要更改此模式，以不同的方式调整您的内容，但是如果可以的话，您应该避免使用UIViewContentModeRedraw内容模式。 无论哪种内容模式生效，都可以通过调用setNeedsDisplay或setNeedsDisplayInRect：来强制view重绘其内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;尽可能声明View不透明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UIKit使用每个view的opaque属性来确定view是否可以优化合成操作。 将自定义view的此属性值设置为YES会告诉UIKit它不需要在view后面呈现任何内容。 较少的渲染会导致您的绘图代码的性能提高，并且通常会受到鼓励。 当然，如果将opaque属性设置为YES，则View必须完全填充完全不透明的内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;滚动时调整view的绘图行为&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;滚动可以在很短的时间内产生大量的view更新。 如果您的view的绘制代码没有适当地调整，则view的滚动性能可能会很低。 在开始滚动操作时，不要试图确保view的内容始终处于原始状态，而应考虑更改view的行为。 例如，您可以暂时降低渲染内容的质量，或在滚动正在进行时更改content mode。 当滚动停止时，您可以将view返回到之前的状态，并根据需要更新内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不要通过嵌入subview来自定义控件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然在技术上可以将subview添加到标准系统控件（从UIControl继承的对象），但不应该以这种方式定制它们。 支持自定义的控件通过控件类本身的明确的，记录良好的接口来实现。 例如，UIButton类包含设置按钮的标题和背景图像的方法。 使用定义的定制点意味着您的代码将始终正常工作。 通过在按钮内部嵌入自定义图像view或标签来限制这些方法，如果按钮的实现发生更改，则可能会导致应用程序现在或将来某个时刻的行为不正确。&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry></feed>