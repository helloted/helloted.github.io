<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://www.helloted.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.helloted.com/" rel="alternate" type="text/html" /><updated>2018-03-29T11:28:14+08:00</updated><id>http://www.helloted.com/</id><title type="html">Helloted Blog</title><subtitle>Write your site description here. It will be used as your sites meta description as well!</subtitle><entry><title type="html">OpenGL ES编程指南（六）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/28/OpenGL_6/" rel="alternate" type="text/html" title="OpenGL ES编程指南（六）" /><published>2018-03-28T20:00:00+08:00</published><updated>2018-03-28T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/28/OpenGL_6</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/28/OpenGL_6/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;七可视化opengl-es&quot;&gt;七、可视化OpenGL ES&lt;/h3&gt;

&lt;p&gt;用于可视化OpenGL ES设计的两个方面：作为客户端 - 服务器体系结构和作为管道。 这两种观点都可以用于规划和评估应用程序的体系结构。&lt;/p&gt;

&lt;h4 id=&quot;opengl-es作为客户端---服务器体系结构&quot;&gt;OpenGL ES作为客户端 - 服务器体系结构&lt;/h4&gt;

&lt;p&gt;下图将OpenGL ES形象化为客户端 - 服务器体系结构。 您的应用程序将状态更改，纹理和顶点数据以及渲染命令传递给OpenGL ES客户端。 客户端将这些数据转换为图形硬件可以理解的格式，并将其转发给GPU。 这些进程会增加应用程序图形性能的开销。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/12.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;实现良好的性能需要仔细管理这些开销。 一个设计良好的应用程序可以减少对OpenGL ES的调用频率，使用适合硬件的数据格式来最大限度地降低翻译成本，并小心管理其本身和OpenGL ES之间的数据流。&lt;/p&gt;

&lt;h4 id=&quot;opengl-es作为图形管道&quot;&gt;OpenGL ES作为图形管道&lt;/h4&gt;

&lt;p&gt;下图将OpenGL ES形象化为图形管道。 您的应用程序配置图形管道，然后执行绘图命令将顶点数据发送到管道。 管道的连续阶段运行顶点着色器来处理顶点数据，将顶点组装成基元，将基元划分为片段，运行片段着色器以计算每个片段的颜色和深度值，并将片段混合到帧缓冲区中以进行显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/13.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用管道作为模型来确定您的应用执行哪些工作来生成新框架。 您的渲染器设计包括编写着色器程序以处理管道的顶点和片段阶段，组织提供给这些程序的顶点和纹理数据，以及配置驱动流水线固定功能阶段的OpenGL ES状态机。&lt;/p&gt;

&lt;p&gt;图形管道中的各个阶段可以同时计算其结果 - 例如，您的应用程序可能会准备新的基元，而图形硬件的不同部分将对先前提交的几何图形执行顶点和片段计算。 然而，后期阶段取决于早期阶段的产出。 如果任何流水线阶段执行太多工作或执行得太慢，则其他流水线阶段处于闲置状态，直到最慢阶段完成其工作。 根据图形硬件功能，精心设计的应用程序会平衡每个流水线阶段执行的工作。&lt;/p&gt;

&lt;h3 id=&quot;八opengl-es版本和渲染器架构&quot;&gt;八、OpenGL ES版本和渲染器架构&lt;/h3&gt;

&lt;p&gt;iOS支持三种版本的OpenGL ES。 较新的版本提供了更多的灵活性，使您可以实现包含高质量视觉效果而不影响性能的渲染算法。&lt;/p&gt;

&lt;h4 id=&quot;opengl-es-30&quot;&gt;OpenGL ES 3.0&lt;/h4&gt;

&lt;p&gt;OpenGL ES 3.0是iOS 7中的新功能。您的应用程序可以使用OpenGL ES 3.0中引入的功能来实现先前的图形编程技术（以前仅在桌面级硬件和游戏控制台上提供），以获得更快的图形性能和引人注目的视觉效果。&lt;/p&gt;

&lt;p&gt;下面突出显示了OpenGL ES 3.0的一些关键特性。有关完整的概述，请参阅OpenGL ES API注册表中的OpenGL ES 3.0规范。&lt;/p&gt;

&lt;h4 id=&quot;1opengl-es着色语言版本30&quot;&gt;1、OpenGL ES着色语言版本3.0&lt;/h4&gt;

&lt;p&gt;GLSL ES 3.0增加了统一块，32位整数和附加整数运算等新功能，用于在顶点和片段着色器程序中执行更通用的计算任务。要在着色器程序中使用新语言，着色器源代码必须以#version 330 es指令开始。 OpenGL ES 3.0上下文与为OpenGL ES 2.0编写的着色器保持兼容。&lt;/p&gt;

&lt;h4 id=&quot;2多个渲染目标&quot;&gt;2、多个渲染目标&lt;/h4&gt;

&lt;p&gt;通过启用多个渲染目标，您可以创建片段着色器，以同时写入多个帧缓冲区附件。&lt;/p&gt;

&lt;p&gt;此功能允许使用高级渲染算法，如延迟着色，其中您的应用首先渲染一组纹理以存储几何数据，然后执行一次或多次从这些纹理读取的着色过程，并执行光照计算以输出最终图片。由于此方法会预先计算照明计算的输入，因此将大量灯光添加到场景的增量性能成本要小得多。延迟着色算法需要多个渲染目标支持，如下图所示，以实现合理的性能。否则，渲染到多个纹理需要为每个纹理单独绘制通过。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/14.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了创建帧缓冲区对象中描述的过程外，您还可以设置多个渲染目标。 您可以创建多个，而不是为帧缓冲区创建单个颜色附件。 然后，调用glDrawBuffers函数来指定在渲染中使用哪些帧缓冲区附件，如所示。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Attach (previously created) textures to the framebuffer.
glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, _colorTexture, 0);
glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, GL_TEXTURE_2D, _positionTexture, 0);
glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT2, GL_TEXTURE_2D, _normalTexture, 0);
glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D, _depthTexture, 0);
 
// Specify the framebuffer attachments for rendering.
GLenum targets[] = {GL_COLOR_ATTACHMENT0, GL_COLOR_ATTACHMENT1, GL_COLOR_ATTACHMENT2};
glDrawBuffers(3, targets);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当您的应用程序发出绘图命令时，片段着色器将确定为每个渲染目标中的每个像素输出的颜色（或非颜色数据）。 下面代码显示了一个基本的片段着色器，该片段着色器通过分配位置与上面设置的位置匹配的片段输出变量来呈现给多个目标&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#version 300 es
 
uniform lowp sampler2D myTexture;
in mediump vec2 texCoord;
in mediump vec4 position;
in mediump vec3 normal;
 
layout(location = 0) out lowp vec4 colorData;
layout(location = 1) out mediump vec4 positionData;
layout(location = 2) out mediump vec4 normalData;
 
void main()
{
    colorData = texture(myTexture, texCoord);
    positionData = position;
    normalData = vec4(normalize(normal), 1.0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;多个渲染目标对于其他高级图形技术也很有用，例如实时反射，屏幕空间环境遮挡和体积照明。&lt;/p&gt;

&lt;h4 id=&quot;3变换反馈&quot;&gt;3、变换反馈&lt;/h4&gt;

&lt;p&gt;图形硬件使用针对矢量处理进行了优化的高度并行化架构。 您可以利用新的变换反馈功能更好地使用此硬件，该功能可以将顶点着色器的输出捕捉到GPU内存中的缓冲区对象中。 您可以捕获一个渲染过程中的数据以用于另一个过程，或者禁用图形管道的某些部分，并使用变换反馈进行通用计算。&lt;/p&gt;

&lt;p&gt;从变换反馈中受益的一种技术是动画粒子效应。 下图说明了渲染粒子系统的一般体系结构。 首先，应用程序设置粒子模拟的初始状态。 然后，对于每个渲染帧，应用程序运行一个模拟步骤，更新每个模拟粒子的位置，方向和速度，然后绘制代表粒子当前状态的可视化资源。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;传统上，实现粒子系统的应用程序在CPU上运行其模拟，将模拟结果存储在顶点缓冲区中以用于渲染粒子艺术。 但是，将顶点缓冲区的内容传输到GPU内存是非常耗时的。 通过优化现代GPU硬件中可用的并行架构的功能来转换反馈，可更有效地解决问题。&lt;/p&gt;

&lt;p&gt;借助变换反馈，您可以设计渲染引擎以更有效地解决此问题。 图6-5显示了应用程序如何配置OpenGL ES图形管道来实现粒子系统动画。 由于OpenGL ES将每个粒子及其状态表示为顶点，因此GPU的顶点着色器阶段可以同时运行多个粒子的模拟。 由于包含粒子状态数据的顶点缓冲区在帧之间被重用，因此在初始化时，将数据传输到GPU内存的昂贵过程只发生一次。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/16.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在初始化时，创建一个顶点缓冲区，并在其中填充包含模拟中所有粒子初始状态的数据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在GLSL顶点着色器程序中实现您的粒子模拟，并通过绘制包含粒子位置数据的顶点缓冲区的内容来运行它。&lt;/p&gt;

    &lt;p&gt;要在启用变换反馈的情况下进行渲染，请调用glBeginTransformFeedback函数。 （在恢复正常绘图之前调用glEndTransformFeedback（）。）&lt;/p&gt;

    &lt;p&gt;使用glTransformFeedbackVaryings函数来指定哪些着色器输出应该被变换反馈捕获，并使用glBindBufferBase或glBindBufferRange函数和GL_TRANSFORM_FEEDBACK_BUFFER缓冲区类型来指定它们将被捕获到的缓冲区。&lt;/p&gt;

    &lt;p&gt;通过调用glEnable（GL_RASTERIZER_DISCARD）禁用栅格化（以及管道的后续阶段）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要渲染模拟结果以供显示，请使用包含粒子位置的顶点缓冲区作为第二个绘制阶段的输入，并再次启用光栅化（以及管道的其余部分），并使用适合渲染应用视觉内容的顶点和片段着色器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在下一帧中，使用上一帧模拟步骤输出的顶点缓冲区作为下一个模拟步骤的输入&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;opengl-es-20&quot;&gt;OpenGL ES 2.0&lt;/h4&gt;

&lt;p&gt;OpenGL ES 2.0提供了可编程着色器的灵活图形管道，并可在所有当前的iOS设备上使用。 OpenGL ES 3.0规范中正式引入的许多功能通过OpenGL ES 2.0扩展可用于iOS设备，因此您可以在保持与大多数设备兼容的同时实现许多高级图形编程技术。&lt;/p&gt;

&lt;h4 id=&quot;opengl-es-11&quot;&gt;OpenGL ES 1.1&lt;/h4&gt;

&lt;p&gt;OpenGL ES 1.1只提供了一个基本的固定功能图形管道。 iOS支持OpenGL ES 1.1主要用于向后兼容。 如果您正在维护OpenGL ES 1.1应用程序，请考虑更新您的代码以获取更新的OpenGL ES版本。&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（五）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/27/OpenGL_5/" rel="alternate" type="text/html" title="OpenGL ES编程指南（五）" /><published>2018-03-27T20:00:00+08:00</published><updated>2018-03-27T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/27/OpenGL_5</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/27/OpenGL_5/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;六多任务高分辨率和其他功能&quot;&gt;六、多任务、高分辨率和其他功能&lt;/h3&gt;

&lt;p&gt;使用OpenGL ES的许多方面都是平台无关的，但在iOS上使用OpenGL ES的一些细节需要特别注意。 尤其是，使用OpenGL ES的iOS应用程序必须正确处理多任务，否则在转到后台时可能会被终止。 在为iOS设备开发OpenGL ES内容时，您还应该考虑显示分辨率和其他设备功能。&lt;/p&gt;

&lt;h4 id=&quot;不能在后台工作&quot;&gt;不能在后台工作&lt;/h4&gt;

&lt;p&gt;OpenGL ES应用程序移到后台时必须做额外的操作。 如果应用程序不正确地处理这些任务，它可能会被iOS终止。 此外，应用程序可能需要释放OpenGL ES资源，以便这些资源可用于前台应用程序。&lt;/p&gt;

&lt;p&gt;iOS会阻止后台应用程序访问图形处理器，以便前台的应用程序始终能够为用户提供出色的体验。 您的应用程序如果在后台进行OpenGL ES调用，或者在后台将先前提交的命令刷新到GPU，应用程序将会被终止。 您的应用程序必须确保移动到后台之前让先前提交的所有命令在都已完成执行。&lt;/p&gt;

&lt;p&gt;如果您使用GLKit view和view controller，并且只在绘图方法中提交OpenGL ES命令，那么当您的应用移动到背景时，您的应用会自动正确运行。 默认情况下，GLKViewController类会在您的应用程序变为非活动状态时暂停其动画计时器，以确保您的绘图方法未被调用。&lt;/p&gt;

&lt;p&gt;如果您不使用GLKit view和view controller，或者如果您在GLKView绘图方法外提交OpenGL ES命令，则必须执行以下步骤以确保您的应用程序不会在后台终止：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在您的应用程序delegate的&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationWillResignActive：&lt;/code&gt;方法中，您的应用程序应停止其动画计时器（如果有），将自己置于已知良好状态，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;glFinish&lt;/code&gt;函数。&lt;/li&gt;
  &lt;li&gt;在您的应用程序delegate的&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationDidEnterBackground：&lt;/code&gt;方法中，您的应用程序可能希望删除其某些OpenGL ES对象，以使内存和资源可用于前台应用程序。 调用&lt;code class=&quot;highlighter-rouge&quot;&gt;glFinish&lt;/code&gt;函数以确保立即删除资源。&lt;/li&gt;
  &lt;li&gt;在您的应用退出其&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationDidEnterBackground：&lt;/code&gt;方法后，它不能进行任何新的OpenGL ES调用。 如果它进行OpenGL ES调用，它将被iOS终止。&lt;/li&gt;
  &lt;li&gt;在您的应用程序delegate的&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationWillEnterForeground：&lt;/code&gt;方法中，重新创建任何对象并重新启动您的动画计时器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总之，您的应用程序需要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;glFinish&lt;/code&gt;函数以确保所有先前提交的命令从命令缓冲区中排出并由OpenGL ES执行。 进入后台后，必须避免使用OpenGL ES，直到它移回到前台。&lt;/p&gt;

&lt;h4 id=&quot;在移至后台之前删除易重建资源&quot;&gt;在移至后台之前删除易重建资源&lt;/h4&gt;

&lt;p&gt;在移动到后台时，您的应用永远不需要释放OpenGL ES对象。通常，您的应用应该避免处理其内容。考虑两种情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用户正在玩您的游戏并暂时退出以查看日历。当玩家回到游戏时，游戏的资源仍然在记忆中，游戏可以立即恢复。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当用户启动另一个OpenGL ES应用程序时，您的OpenGL ES应用程序处于后台。如果该应用程序需要的内存超过设备上的可用内存，系统将自动终止您的应用程序，而无需执行任何其他工作。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;您的目标应该是设计您的应用程序成为一个”好公民”：这意味着尽可能缩短移动到前台所需的时间，同时减少其在后台的内存占用量。&lt;/p&gt;

&lt;p&gt;以下是您应该如何处理这两种情况的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;您的应用应该将纹理，模型和其他资源保留在内存中;花费很长时间重新创建的资源不应该在您的应用移动到后台时处理。&lt;/li&gt;
  &lt;li&gt;您的应用程序应该处理可以快速轻松地重新创建的对象。寻找消耗大量内存的对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单的目标是你的应用程序分配的帧缓冲区来保存渲染结果。当您的应用程序位于后台时，它对用户不可见，并且可能不会使用OpenGL ES呈现任何新内容。这意味着您的应用程序的帧缓冲区所消耗的内存已分配，但无用。而且，帧缓冲器的内容是暂时的;大多数应用程序每次渲染新帧时都会重新创建帧缓冲区的内容。这使得渲染缓冲区成为一个可以轻松重新创建的内存密集型资源，成为移动到后台时可以处理的对象的良好候选对象。&lt;/p&gt;

&lt;p&gt;如果您使用GLKit视图和视图控制器，则当您的应用移动到后台时，GLKViewController类会自动处理其关联视图的帧缓冲区。如果您为其他用途手动创建帧缓冲区，则应该在应用移动到背景时将其丢弃。无论哪种情况，您还应该考虑当时您的应用可以处理的其他暂时资源。&lt;/p&gt;

&lt;h4 id=&quot;支持高分辨率显示&quot;&gt;支持高分辨率显示&lt;/h4&gt;

&lt;p&gt;默认情况下，GLKit View的contentScaleFactor属性的值与包含它的屏幕的比例相匹配，因此将其关联的帧缓冲区配置为在显示器的全分辨率下呈现。&lt;/p&gt;

&lt;p&gt;如果您使用Core Animation图层呈现OpenGL ES内容，则默认情况下其比例因子设置为1.0。 要以Retina显示器的全分辨率绘制，您应该更改CAEAGLLayer对象的比例因子以匹配屏幕的比例因子。&lt;/p&gt;

&lt;p&gt;当支持具有高分辨率显示器的设备时，您应该相应地调整应用程序的型号和纹理资源。 在高分辨率设备上运行时，您可能需要选择更详细的模型和纹理以呈现更好的图像。 相反，在标准分辨率设备上，您可以使用较小的模型和纹理。&lt;/p&gt;

&lt;p&gt;重要提示：许多OpenGL ES API调用以屏幕像素表示尺寸。 如果使用大于1.0的比例因子，则应在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;glScissor&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;glBlitFramebuffer&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;glLineWidth&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;glPointSize&lt;/code&gt;函数或&lt;code class=&quot;highlighter-rouge&quot;&gt;gl_PointSize&lt;/code&gt;着色器变量时相应地调整尺寸。&lt;/p&gt;

&lt;p&gt;确定如何支持高分辨率显示器的一个重要因素是性能。 Retina显示屏上缩放倍数的倍增使像素数量增加了四倍，导致GPU处理四倍的碎片。如果您的应用执行许多每片段计算，则像素增加可能会降低帧速率。如果您发现您的应用在较高比例因素下运行速度显着较慢，请考虑以下选项之一：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用本文档中的性能调整指导来优化片段着色器的性能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在你的片段着色器中实现一个更简单的算法。通过这样做，您可以降低单个像素的质量，从而以更高的分辨率呈现整个图像。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用1.0到和屏幕比例因子之间的分数比例因子。比例因子1.5提供比1.0的比例因子更好的质量，但需要填充比缩放为2.0的图像更少的像素。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为您的GLKView对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawableColorFormat&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;drawableDepthFormat&lt;/code&gt;属性使用较低精度的格式。通过这样做，可以减少在底层渲染缓冲区上操作所需的内存带宽。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用较低的比例因子并启用多重采样。另一个优点是多重采样还可以在不支持高分辨率显示的设备上提供更高的质量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要为GLKView对象启用多重采样，请更改其drawableMultisample属性的值。如果您未渲染到GLKit视图，则必须手动设置多重采样缓冲区并在呈现最终图像之前解决它们（请参阅使用多重采样来提高图像质量）。&lt;/p&gt;

    &lt;p&gt;多重采样不是免费的;需要额外的内存来存储额外的样本，并且将样本解析到解析帧缓冲区需要时间。如果您向应用添加多重采样，请始终测试应用的性能以确保其可接受性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;多方向交互&quot;&gt;多方向交互&lt;/h4&gt;

&lt;p&gt;与任何应用程序一样，OpenGL ES应用程序应支持适合其内容的用户界面方向。您可以在其信息属性列表中为您的应用程序声明支持的界面方向，或者使用其supportedInterfaceOrientations方法为托管OpenGL ES内容的视图控制器声明支持的界面方向。&lt;/p&gt;

&lt;p&gt;默认情况下，GLKViewController和GLKView类会自动处理方向更改：当用户将设备旋转到支持的方向时，系统会激活方向更改并更改视图控制器视图的大小。当其大小改变时，GLKView对象相应地调整其帧缓冲区和视口的大小。如果您需要响应此更改，请在您的GLKViewController子类中实现viewWillLayoutSubviews或viewDidLayoutSubviews方法，或者在使用自定义GLKView子类时实现layoutSubviews方法。&lt;/p&gt;

&lt;p&gt;如果您使用Core Animation图层绘制OpenGL ES内容，则应用程序仍应包含视图控制器来管理用户界面方向。&lt;/p&gt;

&lt;h4 id=&quot;其他显示屏上展示&quot;&gt;其他显示屏上展示&lt;/h4&gt;

&lt;p&gt;iOS设备可以连接到外部显示器。外部显示器的分辨率及其内容比例因子可能与主屏幕的分辨率和比例因子不同;渲染帧的代码应调整为匹配。&lt;/p&gt;

&lt;p&gt;在外部显示器上绘图的步骤与在主屏幕上运行的步骤几乎完全相同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;按照多显示器编程指南for iOS中的步骤在外部显示器上创建一个窗口。&lt;/li&gt;
  &lt;li&gt;为您的渲染策略添加适当的视图或视图控制器对象。&lt;/li&gt;
  &lt;li&gt;如果使用GLKit进行渲染，请设置GLKViewController和GLKView（或您的自定义子类）的实例，并使用其rootViewController属性将它们添加到窗口中。&lt;/li&gt;
  &lt;li&gt;如果渲染到Core Animation图层，请将包含图层的视图添加为窗口的子视图。要使用动画循环进行渲染，请通过检索窗口的屏幕属性并调用其displayLinkWithTarget：selector：方法来创建为外部显示器优化的显示链接对象。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（四）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_4/" rel="alternate" type="text/html" title="OpenGL ES编程指南（四）" /><published>2018-03-25T20:00:00+08:00</published><updated>2018-03-25T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_4</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_4/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;五绘制到其他渲染目标&quot;&gt;五、绘制到其他渲染目标&lt;/h3&gt;

&lt;p&gt;帧缓冲区对象是渲染命令的目的地。&lt;/p&gt;

&lt;p&gt;当您创建帧缓冲区对象时，您可以精确控制其颜色，深度和模板数据的存储。 您通过将图像附加到帧缓冲区来提供此存储，如下图所示。 最常见的图像附件是一个渲染缓冲区对象。 您还可以将OpenGL ES纹理附加到帧缓冲区的颜色附着点，这意味着任何绘图命令都将渲染到纹理中。 之后，纹理可以作为输入给以后的渲染命令。 您也可以在单个渲染上下文中创建多个帧缓冲区对象。 您可能会这样做，以便您可以在多个帧缓冲区之间共享相同的渲染管线和OpenGL ES资源。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/08.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有这些方法都需要手动创建帧缓冲区和渲染缓冲区对象来存储OpenGL ES上下文的渲染结果，以及编写其他代码以将其内容呈现在屏幕上，并在需要时运行动画循环。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;创建帧缓冲区对象&quot;&gt;创建帧缓冲区对象&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据您的应用打算执行的任务，您的应用配置不同的对象以附加到帧缓冲区对象。 在大多数情况下，配置帧缓冲区的不同之处在于哪个对象连接到帧缓冲区对象的颜色附着点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;要将帧缓冲区用于离屏图像处理，请附加渲染缓冲区。 请参阅创建离屏帧缓冲区对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要将帧缓冲区图像用作稍后渲染步骤的输入，请附加纹理。 请参阅使用帧缓冲区对象渲染到纹理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;要在核心动画层组合中使用帧缓冲区请使用特殊的支持core-animation的渲染缓冲区-请参阅渲染到core-animation-layer&quot;&gt;要在核心动画层组合中使用帧缓冲区，请使用特殊的支持Core Animation的渲染缓冲区。 请参阅渲染到Core Animation Layer&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;创建离屏帧缓冲区对象&quot;&gt;创建离屏帧缓冲区对象&lt;/h4&gt;

&lt;p&gt;用于离屏渲染的帧缓冲区将其所有附件分配为OpenGL ES渲染缓冲区。 以下代码使用颜色和深度附件分配framebuffer对象。&lt;/p&gt;

&lt;p&gt;1、创建帧缓冲并将其绑定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLuint framebuffer;
glGenFramebuffers(1, &amp;amp;framebuffer);
glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、创建一个颜色渲染缓冲区，为其分配存储空间，并将其附加到帧缓冲区的颜色附着点。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLuint colorRenderbuffer;
glGenRenderbuffers(1, &amp;amp;colorRenderbuffer);
glBindRenderbuffer(GL_RENDERBUFFER, colorRenderbuffer);
glRenderbufferStorage(GL_RENDERBUFFER, GL_RGBA8, width, height);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, colorRenderbuffer);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、创建深度或深度/模板渲染缓冲区，为其分配存储空间，并将其附加到帧缓冲区的深度附着点。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLuint depthRenderbuffer;
glGenRenderbuffers(1, &amp;amp;depthRenderbuffer);
glBindRenderbuffer(GL_RENDERBUFFER, depthRenderbuffer);
glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, width, height);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depthRenderbuffer);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、测试帧缓冲区的完整性。 只有在帧缓冲区的配置发生变化时才需要执行此测试。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER) ;
if(status != GL_FRAMEBUFFER_COMPLETE) {
    NSLog(@&quot;failed to make complete framebuffer object %x&quot;, status);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在绘制到离屏渲染缓冲区之后，您可以使用glReadPixels函数将其内容返回给CPU进一步处理。&lt;/p&gt;

&lt;h4 id=&quot;使用帧缓冲区对象渲染到纹理&quot;&gt;使用帧缓冲区对象渲染到纹理&lt;/h4&gt;

&lt;p&gt;创建此帧缓冲区的代码与离屏示例几乎相同，但现在纹理已分配并附加到颜色附着点。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建帧缓冲区对象（使用与创建离线帧缓冲区对象相同的过程）。&lt;/li&gt;
  &lt;li&gt;创建目标纹理，并将其附加到帧缓冲区的颜色附着点。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// create the texture
GLuint texture;
glGenTextures(1, &amp;amp;texture);
glBindTexture(GL_TEXTURE_2D, texture);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8,  width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.分配并附加深度缓冲区（与以前一样）。&lt;/p&gt;

&lt;p&gt;4.测试framebuffer的完整性（和以前一样）。&lt;/p&gt;

&lt;p&gt;尽管此示例假定您正在渲染为彩色纹理，但其他选项也是可能的。 例如，使用OES_depth_texture扩展名，您可以将纹理附加到深度附着点，以将来自场景的深度信息存储到纹理中。 您可以使用此深度信息来计算最终渲染场景中的阴影。&lt;/p&gt;

&lt;h4 id=&quot;渲染到core-animation-layer&quot;&gt;渲染到Core Animation Layer&lt;/h4&gt;

&lt;p&gt;Core Animation是iOS上图形渲染和动画的中心基础设施。 您可以使用托管使用不同iOS子系统（例如UIKit，Quartz 2D和OpenGL ES）呈现的内容的图层来组合应用的用户界面或其他可视化显示。 OpenGL ES通过CAEAGLLayer类连接到Core Animation，这是一种特殊类型的Core Animation Layer，其内容来自OpenGL ES渲染缓冲区。 Core Animation将渲染缓冲区的内容与其他图层进行合成，并在屏幕上显示结果图像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/09.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CAEAGLLayer通过提供两个关键功能为OpenGL ES提供此支持。 首先，它为渲染缓冲区分配共享存储空间。 其次，它将渲染缓冲区呈现给Core Animation，用渲染缓冲区中的数据替换该图层以前的内容。 这种模式的一个优点是核心动画层的内容不需要在每一帧中绘制，只有当渲染的图像改变时。&lt;/p&gt;

&lt;p&gt;注意：GLKView类自动执行以下步骤，所以当您想在视图的内容层中使用OpenGL ES进行绘制时应该使用它。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个CAEAGLLayer对象并配置其属性。
为了获得最佳性能，请将图层的不透明属性值设置为YES。请注意核心动画合成性能。&lt;/p&gt;

    &lt;p&gt;（可选）通过为CAEAGLLayer对象的drawableProperties属性分配一个新的字典值来配置渲染表面的表面属性。您可以指定渲染缓冲区的像素格式，并指定渲染缓冲区的内容在发送到Core Animation后是否被丢弃。有关允许的密钥列表，请参阅EAGLDrawable协议参考。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分配OpenGL ES上下文并将其作为当前上下文。请参阅配置OpenGL ES上下文。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建帧缓冲区对象（如上面的创建屏幕外帧缓冲区对象）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个颜色渲染缓冲区，通过调用上下文的renderbufferStorage：fromDrawable：方法并传递图层对象作为参数来分配其存储空间。宽度，高度和像素格式取自图层并用于为渲染缓冲区分配存储空间。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLuint colorRenderbuffer;
glGenRenderbuffers(1, &amp;amp;colorRenderbuffer);
glBindRenderbuffer(GL_RENDERBUFFER, colorRenderbuffer);
[myContext renderbufferStorage:GL_RENDERBUFFER fromDrawable:myEAGLLayer];
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, colorRenderbuffer);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检索颜色渲染缓冲区的高度和宽度。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLint width;
GLint height;
glGetRenderbufferParameteriv(GL_RENDERBUFFER, GL_RENDERBUFFER_WIDTH, &amp;amp;width);
glGetRenderbufferParameteriv(GL_RENDERBUFFER, GL_RENDERBUFFER_HEIGHT, &amp;amp;height);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;在前面的例子中，渲染缓冲区的宽度和高度被明确提供来为缓冲区分配存储空间。 这里，代码在分配存储空间后从颜色渲染缓冲区中检索宽度和高度。 你的应用程序这样做是因为颜色渲染缓冲区的实际尺寸是根据图层的边界和比例因子来计算的。 附加到帧缓冲区的其他渲染缓冲区必须具有相同的尺寸。 除了使用高度和宽度分配深度缓冲区外，还可以使用它们分配OpenGL ES视口并帮助确定应用纹理和模型中所需的详细程度。 请参阅支持高分辨率显示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分配并附加深度缓冲区（与以前一样）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试framebuffer的完整性（和以前一样）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过将CAEAGLLayer对象传递给可见图层的&lt;code class=&quot;highlighter-rouge&quot;&gt;addSublayer：&lt;/code&gt;方法，将CAEAGLLayer对象添加到Core Animation图层层次结构中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;绘制到帧缓冲区对象&quot;&gt;绘制到帧缓冲区对象&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在你有一个framebuffer对象，你需要填充它。 本节介绍渲染新帧并将其呈现给用户所需的步骤。 渲染到纹理或离屏帧缓冲区的行为相似，只是在应用程序使用最终帧的方式上有所不同。&lt;/p&gt;

&lt;h4 id=&quot;按需渲染或动画循环渲染&quot;&gt;按需渲染或动画循环渲染&lt;/h4&gt;

&lt;p&gt;在渲染到Core Animation层时，您必须选择何时绘制OpenGL ES内容，就像使用GLKit视图和视图控制器进行绘制时一样。 如果渲染到离屏帧缓冲区或纹理，请在适合使用这些类型的帧缓冲区的情况下进行绘制。&lt;/p&gt;

&lt;p&gt;对于按需绘制，实现您自己的方法来绘制并呈现您的渲染缓冲区，并在您想要显示新内容时调用它。&lt;/p&gt;

&lt;p&gt;要使用动画循环进行绘制，请使用CADisplayLink对象。 Display link是Core Animation提供的一种计时器，可让您将绘图与屏幕的刷新速率同步。&lt;/p&gt;

&lt;p&gt;注意：GLKViewController类自动使用CADisplayLink对象来动画GLKView内容。 只有当您需要超出GLKit框架提供的行为时，才可以直接使用CADisplayLink类。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;displayLink = [myView.window.screen displayLinkWithTarget:self selector:@selector(drawFrame)];
[displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在实现drawFrame方法的内部，读取displaylink的timestamp属性以获取要渲染的下一帧的时间戳。 它可以使用该值来计算下一帧中对象的位置。&lt;/p&gt;

&lt;p&gt;通常，每次刷新屏幕时都会触发displaylink对象; 该值通常为60 Hz，但在不同设备上可能会有所不同。 大多数应用程序不需要每秒刷新屏幕60次。 您可以将displaylink的frameInterval属性设置为调用方法之前的实际帧数。 例如，如果帧间隔设置为3，则应用程序每隔三帧调用一次，或每秒大约20帧。&lt;/p&gt;

&lt;p&gt;注意：为获得最佳效果，请选择您的应用可以始终实现的帧速率。 平滑一致的帧速率产生比不规律变化的帧速率更令人愉快的用户体验。&lt;/p&gt;

&lt;h4 id=&quot;渲染一帧&quot;&gt;渲染一帧&lt;/h4&gt;

&lt;p&gt;下图展示了OpenGL ES应用程序在iOS上呈现并呈现帧的步骤。 这些步骤包括许多提示，以提高应用程序的性能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/10.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;清缓存&quot;&gt;清缓存&lt;/h5&gt;

&lt;p&gt;在每个帧的开始处，擦除所有帧缓冲区附件的内容，其内容不需要先前的帧来绘制下一帧。 调用glClear函数，将所有缓冲区的位掩码传入以清除&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对OpenGL ES使用glClear可以放弃渲染缓冲区或纹理的现有内容，从而避免将以前内容加载到内存中的代价高昂的操作。&lt;/p&gt;

&lt;h5 id=&quot;准备资源并执行绘图命令&quot;&gt;准备资源并执行绘图命令&lt;/h5&gt;

&lt;p&gt;这两个步骤涵盖了您在设计应用程序体系结构时所做的大部分关键决策。首先，您决定要向用户显示哪些内容，并配置相应的OpenGL ES对象（例如顶点缓冲区对象，纹理，着色器程序及其输入变量），以便上传到GPU。接下来，您提交绘图命令，告诉GPU如何使用这些资源来渲染帧。&lt;/p&gt;

&lt;p&gt;渲染器设计在OpenGL ES设计指南中有更详细的介绍。现在，要注意的最重要的性能优化是，如果只在渲染新帧时开始修改OpenGL ES对象，则应用运行得更快。虽然您的应用程序可以在修改对象和提交绘图命令（如图4-3中的虚线所示）之间进行切换，但如果每帧仅执行一次每一步，则运行速度会更快。&lt;/p&gt;

&lt;h5 id=&quot;执行绘图命令&quot;&gt;执行绘图命令&lt;/h5&gt;

&lt;p&gt;这一步将获取您在上一步中准备的对象并提交绘图命令以使用它们。在OpenGL ES设计指南中详细介绍了设计这部分渲染代码以便高效运行。目前，要注意的最重要的性能优化是，如果您的应用在渲染新帧时只修改OpenGL ES对象，则运行速度会更快。虽然您的应用程序可以在修改对象和提交绘图命令之间进行切换（如虚线所示），但如果只执行一次每个步骤，则运行速度会更快。&lt;/p&gt;

&lt;h5 id=&quot;解决多重采样&quot;&gt;解决多重采样&lt;/h5&gt;

&lt;p&gt;如果您的应用使用多重采样来提高图像质量，则应用必须在将像素呈现给用户之前先解析这些像素。多重采样在使用多重采样来提高图像质量方面有详细的介绍。&lt;/p&gt;

&lt;h5 id=&quot;放弃不需要的渲染缓冲区&quot;&gt;放弃不需要的渲染缓冲区&lt;/h5&gt;

&lt;p&gt;丢弃操作是一个性能提示，告诉OpenGL ES不再需要一个或多个渲染缓冲区的内容。通过暗示OpenGL ES您不需要渲染缓冲区的内容，缓冲区中的数据可以被丢弃，并且可以避免昂贵的任务来保持这些缓冲区的内容更新。&lt;/p&gt;

&lt;p&gt;在渲染循环的这个阶段，你的应用程序已经提交了该帧的所有绘图命令。虽然您的应用程序需要颜色渲染缓冲区才能显示到屏幕上，但它可能不需要深度缓冲区的内容。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const GLenum discards[]  = {GL_DEPTH_ATTACHMENT};
glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
glDiscardFramebufferEXT(GL_FRAMEBUFFER,1,discards);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：glDiscardFramebufferEXT函数由OpenGL ES 1.1和2.0的EXT_discard_framebuffer扩展提供。 在OpenGL ES 3.0上下文中，改用glInvalidateFramebuffer函数。&lt;/p&gt;

&lt;h4 id=&quot;给core-animation展示结果&quot;&gt;给Core Animation展示结果&lt;/h4&gt;

&lt;p&gt;在此步骤中，颜色渲染缓冲区保存完成的帧，因此您只需将其呈现给用户即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;glBindRenderbuffer(GL_RENDERBUFFER, colorRenderbuffer);
[context presentRenderbuffer:GL_RENDERBUFFER];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;默认情况下，您必须假设在您的应用呈现渲染缓冲区后渲染缓冲区的内容将被丢弃。 这意味着每次您的应用呈现一个框架时，它必须在呈现新框架时完全重新创建框架的内容。 出于这个原因，上面的代码总是会擦除颜色缓冲区。&lt;/p&gt;

&lt;p&gt;如果您的应用想要在帧之间保留颜色渲染缓冲区的内容，请将kEAGLDrawablePropertyRetainedBacking键添加到存储在CAEAGLLayer对象的drawableProperties属性中的字典中，并从先前的glClear函数调用中移除GL_COLOR_BUFFER_BIT常量。 保留的支持可能需要iOS分配额外的内存来保存缓冲区的内容，这可能会降低应用程序的性能。&lt;/p&gt;

&lt;h4 id=&quot;使用多重采样提高图像质量&quot;&gt;使用多重采样提高图像质量&lt;/h4&gt;

&lt;p&gt;多重采样是抗锯齿的一种形式，可平滑锯齿边缘并提高大多数3D应用程序的图像质量。 OpenGL ES 3.0包括多重采样作为核心规范的一部分，iOS通过APPLE_framebuffer_multisample扩展在OpenGL ES 1.1和2.0中提供。多重采样使用更多的内存和片段处理时间来渲染图像，但与使用其他方法相比，它可以以更低的性能成本提高图像质量。&lt;/p&gt;

&lt;p&gt;下图显示了多采样如何工作。您的应用程序不会创建一个帧缓冲区对象，而是创建两个。多重采样缓冲区包含呈现您的内容所需的所有附件（通常为颜色和深度缓冲区）。解析缓冲区仅包含向用户显示渲染图像所需的附件（通常是颜色渲染缓冲区，但可能是纹理），它使用创建帧缓冲区对象的相应过程创建。多采样渲染缓冲区使用与解析帧缓冲区相同的尺寸进行分配，但每个渲染缓冲区都包含一个附加参数，该参数指定要为每个像素存储的采样数量。您的应用将其所有渲染执行到多重采样缓冲区，然后通过将这些样本解析到解析缓冲区来生成最终的抗锯齿图像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/11.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面显示了创建多重采样缓冲区的代码。 此代码使用先前创建的缓冲区的宽度和高度。 它调用glRenderbufferStorageMultisampleAPPLE函数为渲染缓冲区创建多重采样存储&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;glGenFramebuffers(1, &amp;amp;sampleFramebuffer);
glBindFramebuffer(GL_FRAMEBUFFER, sampleFramebuffer);
 
glGenRenderbuffers(1, &amp;amp;sampleColorRenderbuffer);
glBindRenderbuffer(GL_RENDERBUFFER, sampleColorRenderbuffer);
glRenderbufferStorageMultisampleAPPLE(GL_RENDERBUFFER, 4, GL_RGBA8_OES, width, height);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, sampleColorRenderbuffer);
 
glGenRenderbuffers(1, &amp;amp;sampleDepthRenderbuffer);
glBindRenderbuffer(GL_RENDERBUFFER, sampleDepthRenderbuffer);
glRenderbufferStorageMultisampleAPPLE(GL_RENDERBUFFER, 4, GL_DEPTH_COMPONENT16, width, height);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, sampleDepthRenderbuffer);
 
if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
    NSLog(@&quot;Failed to make complete framebuffer object %x&quot;, glCheckFramebufferStatus(GL_FRAMEBUFFER));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下是修改您的渲染代码以支持多重采样的步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在清除缓冲区步骤中，清除多重采样帧缓冲区的内容。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;glBindFramebuffer(GL_FRAMEBUFFER, sampleFramebuffer);
glViewport(0, 0, framebufferWidth, framebufferHeight);
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提交绘图命令后，您将内容从多重采样缓冲区解析到解析缓冲区。 为每个像素存储的样本在解析缓冲区中合并为一个样本。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;glBindFramebuffer(GL_DRAW_FRAMEBUFFER_APPLE, resolveFrameBuffer);
glBindFramebuffer(GL_READ_FRAMEBUFFER_APPLE, sampleFramebuffer);
glResolveMultisampleFramebufferAPPLE();
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在放弃步骤中，您可以放弃连接到多采样帧缓冲区的两个渲染缓冲区。 这是因为您打算呈现的内容存储在解析帧缓冲区中。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const GLenum discards[]  = {GL_COLOR_ATTACHMENT0,GL_DEPTH_ATTACHMENT};
glDiscardFramebufferEXT(GL_READ_FRAMEBUFFER_APPLE,2,discards);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在“当前结果”步骤中，您将呈现附加到解析帧缓冲区的颜色渲染缓冲区。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;glBindRenderbuffer(GL_RENDERBUFFER, colorRenderbuffer);
[context presentRenderbuffer:GL_RENDERBUFFER];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;多重采样不是免费的; 需要额外的内存来存储额外的样本，并且将样本解析到解析帧缓冲区需要时间。 如果您向应用添加多重采样，请始终测试应用的性能以确保其可接受性。&lt;/p&gt;

&lt;p&gt;注意：上面的代码假定有一个OpenGL ES 1.1或2.0上下文。 多重采样是核心OpenGL ES 3.0 API的一部分，但功能不同。&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（三）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_3/" rel="alternate" type="text/html" title="OpenGL ES编程指南（三）" /><published>2018-03-25T20:00:00+08:00</published><updated>2018-03-25T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_3</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_3/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;四通过opengl-es和glkit来画&quot;&gt;四、通过OpenGL ES和GLKit来画&lt;/h3&gt;

&lt;p&gt;GLKit框架提供了View和ViewController类，它们消除了OpenGL ES内容绘制和动画制作所需的设置和代码维护。 GLKView类管理OpenGL ES基础结构并为绘图代码提供位置，而GLKViewController类则为GLKit视图中的OpenGL ES内容的平滑动画提供渲染循环。 这些类扩展了用于绘制视图内容和管理视图表示的标准UIKit设计模式。 因此，您可以将精力主要放在您的OpenGL ES渲染代码上，并让您的应用程序快速启动并运行。 GLKit框架还提供了其他功能来简化OpenGL ES 2.0和3.0的开发。&lt;/p&gt;

&lt;h4 id=&quot;glkit-view&quot;&gt;GLKit View&lt;/h4&gt;

&lt;p&gt;GLKView类提供了基于OpenGL ES的的绘图，与标准UIView绘图循环等价。 UIView实例自动配置其图形上下文，以便您的drawRect：实现只需执行Quartz 2D绘图命令；而GLKView实例自动配置它自己，绘图只需执行OpenGL ES绘图命令。 GLKView类通过维护一个保存OpenGL ES绘图命令结果的framebuffer对象来提供这种功能，然后在绘图方法返回时自动将它们呈现给Core Animation。&lt;/p&gt;

&lt;p&gt;与标准UIKit视图一样，GLKit视图按需呈现其内容。首次显示视图时，它将调用您的绘图方法 - Core Animation会缓存呈现的输出并在显示视图时显示它。如果要更改视图的内容，请调用setNeedsDisplay方法，视图再次调用绘图方法，缓存结果图像并将其显示在屏幕上。当用于渲染图像的数据不经常更改或仅响应用户操作时，此方法非常有用。通过仅在需要时渲染新的视图内容，您可以节省设备上的电池电量，并为设备执行其他操作留出更多时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/06.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建并配置一个glkit-view&quot;&gt;创建并配置一个GLKit View&lt;/h4&gt;

&lt;p&gt;您可以通过编程或使用Interface Builder来创建和配置GLKView对象。 在将其用于绘制之前，您必须将其与EAGLContext对象关联（请参阅配置OpenGL ES上下文）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以编程方式创建视图时，首先创建一个上下文，然后将其传递给视图的 &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithFrame:context:&lt;/code&gt; 方法。&lt;/li&gt;
  &lt;li&gt;从storyboard加载视图后，创建一个上下文并将其设置为视图的上下文属性的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GLKit视图会自动创建和配置自己的OpenGL ES帧缓冲区对象和渲染缓冲区。 您可以使用视图的可绘制属性来控制这些对象的属性，如下所示。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)viewDidLoad
{
    [super viewDidLoad];
 
    // Create an OpenGL ES context and assign it to the view loaded from storyboard
    GLKView *view = (GLKView *)self.view;
    view.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
 
    // Configure renderbuffers created by the view
    view.drawableColorFormat = GLKViewDrawableColorFormatRGBA8888;
    view.drawableDepthFormat = GLKViewDrawableDepthFormat24;
    view.drawableStencilFormat = GLKViewDrawableStencilFormat8;
 
    // Enable multisampling
    view.drawableMultisample = GLKViewDrawableMultisample4X;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果您更改GLKit视图的大小，比例因子或可绘制属性，则会在下次绘制内容时自动删除并重新创建适当的帧缓冲区对象和渲染缓冲区.&lt;/p&gt;

&lt;p&gt;您可以使用其drawableMultisample属性为GLKView实例启用多重采样。 多重采样是抗锯齿的一种形式，可平滑锯齿状边缘，以大幅增加内存和碎片处理时间为代价提高大多数3D应用的图像质量 - 如果启用多重采样，则始终测试应用的性能以确保其可接受性。&lt;/p&gt;

&lt;h4 id=&quot;用glkit-view进行绘制&quot;&gt;用GLKit View进行绘制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)drawRect:(CGRect)rect
{
    // Clear the framebuffer
    glClearColor(0.0f, 0.0f, 0.1f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
    // Draw using previously configured texture, shader, uniforms, and vertex array
    glBindTexture(GL_TEXTURE_2D, _planetTexture);
    glUseProgram(_diffuseShading);
    glUniformMatrix4fv(_uniformModelViewProjectionMatrix, 1, 0, _modelViewProjectionMatrix.m);
    glBindVertexArrayOES(_planetMesh);
    glDrawElements(GL_TRIANGLE_STRIP, 256, GL_UNSIGNED_SHORT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：glClear函数提示OpenGL ES可以丢弃任何现有的帧缓冲区内容，避免了将以前的内容加载到内存中的昂贵的内存操作。 为确保最佳性能，在绘制之前应始终调用此函数。&lt;/p&gt;

&lt;p&gt;GLKView类能够为OpenGL ES绘图提供一个简单的接口，因为它管理着OpenGL ES渲染过程的标准部分：&lt;/p&gt;

&lt;p&gt;在调用绘图方法之前，视图：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使其EAGLContext对象成为当前上下文&lt;/li&gt;
  &lt;li&gt;根据当前大小，比例因子和可绘制属性（如果需要）创建帧缓冲区对象和渲染缓冲区，&lt;/li&gt;
  &lt;li&gt;将帧缓冲区对象绑定为绘图命令的当前目标&lt;/li&gt;
  &lt;li&gt;设置OpenGL ES视口以匹配帧缓冲区大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;绘图方法返回后，视图：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解决多重采样缓冲区（如果启用了多重采样）&lt;/li&gt;
  &lt;li&gt;放弃其内容不再需要的渲染缓冲区&lt;/li&gt;
  &lt;li&gt;将渲染缓冲区内容呈现给Core Animation进行缓存和显示&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;用一个代理对象来进行渲染&quot;&gt;用一个代理对象来进行渲染&lt;/h4&gt;

&lt;p&gt;许多OpenGL ES应用程序在自定义类中实现渲染代码。 这种方法的一个优点是它允许您通过为每个渲染算法类定义不同的渲染器类来轻松支持多种渲染算法。 具有共同功能的渲染算法可以从父类继承。 例如，您可能使用不同的渲染器类来支持OpenGL ES 2.0和3.0（请参阅配置OpenGL ES上下文）。 或者您可以使用它们来定制渲染，以便在具有更强大硬件的设备上获得更好的图像质量&lt;/p&gt;

&lt;p&gt;GLKit非常适合这种方法 - 您可以使您的渲染器对象为标准GLKView实例的代理。 您的渲染器类不使用GLKView的子类并实现&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，而是使用GLKViewDelegate协议并实现&lt;code class=&quot;highlighter-rouge&quot;&gt;glkView:drawInRect:&lt;/code&gt;方法。 下面代码在应用启动时基于硬件特性选择渲染器类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Create a context so we can test for features
    EAGLContext *context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
    [EAGLContext setCurrentContext:context];
 
    // Choose a rendering class based on device features
    GLint maxTextureSize;
    glGetIntegerv(GL_MAX_TEXTURE_SIZE, &amp;amp;maxTextureSize);
    if (maxTextureSize &amp;gt; 2048)
        self.renderer = [[MyBigTextureRenderer alloc] initWithContext:context];
    else
        self.renderer = [[MyRenderer alloc] initWithContext:context];
 
    // Make the renderer the delegate for the view loaded from the main storyboard
    GLKView *view = (GLKView *)self.window.rootViewController.view;
    view.delegate = self.renderer;
 
    // Give the OpenGL ES context to the view so it can draw
    view.context = context;
 
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;glkit-view-controller&quot;&gt;GLKit View Controller&lt;/h4&gt;

&lt;p&gt;默认情况下，GLKView对象根据需要呈现其内容。 也就是说，使用OpenGL ES进行绘图的一个关键优势是它能够使用图形处理硬件来连续动画复杂的场景 - 例如游戏和模拟等应用很少呈现静态图像。 对于这些情况，GLKit框架提供了一个View Controller类，为其管理的GLKView对象维护一个动画循环。 该循环遵循游戏和模拟中常见的设计模式，分为两个阶段：更新和显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/06.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于更新阶段，View Controller调用它自己的更新方法（或其代理的glkViewControllerUpdate方法）。在这种方法里，你应该准备绘制下一帧。例如，游戏可能会使用这种方法根据自上一帧以来接收到的输入事件来确定玩家和敌人角色的位置，科学可视化可能会使用此方法来运行其模拟步骤。如果您需要计时信息来确定下一帧的应用程序状态，请使用视图控制器的计时属性之一，例如timeSinceLastUpdate属性。在上图中，更新阶段增加一个角度变量并使用它来计算变换矩阵。&lt;/p&gt;

&lt;p&gt;对于显示阶段，View Controller调用其视图的显示方法，该方法又调用您的绘图方法。在您的绘图方法中，您将OpenGL ES绘图命令提交给GPU以呈现您的内容。为了获得最佳性能，应用程序应该在渲染新帧时开始修改OpenGL ES对象，然后提交绘制命令。显示阶段将着色器程序中的统一变量设置为更新阶段计算的矩阵，然后提交绘制命令以渲染新内容。&lt;/p&gt;

&lt;p&gt;动画循环以视图控制器的framesPerSecond属性所指示的速率在这两个阶段之间交替。您可以使用preferredFramesPerSecond属性设置所需的帧速率 - 以优化当前显示硬件的性能，视图控制器会自动选择接近您首选值的最佳帧速率。&lt;/p&gt;

&lt;p&gt;重要提示：为获得最佳效果，请选择您的应用可以始终实现的帧速率。平滑一致的帧速率产生比不规律变化的帧速率更令人愉快的用户体验。&lt;/p&gt;

&lt;h4 id=&quot;使用glkit-view-controller&quot;&gt;使用GLKit View Controller&lt;/h4&gt;

&lt;p&gt;下面代码演示了使用GLKViewController子类和GLKView实例呈现动画OpenGL ES内容的典型策略。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlanetViewController&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// subclass of GLKViewController
&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Create an OpenGL ES context and assign it to the view loaded from storyboard
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GLKView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLKView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EAGLContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kEAGLRenderingAPIOpenGLES2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Set animation frame rate
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredFramesPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Not shown: load shaders, textures and vertex arrays, set up projection matrix
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupGL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeSinceLastUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// one quarter rotation per second
&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// Set up transform matrices for the rotating planet
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GLKMatrix4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelViewMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLKMatrix4MakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_normalMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLKMatrix3InvertAndTranspose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLKMatrix4GetMatrix3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelViewMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_modelViewProjectionMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLKMatrix4Multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_projectionMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelViewMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glkView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLKView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawInRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Clear the framebuffer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;glClearColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glClear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_COLOR_BUFFER_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_DEPTH_BUFFER_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Set shader uniforms to values calculated in -update
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;glUseProgram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_diffuseShading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glUniformMatrix4fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_uniformModelViewProjectionMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_modelViewProjectionMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glUniformMatrix3fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_uniformNormalMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_normalMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Draw using previously configured texture and vertex array
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;glBindTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_planetTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glBindVertexArrayOES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_planetMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glDrawElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TRIANGLE_STRIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_UNSIGNED_SHORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这个例子中，一个PlanetViewController类的实例（一个自定义的GLKViewController子类）从storyboard加载，以及一个标准的GLKView实例及其可绘制属性。 viewDidLoad方法创建一个OpenGL ES上下文并将其提供给视图，并且还设置动画循环的帧速率。&lt;/p&gt;

&lt;p&gt;视图控制器自动成为其视图的代理，因此它实现了动画循环的更新和显示阶段。 在更新方法中，它会计算显示旋转行星所需的变换矩阵。 在&lt;code class=&quot;highlighter-rouge&quot;&gt;glkView:drawInRect:&lt;/code&gt;方法中，它将这些矩阵提供给着色器程序并提交绘制命令来渲染行星几何。&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（二）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_2/" rel="alternate" type="text/html" title="OpenGL ES编程指南（二）" /><published>2018-03-25T20:00:00+08:00</published><updated>2018-03-25T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_2</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/25/OpenGL_2/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;三配置opengl-es上下文&quot;&gt;三、配置OpenGL ES上下文&lt;/h3&gt;

&lt;p&gt;OpenGL ES的每个实现都提供了一种方式来创建渲染上下文来管理OpenGL ES规范所需状态。 通过把上述状态放入上下文中，多个应用程序可以轻松共享图形硬件而不会相互干扰&lt;/p&gt;

&lt;h4 id=&quot;先初始化&quot;&gt;先初始化&lt;/h4&gt;

&lt;p&gt;在您的应用程序可以调用任何OpenGL ES函数之前，它必须初始化一个EAGLContext对象。 &lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;类还提供了用于将OpenGL ES内容与Core Animation集成的方法。&lt;/p&gt;

&lt;h4 id=&quot;当前上下文&quot;&gt;当前上下文&lt;/h4&gt;

&lt;p&gt;iOS应用程序中的每个线程都有一个当前上下文; 当您调用OpenGL ES函数时，其实是上下文的状态发生了改变&lt;/p&gt;

&lt;p&gt;要设置线程的当前上下文，请在该线程上执行时调用EAGLContext类方法setCurrentContext：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[EAGLContext setCurrentContext: myContext];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：如果您的应用程序在同一线程中的两个或更多个上下文之间主动切换，请在将新上下文设置为当前上下文之前调用glFlush函数。 这确保以前提交的命令及时传送到图形硬件。&lt;/p&gt;

&lt;p&gt;获取线程的当前上下文可以用这个：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[EAGLContext currentContext];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OpenGL ES持有与当前上下文对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;对象的强引用。 （如果您正在使用手动引用计数，则OpenGL ES将保留此对象。）当您调用setCurrentContext：方法更改当前上下文时，OpenGL ES不再引用上一个上下文。 （如果使用手动引用计数，OpenGL ES会释放EAGLContext对象。）为防止EAGLContext对象在不是当前上下文时被释放，您的应用程序必须对这些对象进行强引用（或保留）。&lt;/p&gt;

&lt;h4 id=&quot;每个上下文都针对特定版本的opengl-es&quot;&gt;每个上下文都针对特定版本的OpenGL ES&lt;/h4&gt;

&lt;p&gt;一个&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;对象只支持一个版本的OpenGL ES。例如，为OpenGL ES 1.1编写的代码与OpenGL ES 2.0或3.0上下文不兼容。使用核心OpenGL ES 2.0功能的代码与OpenGL ES 3.0上下文兼容，并且为OpenGL ES 2.0扩展设计的代码通常可以在OpenGL ES 3.0上下文中使用，只需稍作更改。许多新的OpenGL ES 3.0功能和增强的硬件功能需要OpenGL ES 3.0上下文。&lt;/p&gt;

&lt;p&gt;您的应用在创建并初始化EAGLContext对象时决定支持哪种版本的OpenGL ES。如果设备不支持请求的OpenGL ES版本，则initWithAPI：方法返回nil。在使用它之前，您的应用必须进行测试以确保上下文已成功初始化。&lt;/p&gt;

&lt;p&gt;要在应用中支持多个版本的OpenGL ES作为渲染选项，应首先尝试初始化要定位的最新版本的渲染上下文。如果返回的对象为零，请改为初始化旧版本的上下文。下面的代码表示如何执行此操作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EAGLContext* CreateBestEAGLContext()
{
   EAGLContext *context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES3];
   if (context == nil) {
      context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
   }
   return context;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上下文的API属性指定上下文支持哪个版本的OpenGL ES。 您的应用程序应该测试上下文的API属性并使用它来选择正确的呈现路径。 实现此行为的常见模式是为每个呈现路径创建一个类。 您的应用程序在初始化时测试上下文并创建一次渲染器。&lt;/p&gt;

&lt;h4 id=&quot;eagl-sharegroup为上下文管理opengl-es对象&quot;&gt;EAGL Sharegroup为上下文管理OpenGL ES对象&lt;/h4&gt;

&lt;p&gt;尽管上下文保存了OpenGL ES状态，但它不直接管理OpenGL ES对象。相反，OpenGL ES对象由&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLSharegroup&lt;/code&gt;对象创建和维护。每个上下文都包含一个&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLSharegroup&lt;/code&gt;对象，它将对象创建委托给它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/05.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，当两个或两个以上的上下文引用相同的Sharegroup时，Sharegroup的优点变得明显。当多个上下文连接到一个公共Sharegroup时，任何上下文创建的OpenGL ES对象都可用于所有上下文;如果绑定到与创建它的另一个上下文相同的对象标识符，则引用相同的OpenGL ES对象。移动设备上的资源往往很少;在多个上下文中创建相同内容的多个副本是浪费的。共享公共资源可以更好地利用设备上的可用图形资源。&lt;/p&gt;

&lt;p&gt;Sharegroup是一个不透明的对象;它没有应用程序可以调用的方法或属性。使用共享组对象的上下文保持强烈的引用。&lt;/p&gt;

&lt;p&gt;在两种特定情况下，Sharegroup是最有用的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当上下文之间共享的大部分资源不变时。&lt;/li&gt;
  &lt;li&gt;当您希望您的应用程序能够在渲染器的主线程以外的线程上创建新的OpenGL ES对象时。 在这种情况下，第二个上下文运行在单独的线程上，专门用于获取数据和创建资源。 资源加载后，第一个上下文可以绑定到对象并立即使用它。 &lt;code class=&quot;highlighter-rouge&quot;&gt;GLKTextureLoader&lt;/code&gt;类使用此模式来提供异步纹理加载。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要创建引用相同Sharegroup的多个上下文，首先通过调用initWithAPI来初始化第一个上下文： 会自动为上下文创建Sharegroup。 通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;initWithAPI:sharegroup:&lt;/code&gt; 方法，第二个和之后的上下文被初始化为使用第一个上下文的Sharegroup。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EAGLContext* firstContext = CreateBestEAGLContext();
EAGLContext* secondContext = [[EAGLContext alloc] initWithAPI:[firstContext API] sharegroup: [firstContext sharegroup]];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;：与同一Sharegroup关联的所有上下文必须使用与初始上下文相同版本的OpenGL ES API。&lt;/p&gt;

&lt;p&gt;当Sharegroup由多个上下文共享时，您的应用程序有责任管理对OpenGL ES对象的状态更改。 下面是规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果对象未被修改，您的应用程序可能会同时访问多个上下文中的对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当对象被发送到上下文的命令修改时，不得在任何其他上下文中读取或修改该对象。&lt;/li&gt;
  &lt;li&gt;对象修改后，所有上下文都必须重新绑定对象才能看到更改。 如果上下文在绑定它之前引用它，则该对象的内容是未定义的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下是您的应用程序应该遵循的更新OpenGL ES对象的步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在每个可能使用该对象的上下文中调用glFlush。&lt;/li&gt;
  &lt;li&gt;在想要修改对象的上下文中，调用一个或多个OpenGL ES函数来更改对象。&lt;/li&gt;
  &lt;li&gt;在接收到状态修改命令的上下文中调用glFlush。&lt;/li&gt;
  &lt;li&gt;在其他任何情况下，重新绑定对象标识符。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL ES编程指南（一）</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL_1/" rel="alternate" type="text/html" title="OpenGL ES编程指南（一）" /><published>2018-03-24T20:00:00+08:00</published><updated>2018-03-24T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL_1</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL_1/">&lt;p&gt;本文翻译自苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot;&gt;OpenGL ES Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;一关于opengl-es&quot;&gt;一、关于OpenGL ES&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Open Graphics Library&lt;/em&gt;（OpenGL）用于可视化2D和3D数据。 它是一个多用途的开放标准图形库，支持2D和3D数字内容创建，机械和建筑设计，虚拟样机，飞行模拟，视频游戏等应用。 您可以使用OpenGL来配置3D图形管道并向其提交数据。 顶点被转换并且被点亮，然后组装成图元，并被光栅化用以创建2D图像。 OpenGL旨在将函数调用转换为可发送到底层图形硬件的图形命令。 由于底层硬件专用于处理图形命令，所以OpenGL绘图通常非常快速。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OpenGL for Embedded Systems (OpenGL ES)&lt;/em&gt; 是OpenGL的简化版本，它消除了冗余功能，提供了一个易于学习和易于在移动图形硬件中实现的库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_6/04.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;预览&quot;&gt;预览&lt;/h4&gt;

&lt;p&gt;OpenGL ES允许应用程序利用底层图形处理器的强大功能。 iOS设备上的GPU可以执行复杂的2D和3D绘图，以及最终图像中每个像素的复杂阴影计算。 如果您的应用程序的设计要求需要最直接，最全面地访问GPU硬件，则应该使用OpenGL ES。 OpenGL ES的典型客户端包括呈现3D图形的视频游戏和模拟。&lt;/p&gt;

&lt;p&gt;OpenGL ES是一个底层的，以硬件为中心的API。 虽然它提供了最强大和最灵活的图形处理工具，但它的学习曲线陡峭，对应用程序的整体设计也有重大影响。 对于需要高性能图形以进行更多专业用途的应用程序，iOS提供了几个更高层的框架：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sprite Kit框架提供了一个为创建2D游戏而优化的硬件加速动画系统。&lt;/li&gt;
  &lt;li&gt;Core Image框架为静止和视频图像提供实时滤镜和分析。&lt;/li&gt;
  &lt;li&gt;Core Animation为所有iOS应用程序提供了硬件加速的图形渲染和动画基础结构，以及一个简单的声明式编程模型，使得实现复杂的用户界面动画变得非常简单。&lt;/li&gt;
  &lt;li&gt;您可以使用UIKit框架中的功能为Cocoa Touch用户界面添加动画，基于物理的动态效果和其他特殊效果。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二构建适用于ios-app的opengl-es清单&quot;&gt;二、构建适用于iOS APP的OpenGL ES清单&lt;/h3&gt;

&lt;p&gt;OpenGL ES规范定义了一系列独立于平台的API，用于使用GPU硬件渲染图形。实现OpenGL ES的平台提供了：一个渲染上下文用于执行OpenGL ES命令、帧缓冲区用于保存渲染结果，以及一个或多个渲染目标用以呈现帧缓冲区内容以供显示。在iOS中，&lt;code class=&quot;highlighter-rouge&quot;&gt;EAGLContext&lt;/code&gt;类实现了渲染上下文。 iOS只提供一种类型的帧缓冲区也就是OpenGL ES framebuffer对象，GLKView和CAEAGLLayer类实现渲染目标。&lt;/p&gt;

&lt;p&gt;在iOS中构建OpenGL ES应用程序需要考虑几个问题，其中一些是OpenGL ES编程通用的，其中一些针对iOS。按照此清单以及下面的详细部分进行使用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确定哪些版本的OpenGL ES为有您的应用程序需要的功能，并创建OpenGL ES上下文。&lt;/li&gt;
  &lt;li&gt;在运行时验证设备是否支持您要使用的OpenGL ES功能。&lt;/li&gt;
  &lt;li&gt;选择渲染OpenGL ES内容的位置。&lt;/li&gt;
  &lt;li&gt;确保您的应用在iOS中正常运行。&lt;/li&gt;
  &lt;li&gt;实现你的渲染引擎。&lt;/li&gt;
  &lt;li&gt;使用Xcode和Instruments调试您的OpenGL ES应用程序并调整它以获得最佳性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;选择版本&quot;&gt;选择版本&lt;/h4&gt;

&lt;p&gt;确定您的应用是否应该支持OpenGL ES 3.0，OpenGL ES 2.0，OpenGL ES 1.1或多个版本。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenGL ES 3.0是iOS 7中的新功能。它增加了许多新功能，可以实现更高性能，通用GPU计算技术以及以前只能在桌面级硬件和游戏控制台上实现的更复杂的视觉效果。&lt;/li&gt;
  &lt;li&gt;OpenGL ES 2.0是iOS设备的基准配置文件，具有基于可编程着色器的可配置图形管道。&lt;/li&gt;
  &lt;li&gt;OpenGL ES 1.1只提供了一个基本的固定功能图形管道，并且在iOS中主要用于向后兼容。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;验证opengl-es功能&quot;&gt;验证OpenGL ES功能&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013599&quot;&gt;&lt;em&gt;iOS Device Compatibility Reference&lt;/em&gt; &lt;/a&gt;总结了在iOS设备上可用的功能和拓展，但是为了尽可能多的系统版本和设备能够运行，你的APP应该总是在运行时查询OpenGL ES声明来检测功能。&lt;/p&gt;

&lt;p&gt;要确定特定实现的限制（如最大纹理大小或顶点属性的最大数量），请使用适当的glGet函数查找其数据，查找相应标记的值（如gl_h头中的MAX_TEXTURE_SIZE或MAX_VERTEX_ATTRIBS） 类型。&lt;/p&gt;

&lt;p&gt;要检查OpenGL ES 3.0扩展，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;glGetIntegerv&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;glGetStringi&lt;/code&gt;函数，如下面的代码示例所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOOL CheckForExtension(NSString *searchName)
{
    // Create a set containing all extension names.
    // (For better performance, create the set only once and cache it for future use.)
    int max = 0;
    glGetIntegerv(GL_NUM_EXTENSIONS, &amp;amp;max);
    NSMutableSet *extensions = [NSMutableSet set];
    for (int i = 0; i &amp;lt; max; i++) {
        [extensions addObject: @( (char *)glGetStringi(GL_EXTENSIONS, i) )];
    }
    return [extensions containsObject: searchName];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要检查OpenGL ES 1.1和2.0扩展，请调用&lt;code class=&quot;highlighter-rouge&quot;&gt;glGetString&lt;/code&gt;（GL_EXTENSIONS）以获取所有扩展名的列表。&lt;/p&gt;

&lt;h4 id=&quot;选择一个渲染目标&quot;&gt;选择一个渲染目标&lt;/h4&gt;

&lt;p&gt;在iOS中，帧缓冲区对象存储绘图命令的结果。 （iOS不实现窗口系统提供的帧缓冲区。）你可以以多种方式使用帧缓冲区对象的内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GLKit框架提供了一个View，该View绘制OpenGL ES内容并管理其自己的帧缓冲区对象，以及支持动画OpenGL ES内容的View Controller。使用这些类创建全屏views或将您的OpenGL ES内容合并到UIKit视图层次结构中。&lt;/li&gt;
  &lt;li&gt;CAEAGLLayer类提供了一种将OpenGL ES内容绘制为Core Animation Layer组成部分的方法。使用此类时，您必须创建自己的帧缓冲区对象。&lt;/li&gt;
  &lt;li&gt;与任何OpenGL ES实现一样，您还可以使用帧缓冲器进行离屏图形处理或渲染纹理，以用于图形管道中的其他位置。借助OpenGL ES 3.0，可以在使用多个渲染目标的渲染算法中使用屏幕外缓冲区。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;与ios集成&quot;&gt;与iOS集成&lt;/h4&gt;

&lt;p&gt;iOS应用程序默认支持多任务处理，但在OpenGL ES应用程序中正确处理此功能需要额外考虑。不正确地使用OpenGL ES会导致您的应用在后台被系统杀死。&lt;/p&gt;

&lt;p&gt;许多iOS设备都包含高分辨率显示器，因此您的应用应支持多种显示屏尺寸和分辨率&lt;/p&gt;

&lt;h4 id=&quot;实现渲染引擎&quot;&gt;实现渲染引擎&lt;/h4&gt;

&lt;p&gt;设计OpenGL ES绘图代码有许多可能的策略，其全部细节超出了本文档的范围。渲染引擎设计的许多方面对于OpenGL和OpenGL ES的所有实现都是通用的。&lt;/p&gt;

&lt;h4 id=&quot;调试和分析&quot;&gt;调试和分析&lt;/h4&gt;

&lt;p&gt;Xcode和Instruments提供了许多工具来跟踪渲染问题并分析应用程序中的OpenGL ES性能。&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">本文翻译自苹果官方文档OpenGL ES Programming Guide</summary></entry><entry><title type="html">OpenGL初识</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL/" rel="alternate" type="text/html" title="OpenGL初识" /><published>2018-03-24T20:00:00+08:00</published><updated>2018-03-24T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/24/OpenGL/">&lt;h4 id=&quot;什么是opengl&quot;&gt;什么是OpenGL&lt;/h4&gt;

&lt;p&gt;OpenGL（全写Open Graphics Library）是指定义了一个跨编程语言、跨平台的编程接口规格的专业的图形程序接口。它用于三维图像（二维的亦可），是一个功能强大，调用方便的底层图形库。&lt;/p&gt;

&lt;p&gt;OpenGL™ 是行业领域中最为广泛接纳的 2D/3D 图形 API，其自诞生至今已催生了各种计算机平台及设备上的数千优秀应用程序。OpenGL™ 是独立于视窗操作系统或其它操作系统的，亦是网络透明的。在包含CAD、内容创作、能源、娱乐、游戏开发、制造业、制药业及虚拟现实等行业领域中，OpenGL™ 帮助程序员实现在 PC、工作站、超级计算机等硬件设备上的高性能、极具冲击力的高视觉表现力图形处理软件的开发。&lt;/p&gt;

&lt;h4 id=&quot;opengl主要功能是什么&quot;&gt;OpenGL主要功能是什么？&lt;/h4&gt;

&lt;p&gt;OpenGL是一个开放的三维图形软件包，它独立于窗口系统和操作系统，以它为基础开发的应用程序可以十分方便地在各种平台间移植；OpenGL可以与Visual C++紧密接口，便于实现机械手的有关计算和图形算法，可保证算法的正确性和可靠性；OpenGL使用简便，效率高。它具有七大功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、建模：OpenGL图形库除了提供基本的点、线、多边形的绘制函数外，还提供了复杂的三维物体（球、锥、多面体、茶壶等）以及复杂曲线和曲面绘制函数。&lt;/li&gt;
  &lt;li&gt;2、变换：OpenGL图形库的变换包括基本变换和投影变换。基本变换有平移、旋转、缩放、镜像四种变换，投影变换有平行投影（又称正射投影）和透视投 影两种变换。其变换方法有利于减少算法的运行时间，提高三维图形的显示速度。&lt;/li&gt;
  &lt;li&gt;3、颜色模式设置：OpenGL颜色模式有两种，即RGBA模式和颜色索引（Color Index）。&lt;/li&gt;
  &lt;li&gt;4、光照和材质设置：OpenGL光有自发光（Emitted Light）、环境光（Ambient Light）、漫反射光（Diffuse Light）和高光（Specular Light）。材质是用光反射率来表示。场景（Scene）中物体最终反映到人眼的颜色是光的红绿蓝分量与材质红绿蓝分量的反射率相乘后形成的颜色。&lt;/li&gt;
  &lt;li&gt;5、纹理映射（Texture Mapping）。利用OpenGL纹理映射功能可以十分逼真地表达物体表面细节。&lt;/li&gt;
  &lt;li&gt;6、位图显示和图象增强图象功能除了基本的拷贝和像素读写外，还提供融合（Blending）、抗锯齿（反走样）（Antialiasing）和雾（fog）的特殊图象效果处理。以上三条可使被仿真物更具真实感，增强图形显示的效果。&lt;/li&gt;
  &lt;li&gt;7、双缓存动画（Double Buffering）双缓存即前台缓存和后台缓存，简言之，后台缓存计算场景、生成画面，前台缓存显示后台缓存已画好的画面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;opengl-es是什么&quot;&gt;OpenGL ES是什么？&lt;/h4&gt;

&lt;p&gt;OpenGL ES (OpenGL for Embedded Systems) 是 OpenGL 三维图形 API 的子集，针对手机、PDA和游戏主机等嵌入式设备而设计。该API由Khronos集团定义推广，Khronos是一个图形软硬件行业协会，该协会主要关注图形和多媒体方面的开放标准。&lt;/p&gt;

&lt;h4 id=&quot;opengl-vs-opencv&quot;&gt;OpenGL VS OpenCV&lt;/h4&gt;

&lt;p&gt;Open CV是 Open Source Computer Vision Library
Open GL是 Open Graphics Library
Open CV主要是提供图像处理和视频处理的基础算法库，还涉及一些机器学习的算法。比如你想实现视频的降噪、运动物体的跟踪、目标（比如人脸）的识别这些都是CV的领域
OpenGL则专注在Graphics，3D绘图。
其实两者的区别就是Computer Vision和Computer Graphics这两个学科之间的区别，前者专注于从采集到的视觉图像中获取信息，是用机器来理解图像；后者是用机器绘制合适的视觉图像给人看。(摘自知乎)&lt;/p&gt;

&lt;h3 id=&quot;二opengl的ios环境&quot;&gt;二、OpenGL的iOS环境&lt;/h3&gt;

&lt;p&gt;GLKit是苹果iOS 5引入的一个为简化OpenGL ES的使用的框架，它为OpenGL ES的使用提供了相关的类和函数，GLKit是Cocoa Touch以及多个其他的框架（包含UIKit）的一部分。而GLKView和GLKViewController类名字中的GLK前缀表明这些类是GLKit框架的一部分&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">什么是OpenGL</summary></entry><entry><title type="html">OpenCV学习简介</title><link href="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/11/OpenCV_1/" rel="alternate" type="text/html" title="OpenCV学习简介" /><published>2018-03-11T20:00:00+08:00</published><updated>2018-03-11T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/11/OpenCV_1</id><content type="html" xml:base="http://www.helloted.com/%E5%9F%BA%E7%A1%80/2018/03/11/OpenCV_1/">&lt;h3 id=&quot;一前言&quot;&gt;一、前言&lt;/h3&gt;

&lt;h4 id=&quot;什么是opencv&quot;&gt;什么是OpenCV&lt;/h4&gt;

&lt;p&gt;OpenCV 是一个开源的计算机视觉库，&lt;a href=&quot;https://opencv.org/&quot;&gt;项目主页&lt;/a&gt;，采用C/C++语言编写，还提供了Python,Ruby，MATLAB等语言的接口。OpenCV的一个目标是构建一个简单易用的计算机视觉框架，以帮助开发人员更便捷地设计更复杂的计算机视觉相关应用程序。因为计算机视觉和机器学习密切相关，所以OpenCV还提供了MLL(Machine Learning Library)机器学习库。&lt;/p&gt;

&lt;h4 id=&quot;什么是计算机视觉&quot;&gt;什么是计算机视觉&lt;/h4&gt;

&lt;p&gt;计算机视觉是将来自静止图像或视频的数据转换成一个决策或者一种新的表达方式的过程，所有的这些装换都是为了达到某个目标。&lt;/p&gt;

&lt;p&gt;人脑将视觉信号划分如很多个通道，将各种不同的信息输入你的大脑。你的大脑有一个关注系统，会根据任务识别出图像的重要部分，并做重点分析，而其他部分则分析得较少，从而进行识别。&lt;/p&gt;

&lt;p&gt;在 计算机视觉系统中，计算机接收到的是来自摄像机或者磁盘文件的一个数值决战。一般来说，没有内置的模式识别系统，没有自动控制的对焦和光圈，没有多年的经验积累，视觉系统通常很低级。&lt;/p&gt;

&lt;h3 id=&quot;一mac配置opencv&quot;&gt;一、Mac配置OpenCV&lt;/h3&gt;

&lt;p&gt;1、下载OpenCV源码，&lt;a href=&quot;https://opencv.org/releases.html&quot;&gt;地址&lt;/a&gt;，可以看到有Windows，iOS，Android版本的下载，没有针对MacOS的需要我们自己去编译，下载Sources源码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_5/01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、安装CMake，用Homebrew安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、用CMake编译OpenCV&lt;/p&gt;

&lt;p&gt;在解压后的opencv文件夹内，新建一个文件夹release，并且cd进入，分别执行以下的命令行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake -G &quot;Unix Makefiles&quot; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_5/02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4、测试使用OpenCV&lt;/p&gt;

&lt;p&gt;建立一个文件夹，里面放入三个文件&lt;/p&gt;

&lt;p&gt;a.png&lt;/p&gt;

&lt;p&gt;DisplayImage.cpp&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;opencv2/opencv.hpp&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No image data &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namedWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Display Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINDOW_AUTOSIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Display Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;waitKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CMakeLists.txt&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake_minimum_required(VERSION 2.8)

//show 项目
project( show )
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
add_executable( show main.cpp )
target_link_libraries( show ${OpenCV_LIBS} )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在文件夹内执行命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake .
make
./show a.png
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以把图片a打开来&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_5/03.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>Ted</name></author><category term="基础" /><summary type="html">一、前言</summary></entry><entry><title type="html">Tomcat+Servlet</title><link href="http://www.helloted.com/java/2018/02/05/Java-Tomcat/" rel="alternate" type="text/html" title="Tomcat+Servlet" /><published>2018-02-05T20:00:00+08:00</published><updated>2018-02-05T20:00:00+08:00</updated><id>http://www.helloted.com/java/2018/02/05/Java-Tomcat</id><content type="html" xml:base="http://www.helloted.com/java/2018/02/05/Java-Tomcat/">&lt;h3 id=&quot;一安装tomcat&quot;&gt;一、安装Tomcat&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Tomcat&lt;/em&gt;是应用(java)服务器,它只是一个servlet容器.&lt;/p&gt;

&lt;p&gt;1、先去Tomcat官网下载&lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/12.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、将Zip文件解压并且重命名文件夹到一个目录，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Tomcat/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、使用命令行修改文件夹的权限&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod 755 /Library/Tomcat/bin/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、cd到&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Tomcat/bin&lt;/code&gt;文件夹下，启动Tomcat&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/14.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、打开浏览器,输入&lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;，出现下面的页面说明启动成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/13.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、关闭命令是&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh shutdown.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;二新建网页服务器&quot;&gt;二、新建网页服务器&lt;/h3&gt;

&lt;p&gt;使用intellij idea这个IDE来搭建&lt;/p&gt;

&lt;p&gt;1、新建项目，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Java Enterprise&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Web Application&lt;/code&gt;然后next&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、输入项目名称已经存放目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/16.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、完成进入项目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/17.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中index.jsp是默认的首页网页，此时点击右上角的Tomcat开启服务器，会自动打开一个网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/18.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看看网页源代码&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;$Title$&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  $END$
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实就是index.jsp的代码，说明此时访问的是index.jsp的页面。下面我们来新建新的页面&lt;/p&gt;

&lt;p&gt;4、添加web.xml.&lt;/p&gt;

&lt;p&gt;File-&amp;gt;Project Structure&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/19.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在项目中会有一个新的文件夹，里面就有web.xml文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/20.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、新建一个Servlet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/21.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名为first&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/22.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时web.xml会自动配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/23.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、编写Servlet&lt;/p&gt;

&lt;p&gt;在fisrt.java的doGet里添加代码如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is First Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7、配置访问路径&lt;/p&gt;

&lt;p&gt;在web.xml里添加以下代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;first&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/first&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/24.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8、点击右上角的tomcat运行，访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/first&lt;/code&gt;可以看到第一个网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/25.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>Ted</name></author><category term="Java" /><summary type="html">一、安装Tomcat</summary></entry><entry><title type="html">View编程指南(四)</title><link href="http://www.helloted.com/ios/2018/01/15/View_4/" rel="alternate" type="text/html" title="View编程指南(四)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_4</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_4/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;五动画&quot;&gt;五、动画&lt;/h3&gt;

&lt;p&gt;动画在用户界面的不同状态之间提供流畅的视觉转换。 在iOS中，动画广泛用于重新定位view，更改大小，将其从view层次结构中移除，并将其隐藏起来。 您可以使用动画将反馈传达给用户或实现有趣的视觉效果。&lt;/p&gt;

&lt;p&gt;在iOS中，创建复杂的动画不需要您编写任何绘图代码。 本章介绍的所有动画技术都使用Core Animation提供的内置支持。 您只需触发动画并让Core Animation处理单个帧的渲染。 这使得创建复杂的动画非常容易，只需要几行代码。&lt;/p&gt;

&lt;h4 id=&quot;哪些可以有动画&quot;&gt;哪些可以有动画？&lt;/h4&gt;

&lt;p&gt;UIKit和Core Animation都支持动画，但每种技术提供的支持水平都不相同。 在UIKit中，动画是使用UIView对象执行的。 view支持一组涵盖许多常见任务的基本动画。 例如，您可以对view的属性进行动画更改，或使用过渡动画将一组view替换为另一组view&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Property&lt;/th&gt;
      &lt;th&gt;Changes you can make&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改View的位置和大小 (如果View的 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; 没有包含identity transform, 那么取而代之，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; .)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改 view’s size.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改相对于父View坐标系统的中心点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改相对于其中心点的移动缩放旋转. 这是2D层面的 (如果要3D层面需要使用 Core Animation.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改 view的透明度.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改View的背景颜色&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentStretch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来使内容更好地适应填充&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;动画view转换是一种让您对view hierarchy进行更改的方式，而不是view controller提供的view hierarchy。虽然您应该使用view controller来管理简洁的view hierarchy，但有时您可能需要替换全部或部分view hierarchy。在这些情况下，您可以使用基于view的转换来动画添加和删除view。
在你想要执行更复杂的动画的时候，或者UIView类不支持的动画中，你可以使用Core Animation和view的底层layer来创建动画。由于view和layer对象错综复杂地链接在一起，因此对view layer的更改会影响view本身。使用核心动画，您可以为您的view的layer设置以下类型的更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;layer的大小和位置&lt;/li&gt;
  &lt;li&gt;执行转换时使用的中心点&lt;/li&gt;
  &lt;li&gt;转换到三维空间中的layer或其sublayer&lt;/li&gt;
  &lt;li&gt;从layer分层结构中添加或删除layer&lt;/li&gt;
  &lt;li&gt;相对于其他兄弟layer的Z层顺序&lt;/li&gt;
  &lt;li&gt;layer的shadow&lt;/li&gt;
  &lt;li&gt;layer的border（包括layer的边角是否圆整）&lt;/li&gt;
  &lt;li&gt;在调整大小操作期间延伸的layer部分&lt;/li&gt;
  &lt;li&gt;layer的不透明度&lt;/li&gt;
  &lt;li&gt;位于layer边界之外的子layer的剪切行为&lt;/li&gt;
  &lt;li&gt;layer的当前内容&lt;/li&gt;
  &lt;li&gt;layer的栅格化行为&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，如果你的View用了一个自定义的layer对象，也就是这个对象没有与View相关联，你必须用Core Animation来修改它&lt;/p&gt;

&lt;h4 id=&quot;用block动画&quot;&gt;用Block动画&lt;/h4&gt;

&lt;p&gt;有几种基于block的方法为动画block提供不同级别的配置。 这些方法是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:animations:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:animations:completion:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:delay:options:animations:completion:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于这些是类方法，因此您使用它们创建的动画块不会绑定到单个view。 因此，您可以使用这些方法创建一个包含对多个view进行更改的动画&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;firstView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;secondView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;前一个例子中的动画只运行一次，使用一个ease-in，ease-out的动画曲线。 如果要更改默认的动画参数，则必须使用&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration：delay：options：animations：completion：&lt;/code&gt;方法来执行动画。 该方法可以让您自定义以下动画参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开始动画之前使用的延迟&lt;/li&gt;
  &lt;li&gt;在动画中使用的时间曲线的类型&lt;/li&gt;
  &lt;li&gt;动画应该重复的次数&lt;/li&gt;
  &lt;li&gt;当动画到达最后时，动画是否会自动反转&lt;/li&gt;
  &lt;li&gt;触摸事件是否在动画进行过程中传递到view&lt;/li&gt;
  &lt;li&gt;动画是否应该中断任何正在进行的动画，或者在开始之前等到动画完成&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showHideView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fade out the view right away
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseIn&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;thirdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Wait one second and then fade in the view
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;thirdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重要提示：当涉及该属性的动画已在进行中时，更改属性的值不会停止当前动画。 而是当前的动画继续，新值会有动画。&lt;/p&gt;

&lt;p&gt;如果您的应用程序在iOS 3.2及更早版本中运行，则必须使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;beginAnimations：context：&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;commitAnimations&lt;/code&gt;类方法来定义您的动画块。iOS4之后则应该用block动画&lt;/p&gt;

&lt;h4 id=&quot;动画block嵌套&quot;&gt;动画block嵌套&lt;/h4&gt;

&lt;p&gt;您可以通过嵌套其他动画blcok来为动画block的某些部分分配不同的时序和配置选项。 顾名思义，嵌套动画block是在现有动画block内创建的新动画block。 嵌套动画与任何父动画同时启动，但运行（大部分）与他们自己的配置选项。 默认情况下，嵌套动画会继承父级的持续时间和动画曲线，但即使这些选项可以根据需要被覆盖&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;aView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
            &lt;span class=&quot;c1&quot;&gt;// Create a nested animation that has a different
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// duration, timing curve, and configuration.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                 &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionOverrideInheritedCurve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionOverrideInheritedDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionRepeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionAutoreverse&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAnimationRepeatCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;anotherView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这种情况下，两个view正在被淡化为完全透明，但是另一个view对象的透明度在最终隐藏之前来回地多次改变。 在嵌套动画块中使用的UIViewAnimationOptionOverrideInheritedCurve和UIViewAnimationOptionOverrideInheritedDuration键允许为第二个动画修改第一个动画的曲线和持续时间值。 如果这些键不存在，则将使用外部动画块的持续时间和曲线。&lt;/p&gt;

&lt;h4 id=&quot;在view之间创建动画转换&quot;&gt;在View之间创建动画转换&lt;/h4&gt;

&lt;p&gt;view转换可帮助您隐藏与在view层次结构中添加，删除，隐藏或显示view相关的突然更改。 您使用view transitions来实现以下类型的更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改现有view的可见subview。 当您想对现有view进行相对较小的更改时，通常会选择此选项。&lt;/li&gt;
  &lt;li&gt;用不同的view替换view层次结构中的一个view。 如果要替换跨越全部或大部分屏幕的view层次结构，通常选择此选项。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重要提示：view转换不应与view controller启动的转换相混淆，例如present view controller的呈现或将新view controller推到navigation堆栈上。 view转换仅影响view层次，而view - controller转换也改变活动view controller。 因此，对于view转换，如果你在初始化转换时保持活动，那么VC在转换结束时也是活动的&lt;/p&gt;

&lt;h4 id=&quot;修改view的subviews&quot;&gt;修改View的subviews&lt;/h4&gt;

&lt;p&gt;更改view的subview允许您对view进行适度更改。例如，您可以添加或删除subview以在两种不同状态之间切换superview。在动画完成时，显示相同的view，但其内容现在不同。&lt;/p&gt;

&lt;p&gt;在iOS 4和更高版本中，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionWithView：duration：options：animations：completion：&lt;/code&gt;方法为view启动过渡动画。在传递给此方法的动画块中，通常动画的唯一更改是与显示，隐藏，添加或删除子view相关的更改。将动画限制为该集合允许view创建view之前和之后版本的快照图像，并且在两个图像之间创建动画，这更高效。但是，如果您需要动画其他更改，则可以在调用方法时包含&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewAnimationOptionAllowAnimatedContent&lt;/code&gt;选项。包含该选项可防止view创建快照，并直接动画化所有更改。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;displayNewPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionWithView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionCurlUp&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Save the old text and then swap the views.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveNotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
            &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换一个View&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggleMainViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionFromView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;duration:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionFlipFromRight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionFlipFromLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;view和layer动画一起&quot;&gt;View和layer动画一起&lt;/h4&gt;

&lt;p&gt;应用程序可以根据需要自由混合基于view和基于layer的动画代码，但配置动画参数的过程取决于谁拥有layer。 更改view拥有的层与更改view本身相同，并且应用于layer属性的任何动画都尊重当前基于view的动画块的动画参数。 你自己创建的layer也是如此。 自定义layer对象会忽略基于view的动画块参数，而是使用默认的“核心动画”参数。&lt;/p&gt;

&lt;p&gt;如果要为所创建的layer自定义动画参数，则必须直接使用Core Animation。 通常，使用Core Animation动画化layer包括创建一个CABasicAnimation对象或CAAnimation的其他具体子类。 然后，您将该动画添加到相应的layer。 您可以从基于view的动画块内部或外部应用动画。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Animate the first half of the view rotation.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;c1&quot;&gt;// Rotate the embedded CALayer in the opposite direction.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CABasicAnimation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationWithKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//CACurrentMediaTime() + 1;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAValueFunction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAValueFunctionRotateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAMediaTimingFunction&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;functionWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;layerAnimation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Now do the second half of the view rotation.
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;359&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry></feed>