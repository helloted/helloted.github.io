<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://www.helloted.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.helloted.com/" rel="alternate" type="text/html" /><updated>2018-02-26T15:29:13+08:00</updated><id>http://www.helloted.com/</id><title type="html">Helloted Blog</title><subtitle>Write your site description here. It will be used as your sites meta description as well!</subtitle><entry><title type="html">Tomcat+Servlet</title><link href="http://www.helloted.com/java/2018/02/05/Java-Tomcat/" rel="alternate" type="text/html" title="Tomcat+Servlet" /><published>2018-02-05T20:00:00+08:00</published><updated>2018-02-05T20:00:00+08:00</updated><id>http://www.helloted.com/java/2018/02/05/Java-Tomcat</id><content type="html" xml:base="http://www.helloted.com/java/2018/02/05/Java-Tomcat/">&lt;h3 id=&quot;一安装tomcat&quot;&gt;一、安装Tomcat&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Tomcat&lt;/em&gt;是应用(java)服务器,它只是一个servlet容器.&lt;/p&gt;

&lt;p&gt;1、先去Tomcat官网下载&lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/12.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、将Zip文件解压并且重命名文件夹到一个目录，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Tomcat/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、使用命令行修改文件夹的权限&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod 755 /Library/Tomcat/bin/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、cd到&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Tomcat/bin&lt;/code&gt;文件夹下，启动Tomcat&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/14.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、打开浏览器,输入&lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;，出现下面的页面说明启动成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/13.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、关闭命令是&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh shutdown.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;二新建网页服务器&quot;&gt;二、新建网页服务器&lt;/h3&gt;

&lt;p&gt;使用intellij idea这个IDE来搭建&lt;/p&gt;

&lt;p&gt;1、新建项目，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Java Enterprise&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Web Application&lt;/code&gt;然后next&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、输入项目名称已经存放目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/16.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、完成进入项目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/17.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中index.jsp是默认的首页网页，此时点击右上角的Tomcat开启服务器，会自动打开一个网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/18.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看看网页源代码&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;$Title$&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  $END$
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实就是index.jsp的代码，说明此时访问的是index.jsp的页面。下面我们来新建新的页面&lt;/p&gt;

&lt;p&gt;4、添加web.xml.&lt;/p&gt;

&lt;p&gt;File-&amp;gt;Project Structure&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/19.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在项目中会有一个新的文件夹，里面就有web.xml文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/20.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、新建一个Servlet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/21.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名为first&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/22.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时web.xml会自动配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/23.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、编写Servlet&lt;/p&gt;

&lt;p&gt;在fisrt.java的doGet里添加代码如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is First Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7、配置访问路径&lt;/p&gt;

&lt;p&gt;在web.xml里添加以下代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;first&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/first&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/24.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8、点击右上角的tomcat运行，访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/first&lt;/code&gt;可以看到第一个网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_4/25.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>Ted</name></author><category term="Java" /><summary type="html">一、安装Tomcat</summary></entry><entry><title type="html">View编程指南(四)</title><link href="http://www.helloted.com/ios/2018/01/15/View_4/" rel="alternate" type="text/html" title="View编程指南(四)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_4</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_4/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;五动画&quot;&gt;五、动画&lt;/h3&gt;

&lt;p&gt;动画在用户界面的不同状态之间提供流畅的视觉转换。 在iOS中，动画广泛用于重新定位view，更改大小，将其从view层次结构中移除，并将其隐藏起来。 您可以使用动画将反馈传达给用户或实现有趣的视觉效果。&lt;/p&gt;

&lt;p&gt;在iOS中，创建复杂的动画不需要您编写任何绘图代码。 本章介绍的所有动画技术都使用Core Animation提供的内置支持。 您只需触发动画并让Core Animation处理单个帧的渲染。 这使得创建复杂的动画非常容易，只需要几行代码。&lt;/p&gt;

&lt;h4 id=&quot;哪些可以有动画&quot;&gt;哪些可以有动画？&lt;/h4&gt;

&lt;p&gt;UIKit和Core Animation都支持动画，但每种技术提供的支持水平都不相同。 在UIKit中，动画是使用UIView对象执行的。 view支持一组涵盖许多常见任务的基本动画。 例如，您可以对view的属性进行动画更改，或使用过渡动画将一组view替换为另一组view&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Property&lt;/th&gt;
      &lt;th&gt;Changes you can make&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改View的位置和大小 (如果View的 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; 没有包含identity transform, 那么取而代之，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; .)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改 view’s size.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改相对于父View坐标系统的中心点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改相对于其中心点的移动缩放旋转. 这是2D层面的 (如果要3D层面需要使用 Core Animation.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改 view的透明度.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来修改View的背景颜色&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentStretch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改这个属性来使内容更好地适应填充&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;动画view转换是一种让您对view hierarchy进行更改的方式，而不是view controller提供的view hierarchy。虽然您应该使用view controller来管理简洁的view hierarchy，但有时您可能需要替换全部或部分view hierarchy。在这些情况下，您可以使用基于view的转换来动画添加和删除view。
在你想要执行更复杂的动画的时候，或者UIView类不支持的动画中，你可以使用Core Animation和view的底层layer来创建动画。由于view和layer对象错综复杂地链接在一起，因此对view layer的更改会影响view本身。使用核心动画，您可以为您的view的layer设置以下类型的更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;layer的大小和位置&lt;/li&gt;
  &lt;li&gt;执行转换时使用的中心点&lt;/li&gt;
  &lt;li&gt;转换到三维空间中的layer或其sublayer&lt;/li&gt;
  &lt;li&gt;从layer分层结构中添加或删除layer&lt;/li&gt;
  &lt;li&gt;相对于其他兄弟layer的Z层顺序&lt;/li&gt;
  &lt;li&gt;layer的shadow&lt;/li&gt;
  &lt;li&gt;layer的border（包括layer的边角是否圆整）&lt;/li&gt;
  &lt;li&gt;在调整大小操作期间延伸的layer部分&lt;/li&gt;
  &lt;li&gt;layer的不透明度&lt;/li&gt;
  &lt;li&gt;位于layer边界之外的子layer的剪切行为&lt;/li&gt;
  &lt;li&gt;layer的当前内容&lt;/li&gt;
  &lt;li&gt;layer的栅格化行为&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，如果你的View用了一个自定义的layer对象，也就是这个对象没有与View相关联，你必须用Core Animation来修改它&lt;/p&gt;

&lt;h4 id=&quot;用block动画&quot;&gt;用Block动画&lt;/h4&gt;

&lt;p&gt;有几种基于block的方法为动画block提供不同级别的配置。 这些方法是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:animations:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:animations:completion:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration:delay:options:animations:completion:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于这些是类方法，因此您使用它们创建的动画块不会绑定到单个view。 因此，您可以使用这些方法创建一个包含对多个view进行更改的动画&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;firstView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;secondView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;前一个例子中的动画只运行一次，使用一个ease-in，ease-out的动画曲线。 如果要更改默认的动画参数，则必须使用&lt;code class=&quot;highlighter-rouge&quot;&gt;animateWithDuration：delay：options：animations：completion：&lt;/code&gt;方法来执行动画。 该方法可以让您自定义以下动画参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开始动画之前使用的延迟&lt;/li&gt;
  &lt;li&gt;在动画中使用的时间曲线的类型&lt;/li&gt;
  &lt;li&gt;动画应该重复的次数&lt;/li&gt;
  &lt;li&gt;当动画到达最后时，动画是否会自动反转&lt;/li&gt;
  &lt;li&gt;触摸事件是否在动画进行过程中传递到view&lt;/li&gt;
  &lt;li&gt;动画是否应该中断任何正在进行的动画，或者在开始之前等到动画完成&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showHideView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fade out the view right away
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseIn&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;thirdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Wait one second and then fade in the view
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;thirdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重要提示：当涉及该属性的动画已在进行中时，更改属性的值不会停止当前动画。 而是当前的动画继续，新值会有动画。&lt;/p&gt;

&lt;p&gt;如果您的应用程序在iOS 3.2及更早版本中运行，则必须使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;beginAnimations：context：&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;commitAnimations&lt;/code&gt;类方法来定义您的动画块。iOS4之后则应该用block动画&lt;/p&gt;

&lt;h4 id=&quot;动画block嵌套&quot;&gt;动画block嵌套&lt;/h4&gt;

&lt;p&gt;您可以通过嵌套其他动画blcok来为动画block的某些部分分配不同的时序和配置选项。 顾名思义，嵌套动画block是在现有动画block内创建的新动画block。 嵌套动画与任何父动画同时启动，但运行（大部分）与他们自己的配置选项。 默认情况下，嵌套动画会继承父级的持续时间和动画曲线，但即使这些选项可以根据需要被覆盖&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;aView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
            &lt;span class=&quot;c1&quot;&gt;// Create a nested animation that has a different
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// duration, timing curve, and configuration.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                 &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionOverrideInheritedCurve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionOverrideInheritedDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionRepeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionAutoreverse&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAnimationRepeatCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;anotherView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这种情况下，两个view正在被淡化为完全透明，但是另一个view对象的透明度在最终隐藏之前来回地多次改变。 在嵌套动画块中使用的UIViewAnimationOptionOverrideInheritedCurve和UIViewAnimationOptionOverrideInheritedDuration键允许为第二个动画修改第一个动画的曲线和持续时间值。 如果这些键不存在，则将使用外部动画块的持续时间和曲线。&lt;/p&gt;

&lt;h4 id=&quot;在view之间创建动画转换&quot;&gt;在View之间创建动画转换&lt;/h4&gt;

&lt;p&gt;view转换可帮助您隐藏与在view层次结构中添加，删除，隐藏或显示view相关的突然更改。 您使用view transitions来实现以下类型的更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改现有view的可见subview。 当您想对现有view进行相对较小的更改时，通常会选择此选项。&lt;/li&gt;
  &lt;li&gt;用不同的view替换view层次结构中的一个view。 如果要替换跨越全部或大部分屏幕的view层次结构，通常选择此选项。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重要提示：view转换不应与view controller启动的转换相混淆，例如present view controller的呈现或将新view controller推到navigation堆栈上。 view转换仅影响view层次，而view - controller转换也改变活动view controller。 因此，对于view转换，如果你在初始化转换时保持活动，那么VC在转换结束时也是活动的&lt;/p&gt;

&lt;h4 id=&quot;修改view的subviews&quot;&gt;修改View的subviews&lt;/h4&gt;

&lt;p&gt;更改view的subview允许您对view进行适度更改。例如，您可以添加或删除subview以在两种不同状态之间切换superview。在动画完成时，显示相同的view，但其内容现在不同。&lt;/p&gt;

&lt;p&gt;在iOS 4和更高版本中，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionWithView：duration：options：animations：completion：&lt;/code&gt;方法为view启动过渡动画。在传递给此方法的动画块中，通常动画的唯一更改是与显示，隐藏，添加或删除子view相关的更改。将动画限制为该集合允许view创建view之前和之后版本的快照图像，并且在两个图像之间创建动画，这更高效。但是，如果您需要动画其他更改，则可以在调用方法时包含&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewAnimationOptionAllowAnimatedContent&lt;/code&gt;选项。包含该选项可防止view创建快照，并直接动画化所有更改。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;displayNewPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionWithView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionCurlUp&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;animations:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Save the old text and then swap the views.
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveNotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
            &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;currentTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swapTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换一个View&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggleMainViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionFromView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;duration:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionFlipFromRight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionTransitionFlipFromLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayingPrimary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;view和layer动画一起&quot;&gt;View和layer动画一起&lt;/h4&gt;

&lt;p&gt;应用程序可以根据需要自由混合基于view和基于layer的动画代码，但配置动画参数的过程取决于谁拥有layer。 更改view拥有的层与更改view本身相同，并且应用于layer属性的任何动画都尊重当前基于view的动画块的动画参数。 你自己创建的layer也是如此。 自定义layer对象会忽略基于view的动画块参数，而是使用默认的“核心动画”参数。&lt;/p&gt;

&lt;p&gt;如果要为所创建的layer自定义动画参数，则必须直接使用Core Animation。 通常，使用Core Animation动画化layer包括创建一个CABasicAnimation对象或CAAnimation的其他具体子类。 然后，您将该动画添加到相应的layer。 您可以从基于view的动画块内部或外部应用动画。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Animate the first half of the view rotation.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;c1&quot;&gt;// Rotate the embedded CALayer in the opposite direction.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CABasicAnimation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationWithKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//CACurrentMediaTime() + 1;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAValueFunction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAValueFunctionRotateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAMediaTimingFunction&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;functionWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layerAnimation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;layerAnimation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Now do the second half of the view rotation.
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewAnimationOptionCurveLinear&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;359&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">View编程指南(三)</title><link href="http://www.helloted.com/ios/2018/01/15/View_3/" rel="alternate" type="text/html" title="View编程指南(三)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_3</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_3/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;四views&quot;&gt;四、Views&lt;/h3&gt;

&lt;p&gt;由于View对象是应用程序与用户交互的主要方式，因此它们有许多责任。 这里仅仅是少数：&lt;/p&gt;

&lt;p&gt;布局和subview管理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view定义了与其父view相关的默认调整大小行为。&lt;/li&gt;
  &lt;li&gt;一个view可以管理subview列表。&lt;/li&gt;
  &lt;li&gt;view可以根据需要重写subview的大小和位置。&lt;/li&gt;
  &lt;li&gt;view可以将其坐标系中的点转换为其他view或window的坐标系。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;绘画和动画&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view在其矩形区域绘制内容。&lt;/li&gt;
  &lt;li&gt;一些view属性可以动画变成新的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事件处理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view可以接收触摸事件。&lt;/li&gt;
  &lt;li&gt;view参与响应者链。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;创建view&quot;&gt;创建View&lt;/h4&gt;

&lt;p&gt;创建View最简单的方法是使用Interface Builder以图形方式进行组装。从Interface Builder中，您可以将View添加到界面，将这些view排列到层次结构中，配置每个view的设置，并将与view相关的行为连接到您的代码。由于Interface Builder使用实时view对象（即view类的实际实例），因此您在设计时看到的是运行时获得的内容。然后将这些活动对象保存在一个nib文件中，这是一个资源文件，用于保留对象的状态和配置。&lt;/p&gt;

&lt;p&gt;您通常会创建nib文件，以便为应用程序的一个view controller存储整个view层次结构。 nib文件的顶层通常包含一个表示view controllerview的view对象。（view controller本身通常由文件的所有者对象来表示。）顶层view的大小应该适合目标设备，并且包含所有要呈现的其他view。使用nib文件仅存储view controllerview层次结构的一部分是很少见的。&lt;/p&gt;

&lt;p&gt;在view controller中使用nib文件时，只需使用nib文件信息初始化view controller即可。view controller在适当的时候处理view的加载和卸载。但是，如果您的nib文件未与view controller关联，则可以使用NSBundle或UINib对象手动加载nib文件内容，该对象使用nib文件中的数据来重构view对象。&lt;/p&gt;

&lt;p&gt;或者用代码创建&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;viewRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;设置view的属性&quot;&gt;设置View的属性&lt;/h4&gt;

&lt;p&gt;UIView类有几个声明的属性来控制View的外观和行为。 这些属性用于操纵View的大小和位置，View的透明度，背景颜色和渲染行为。 所有这些属性都具有适当的默认值，您可以根据需要稍后进行更改。您还可以使用“Inspector”窗口在Interface Builder中配置其中的许多属性。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;用处&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;opaque&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性影响view的不透明度。 alpha和hidden属性直接改变view的不透明度。opaque属性告诉系统如何合成view。 如果view的内容完全不透明，则将此属性设置为YES，因此不会显示任何底层view的内容。 将此属性设置为YES可消除不必要的合成操作，从而提高性能。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性会影响view的大小和位置。 center和frame属性表示view相对于superview的位置。 该frame还包括view的大小。 bounds属性定义了view在其自己的坐标系中的可见内容区域。transform属性用于以复杂的方式动画或移动整个view。 例如，您将使用变换来旋转或缩放view。 如果当前变换不是身份变换，则frame属性是不确定的，应该忽略。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizingMask&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizesSubviews&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性会影响view及其子view的自动调整大小行为。 autoresizingMask属性控制view如何响应其父view bounds中的更改。 autoresizesSubviews属性控制是否调整当前view的subview的大小。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentMode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;contentStretch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;contentScaleFactor&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性影响view内部内容的呈现行为。 contentMode和contentStretch属性确定在view的宽度或高度更改时如何处理内容。 contentScaleFactor属性仅在需要为高分辨率屏幕自定义view的绘制行为时使用。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gestureRecognizers&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;userInteractionEnabled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;multipleTouchEnabled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;exclusiveTouch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些属性会影响view处理触摸事件的方式。 gestureRecognizers属性包含附加到view的手势识别器。 其他属性控制view支持的触摸事件。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subviews&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect:&lt;/code&gt;method, &lt;code class=&quot;highlighter-rouge&quot;&gt;layer&lt;/code&gt;, (&lt;code class=&quot;highlighter-rouge&quot;&gt;layerClass&lt;/code&gt; method)&lt;/td&gt;
      &lt;td&gt;这些属性和方法可以帮助您管理view的实际内容。 对于简单的view，您可以设置背景颜色并添加一个或多个subviews。 subviews属性本身包含subview的只读列表，但有几种添加和重新排列subview的方法。 对于具有自定义绘图行为的view，您必须重写drawRect：方法。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;UIView类包含一个tag属性，您可以使用它来为各个view对象添加一个整数值。 您可以使用tag唯一地标识view层次结构中的view，并在运行时执行对这些view的搜索。（基于tag的搜索比自己迭代view层次更快。）tag属性的默认值为0。&lt;/p&gt;

&lt;p&gt;要搜索带tag的view，请使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWithTag：&lt;/code&gt;方法。 此方法执行接收器及其subview的深度优先搜索。 它不搜索superview或view层次结构的其他部分。 因此，从层次结构的root view调用此方法会搜索层次结构中的所有view，但是从特定的subview调用它只会搜索view的子集。&lt;/p&gt;

&lt;h4 id=&quot;创建和管理一个view-hierarchy&quot;&gt;创建和管理一个View Hierarchy&lt;/h4&gt;

&lt;p&gt;管理view层次结构是开发应用程序用户界面的关键部分。 您的view的组织影响您的应用程序的外观，以及您的应用程序如何响应更改和事件。 例如，view层次结构中的父子关系确定哪些对象可能处理特定的触摸事件。 同样，父子关系定义每个view如何响应界面方向的变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/16.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;添加和删除子view&quot;&gt;添加和删除子view&lt;/h4&gt;

&lt;p&gt;Interface Builder是构建view层次结构最方便的方式，因为您可以用图形方式组装view，查看view之间的关系，并确切了解在运行时将如何显示这些view。使用Interface Builder时，将结果view层次结构保存在一个nib文件中，在运行时加载，因为需要相应的view。&lt;/p&gt;

&lt;p&gt;如果您希望以编程方式创建view，请创建并初始化它们，然后使用以下方法将它们排列为层次结构：&lt;/p&gt;

&lt;p&gt;要将subview添加到superview，请调用superview的&lt;code class=&quot;highlighter-rouge&quot;&gt;addSubview：&lt;/code&gt;方法。此方法将subview添加到父级View的subviews列表的末尾。
要在superview的subviews中间插入subview，请调用superview的任何&lt;code class=&quot;highlighter-rouge&quot;&gt;insertSubview：...&lt;/code&gt;方法。在list中间插入一个subview可视化地将该view放置在列表中稍后的任何view的后面。
要对其superview的现有subviews进行重新排序，请调用superview的&lt;code class=&quot;highlighter-rouge&quot;&gt;bringSubviewToFront：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;sendSubviewToBack：&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;exchangeSubviewAtIndex：&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;withSubviewAtIndex：&lt;/code&gt;方法。使用这些方法比删除subview并重新插入它们要快。
要从其superview移除subview，请调用subview的removeFromSuperview方法（而不是superview）。
当subview添加到其父项时，subview的当前frame矩形表示它在superview内的初始位置。frame位于其superview的可见边界之外的subview在默认情况下不会被剪切。如果您希望将subview剪裁到superview的边界，则必须明确地将superview的clipsToBounds属性设置为YES。&lt;/p&gt;

&lt;p&gt;一个地方你可以添加subview到view层次结构是在VC的loadView或viewDidLoad方法。如果以编程方式构建view，则将view创建代码放置在view controller的loadView方法中。无论是以编程方式创建view还是从nib文件加载view，都可以在viewDidLoad方法中包含其他view配置代码。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;TransitionsTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// create the container view which we will use for transition animation (centered horizontally)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                                        &lt;span class=&quot;n&quot;&gt;kTopPlacement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// The container view can represent the images for accessibility.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setIsAccessibilityElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAccessibilityLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;ImagesTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// create the initial image view
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImageView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;scene1.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// create the alternate image view (to transition between)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kImageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipToView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImageView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autorelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipToView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;scene2.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重要提示：Superviews自动retain subviews，所以在嵌入subview之后，释放该subview是安全的。 实际上，建议这样做是因为它会阻止您的应用程序保留一次太多的view，并在稍后导致内存泄漏。 请记住，如果您从其supview中删除subview并打算重用它，则必须再次保留该subview。 &lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromSuperview&lt;/code&gt;方法在移除之前autorelease一个subview。 如果在下一个事件循环周期之前不retain view，view将被released。&lt;/p&gt;

&lt;p&gt;将subview添加到另一个View时，UIKit会通知superview和subview。 如果实现自定义view，则可以通过重写&lt;code class=&quot;highlighter-rouge&quot;&gt;willMoveToSuperview：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;willMoveToWindow：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;willRemoveSubview：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;didAddSubview：&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;didMoveToSuperview&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;didMoveToWindow&lt;/code&gt;方法中的一个或多个拦截这些通知。 您可以使用这些通知来更新与您的view层次结构相关的任何状态信息或执行其他任务。&lt;/p&gt;

&lt;p&gt;创建view层次结构后，可以使用superivew和subview属性以编程方式导航它。 每个view的window属性包含当前显示view的window（如果有的话）。 由于view层次结构中的root view没有父view，因此其superview属性设置为nil。 对于当前在屏幕上的view，window对象是view层次结构的root view。&lt;/p&gt;

&lt;h4 id=&quot;隐藏view&quot;&gt;隐藏View&lt;/h4&gt;

&lt;p&gt;要以可视方式隐藏view，可以将其hidden属性设置为YES，也可以将其alpha属性更改为0.0。隐藏的view不会从系统接收触摸事件。但是，隐藏的view会参与与view层次关联的自动调整和其他布局操作。因此，隐藏view通常是从view层次结构中删除view的一种方便的替代方法，特别是如果您计划在不久的将来再次显示view时。&lt;/p&gt;

&lt;p&gt;重要提示：如果您隐藏当前是第一响应者的view，则该view不会自动退出其第一响应者状态。针对第一响应者的事件仍然传递到隐藏的view。为了防止这种情况发生，当您隐藏它时，您应该强制您的view退出第一个响应者状态。&lt;/p&gt;

&lt;p&gt;如果要为view的可视化转换为隐藏（或相反），您必须使用view的alpha属性进行动画处理。隐藏的属性不是一个动画属性，所以你对它做出的任何改变立即生效。&lt;/p&gt;

&lt;h4 id=&quot;定位view-hierarchy中的view&quot;&gt;定位View Hierarchy中的view&lt;/h4&gt;

&lt;p&gt;在view层次结构中定位view有两种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;将指针存储在适当位置的任何相关view中，例如拥有view的VC中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为每个view的tag属性分配一个唯一的整数，并使用viewWithTag：方法来定位它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;存储对相关view的引用是定位view的最常见方法，并使访问这些view非常方便。如果使用Interface Builder创建view，则可以使用outlet将nib文件中的对象连接到另一个对象。对于以编程方式创建的view，可以在私有成员变量中存储对这些view的引用。无论您使用outlets还是私有成员变量，您都有责任根据需要保留view，然后将其释放。确保对象被保留和正确释放的最好方法是使用声明的属性。&lt;/p&gt;

&lt;p&gt;tag是减少硬编码依赖性并支持更加动态和灵活的解决方案的有用方法。你可以使用它的tag来定位它而不是存储一个指向view的指针。tag也是引用view的更持久的方式。例如，如果要保存应用程序中当前可见的view列表，则应将每个可见view的tag写入文件。这比归档实际的view对象更简单，特别是在只跟踪当前可见view的情况下。当您的应用程序随后被加载时，您将重新创建您的view并使用保存的tag列表来设置每个view的可见性，从而将您的view层次结构返回到之前的状态。&lt;/p&gt;

&lt;h4 id=&quot;移动缩放旋转view&quot;&gt;移动、缩放、旋转View&lt;/h4&gt;

&lt;p&gt;每个view都有一个关联的affine transform，可以用来移动，缩放或旋转view的内容。 view transform会改变view的最终渲染外观，通常用于实现滚动，动画或其他视觉效果。&lt;/p&gt;

&lt;p&gt;UIView的transform属性包含一个应用了转换的CGAffineTransform结构。 默认情况下，此属性设置为标记转换，不会修改view的外观。 您可以随时为此属性分配一个新的转换。 例如，要将view旋转45度，可以使用以下代码：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CGAffineTransform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将上述代码中的变换应用于view将围绕其中心点顺时针旋转。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/17.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将多个transform应用于view时，将这些transform添加到CGAffineTransform结构的顺序非常重要。 旋转view然后移动与先移动后旋转是不一样的。 即使在每种情况下旋转和平移的数量是相同的，但是变换的顺序影响最终的结果。 此外，您添加的任何转换都将应用于相对于view的center。 因此，应用旋转因子围绕其中心点旋转view。 缩放view会更改view的宽度和高度，但不会更改其center.&lt;/p&gt;

&lt;h4 id=&quot;view-hierarchy中转换坐标&quot;&gt;View Hierarchy中转换坐标&lt;/h4&gt;

&lt;p&gt;在许多情况下，特别是在处理事件时，应用程序可能需要将坐标值从一个参照系转换为另一个参照系。 例如，触摸事件报告每个触摸在windows坐标系中的位置，但view对象通常需要view的本地坐标系中的信息。 UIView类定义了以下用于将坐标转换为view本地坐标系的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:fromView:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:fromView:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:toView:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:toView:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convert ...：fromView：&lt;/code&gt;方法将坐标从其他view的坐标系转换为当前view的局部坐标系（bounds矩形）。 相反，&lt;code class=&quot;highlighter-rouge&quot;&gt;convert ...：toView：&lt;/code&gt;方法将坐标从当前view的本地坐标系（bounds矩形）转换为指定view的坐标系。 如果您将nil指定为任何方法的参考view，则将转换到包含view的window的坐标系并从该view的坐标系转换。&lt;/p&gt;

&lt;p&gt;除了UIView转换方法之外，UIWindow类还定义了几种转换方法。 这些方法类似于UIView版本，除了不是从view的局部坐标系转换而是从window的坐标系转换而来。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:fromWindow:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:fromWindow:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertPoint:toWindow:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convertRect:toWindow:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在旋转view中转换坐标时，UIKit会在假定要返回的矩形反映源矩形所覆盖的屏幕区域的情况下转换矩形。&lt;/p&gt;

&lt;p&gt;图显示了一个转换过程中如何导致矩形大小改变的例子。 在图中，外部父view包含旋转的subview。 将subview坐标系中的矩形转换为父坐标系，得到一个物理上较大的矩形。 这个较大的矩形实际上是outerView bounds中最小的矩形，它完全包围了旋转的矩形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/18.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;运行时调整view的大小和位置&quot;&gt;运行时调整View的大小和位置&lt;/h4&gt;

&lt;p&gt;每当view的大小发生变化时，其subview的大小和位置都必须相应地改变。 UIView类支持view hierarchy中的view的自动和手动布局。 通过自动布局，您可以设置每个view在其父view调整大小时应遵循的规则，然后完全忽略调整大小的操作。 通过手动布局，您可以根据需要手动调整view的大小和位置。&lt;/p&gt;

&lt;p&gt;在view中发生以下任何事件时，可能会发生布局更改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view bounds矩形的大小发生变化。&lt;/li&gt;
  &lt;li&gt;发生界面方向更改，通常会触发root view bounds矩形中的更改。&lt;/li&gt;
  &lt;li&gt;与view图层相关联的核心动画sublayers发生更改并需要布局。&lt;/li&gt;
  &lt;li&gt;您的应用程序通过调用view的&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutIfNeeded&lt;/code&gt;方法来强制执行布局。&lt;/li&gt;
  &lt;li&gt;您的应用程序通过调用view 底层layer的&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsLayout&lt;/code&gt;方法来强制布局。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当您更改view的大小时，通常需要更改嵌入的子view的位置和大小，以考虑其父级的新大小。 superview的autoresizesSubviews属性决定子view是否调整大小。如果此属性设置为YES，则该view使用每个子view的autoresizingMask属性来确定如何调整和定位该子view。对任何子view的大小更改会触发嵌入式子view的类似布局调整。&lt;/p&gt;

&lt;p&gt;对于view层次结构中的每个view，将该view的autoresizingMask属性设置为适当的值是处理自动布局更改的重要部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/19.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置自动调整规则的最简单方法是使用Interface Builder的“Size”检查器中的“AutoSizing”控件。 上图中灵活的宽度和高度常数与“AutoSizing”控件图中的宽度和大小指示器具有相同的行为。 但是，保证的行为和使用是有效的逆转。 在界面构建器中，边缘指示符的存在意味着边距具有固定大小，并且缺少指示符意味着边距具有灵活的大小。 幸运的是，Interface Builder提供了一个动画来展示自动修改行为对你的view的影响。&lt;/p&gt;

&lt;p&gt;重要提示：如果view的transform属性不包含标识转换，则该view的frame是未定义的，其自动调整行为的结果也是如此。&lt;/p&gt;

&lt;h4 id=&quot;手动调整view的布局&quot;&gt;手动调整view的布局&lt;/h4&gt;

&lt;p&gt;只要view的大小发生变化，UIKit就会应用该view的subview的自动调整行为，然后调用view的layoutSubviews方法以使其进行手动更改。您可以在自定义view中实现layoutSubviews方法，当自动执行行为本身不会产生所需的结果时。此方法的实现可以执行以下任何操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;调整任何直接subview的大小和位置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;添加或删除subview或核心动画layer。&lt;/li&gt;
  &lt;li&gt;通过调用setNeedsDisplay或setNeedsDisplayInRect：方法强制subview重绘。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;应用程序经常手动布置root view的一个地方是在实现大的可滚动区域时。由于对其可滚动内容拥有一个大view是不切实际的，因此应用程序通常会实现一个root view，其中包含许多较小的view。每个图块代表可滚动内容的一部分。当滚动事件发生时，根view调用其setNeedsLayout方法来启动布局更改。其layoutSubviews方法然后根据发生的滚动量重新定位平铺view。当tile从view的可见区域滚出时，layoutSubviews方法将tile移动到传入边缘，替换进程中的内容。&lt;/p&gt;

&lt;p&gt;在编写布局代码时，请务必以下列方式测试您的代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改view的方向以确保布局在所有支持的接口方向上正确。&lt;/li&gt;
  &lt;li&gt;确保你的代码正确响应状态栏高度的变化。当打电话时，状态栏高度会增加，当用户结束通话时，状态栏的大小会减小。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;在运行时修改view&quot;&gt;在运行时修改view&lt;/h4&gt;

&lt;p&gt;随着应用程序从用户接收输入，他们调整其用户界面以响应该输入。应用程序可能会通过重新排列view，更改其大小或位置，隐藏或显示view或加载全新的view来修改view。在iOS应用程序中，有几种地方和方法可以执行这些操作：&lt;/p&gt;

&lt;p&gt;在VC中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;view controller必须在显示它们之前创建其view。它可以从一个nib文件加载view或以编程方式创建它们。当这些views不再需要时，就把它们处理掉。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当设备改变方向时，view controller可能会调整view的大小和位置以匹配。作为调整新方向的一部分，可能会隐藏一些views，并显示其他views。&lt;/li&gt;
  &lt;li&gt;当view controller管理可编辑的内容时，它可能会调整其view层次结构时，编辑模式。例如，它可能会添加额外的按钮和其他控件来方便编辑其内容的各个方面。这可能还需要调整任何现有的view以适应额外的控制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在动画块中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当您想要在用户界面的不同view集之间切换时，您可以隐藏一些view并在动画块中显示其他view。&lt;/li&gt;
  &lt;li&gt;实现特殊效果时，可以使用动画块来修改view的各种属性。例如，要动画改变view的大小，你可以改变它的frame矩形的大小。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;触摸事件或手势发生时，您的界面可能会通过加载一组新的view或更改当前的view来作出响应。有关处理事件的信息，请参阅iOS事件处理指南。&lt;/li&gt;
  &lt;li&gt;当用户与滚动view交互时，大的可滚动区域可能会隐藏并显示切片子view。有关支持可滚动内容的更多信息，请参阅&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/UIScrollView_pg/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008179&quot;&gt;&lt;em&gt;Scroll View Programming Guide for iOS&lt;/em&gt;&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;当键盘出现时，您可以重新定位或调整view的大小，使其不会位于键盘下方。有关如何与键盘交互的信息，请参阅&lt;a href=&quot;https://developer.apple.com/library/content/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009542&quot;&gt;Text Programming Guide for iOS&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;view controller是对view进行更改的常用位置。由于view controller管理与正在显示的内容相关联的view分层结构，因此它最终负责这些view发生的所有事情。当加载其view或处理方向更改时，view controller可以添加新view，隐藏或替换现有view，并进行任意数量的更改以使view准备好显示。如果您实现了对编辑view内容的支持，则UIViewController中的&lt;code class=&quot;highlighter-rouge&quot;&gt;setEditing：animated：&lt;/code&gt;方法为您提供了将view转换为可编辑版本的地方。&lt;/p&gt;

&lt;p&gt;动画块是启动view相关更改的另一个常见位置。内置到UIView类中的动画支持可以轻松地将更改设置为查看属性。您也可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionWithView：duration：options：animations：completion：&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;transitionFromView：toView：duration：options：completion：&lt;/code&gt;将新整个view换出的方法&lt;/p&gt;

&lt;h4 id=&quot;与core-animation-layers交互&quot;&gt;与Core Animation Layers交互&lt;/h4&gt;

&lt;p&gt;每个view对象都有一个专用的Core Animation Layer，用于管理屏幕上view内容的显示和动画。 虽然您可以使用view对象做很多事情，但您也可以根据需要直接使用相应的layer对象。 view的layer对象存储在view的layer属性中。&lt;/p&gt;

&lt;p&gt;与view关联的layer类型在创建view后无法更改。 因此，每个view使用layerClass类方法来指定其layer对象的类。 此方法的默认实现返回CALayer类，更改此值的唯一方法是子类，重写该方法，并返回一个不同的值。 您可以更改此值以使用不同类型的图层。 例如，如果view使用平铺来显示大的可滚动区域，则可能需要使用CATiledLayer类来支持view。&lt;/p&gt;

&lt;p&gt;实现layerClass方法应该简单地创建所需的Class对象并返回它。 例如，使用平铺的view将为此方法提供以下实现：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layerClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CATiledLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每个view在其初始化过程中尽早调用其layerClass方法，并使用返回的类来创建其图层对象。 另外，view总是将自己指定为其图层对象的delegate。 在这一点上，view拥有它的层，view和层之间的关系不能改变。 您还必须不分配与任何其他图层对象的delegate相同的view。 更改view的所有权或delegate关系会导致绘图问题和应用程序中的潜在崩溃&lt;/p&gt;

&lt;p&gt;如果您主要使用图层对象而不是view，则可以根据需要将自定义图层对象合并到view层次结构中。 自定义图层对象是不属于view的CALayer的任何实例。 您通常以编程方式创建自定义图层，并使用Core Animation例程将其合并。 自定义图层不接收事件或参与响应者链，但根据核心动画规则绘制自己的图形并响应其父view或图层中的大小更改&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Create the layer.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Set the contents of the layer to a fixed image. And set
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// the size of the layer to match the image size.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layerContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;myImage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layerContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layerContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Add the layer to the view.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;viewLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSublayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Center the layer in the view.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;viewBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetMidX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectGetMidY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Release the layer, since it is retained by the view's layer
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;响应事件&quot;&gt;响应事件&lt;/h4&gt;

&lt;p&gt;view对象是响应者对象（UIResponder类的实例），因此能够接收触摸事件。当触摸事件发生时，window将相应的事件对象分派到发生触摸的view。如果你的view对一个事件不感兴趣，它可以忽略它，或者把它传递给响应者链，由另一个对象处理。&lt;/p&gt;

&lt;p&gt;除了直接处理触摸事件之外，view还可以使用手势识别器来检测轻敲，滑动，捏，以及其他类型的常见触摸相关的手势。手势识别器在追踪触摸事件方面付出了艰辛的努力，并确保他们按照正确的标准将其定位为目标手势。您可以创建手势识别器，为其分配合适的目标对象和操作方法，而不必使用跟踪触摸事件的应用程序，并使用&lt;code class=&quot;highlighter-rouge&quot;&gt;addGestureRecognizer：&lt;/code&gt;方法将其安装在view上。手势识别器然后在相应手势发生时调用您的操作方法。&lt;/p&gt;

&lt;p&gt;如果您希望直接处理触摸事件，则可以针对您的view实现以下方法，这些方法在iOS事件处理指南中有更详细的描述：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesBegan：withEvent：&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesMoved：withEvent：&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesEnded：withEvent：&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesCancelled：withEvent：&lt;/code&gt;
view的默认行为是一次只响应一次触摸。如果用户放下第二根手指，系统将忽略触摸事件，并不会将其报告给您的view。如果您打算从view的事件处理程序方法跟踪多手指手势，则需要通过将view的multipleTouchEnabled属性设置为YES来启用多点触控事件。&lt;/p&gt;

&lt;p&gt;一些view（如标签和图像）最初会禁用事件处理。您可以通过更改view的userInteractionEnabled属性的值来控制view是否能够接收触摸事件。您可能会暂时将此属性设置为NO，以防止用户在长时间操作未决时操纵view的内容。为了防止事件到达任何view，还可以使用UIApplication对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;beginIgnoringInteractionEvents&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;endIgnoringInteractionEvents&lt;/code&gt;方法。这些方法影响整个应用程序的事件传递，而不仅仅是一个view。&lt;/p&gt;

&lt;p&gt;注意：UIView的动画方法通常在动画进行时禁用触摸事件。您可以通过适当地配置动画来覆盖此行为。有关执行动画的更多信息，请参阅动画。&lt;/p&gt;

&lt;p&gt;当它处理触摸事件时，UIKit使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;hitTest：withEvent：&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;pointInside：withEvent：&lt;/code&gt;方法来确定触摸事件是否发生在给定view的边界内。尽管您很少需要重写这些方法，但您可以这样做，以实现view的自定义触摸行为。例如，您可以重写这些方法来防止子view处理触摸事件。&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">View编程指南(二)</title><link href="http://www.helloted.com/ios/2018/01/15/View_2/" rel="alternate" type="text/html" title="View编程指南(二)" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_2</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_2/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;三windows&quot;&gt;三、Windows&lt;/h3&gt;

&lt;p&gt;每个iOS应用程序至少需要一个window- 一个UIWindow类的实例 - 有些可能包含多个window。一个window对象有几个职责：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;它包含您的应用程序的可见内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;它在将触摸事件传递到View和其他应用程序对象中起着关键作用。&lt;/li&gt;
  &lt;li&gt;它与您的应用程序的View controller协同工作，以方便更改。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在iOS中，Windows没有标题栏，关闭框或其他视觉装饰。一个window始终只是一个或多个view的空白容器。此外，应用程序不会通过显示新window来更改其内容。如果要更改显示的内容，请改为改变window的最前面的view。&lt;/p&gt;

&lt;p&gt;大多数iOS应用程序在其生命周期中只创建并使用一个window。该window横跨设备的整个主屏幕，并在应用程序生命周期的早期从应用程序的主要nib文件（或以编程方式创建）加载。但是，如果应用程序支持使用外部显示器进行视频输出，则可以创建一个额外的window来在该外部显示器上显示内容。所有其他window通常由系统创建，通常是为了响应特定事件（例如来电）创建的。&lt;/p&gt;

&lt;h4 id=&quot;涉及windows的任务&quot;&gt;涉及Windows的任务&lt;/h4&gt;

&lt;p&gt;对于许多应用程序，应用程序与window交互的唯一时间是在启动时创建windws时。 但是，您可以使用应用程序的window对象来执行几个与应用程序相关的任务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用window对象将点和矩形转换为window的本地坐标系或从window的本地坐标系进行转换。 例如，如果在window坐标中提供了一个值，那么在尝试使用它之前，可能需要将其转换为特定view的坐标系。&lt;/li&gt;
  &lt;li&gt;使用window通知来跟踪与window相关的更改。 Windows会在显示或隐藏通知或者接受或退出密钥状态时生成通知。 您可以使用这些通知在应用程序的其他部分执行操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;创建和配置一个window&quot;&gt;创建和配置一个window&lt;/h4&gt;

&lt;p&gt;您可以通过编程方式或使用Interface Builder来创建和配置应用程序的主window。 无论哪种情况，您都可以在启动时创建window，并保留该window并将其引用存储在您的应用程序delegate对象中。 如果你的应用程序创建了额外的window，让应用程序在需要时创建它们。 例如，如果您的应用程序支持在外部显示器上显示内容，则应在创建相应window之前等待显示器连接。&lt;/p&gt;

&lt;p&gt;无论您的应用程序是启动到前台还是后台，您都应始终在启动时创建应用程序的主window。 创建和配置window本身并不是一个昂贵的操作。 但是，如果您的应用程序直接进入后台，则应避免在应用程序进入前台之前使window可见。&lt;/p&gt;

&lt;h4 id=&quot;在interface-builder中创建windows&quot;&gt;在Interface Builder中创建Windows&lt;/h4&gt;

&lt;p&gt;使用Interface Builder创建应用程序的main window非常简单，因为Xcode项目模板可以帮你实现。每个新的Xcode应用程序项目都包含一个包含应用程序main window的主要nib文件（通常名称为MainWindow.xib或其某些变体）。另外，这些模板还为应用程序delegate对象中的该window定义了一个出口。您可以使用此outlet访问代码中的window对象。&lt;/p&gt;

&lt;p&gt;重要提示：在Interface Builder中创建window时，建议您在属性检查器中启用“全屏启动”选项。如果此选项未启用且您的window小于目标设备的屏幕，则某些view不会接收触摸事件。这是因为window（如所有view）不会在边界矩形外接收触摸事件。由于默认情况下，view不会被剪切到window边界，所以view仍然可见，但是事件不能到达它们。在启动时启用全屏选项可确保window适合当前屏幕。&lt;/p&gt;

&lt;p&gt;如果您正在改造一个项目以使用Interface Builder，那么使用Interface Builder创建一个window就是将window对象拖到您的nib文件中的简单方法。当然，你也应该做到以下几点：&lt;/p&gt;

&lt;p&gt;要在运行时访问window，应该将window连接到outlet，通常是在应用程序delegate或者nib文件的文件所有者中定义的window。
如果改造计划包括将新的nib文件作为应用程序的主要nib文件，则还必须将应用程序的Info.plist文件中的NSMainNibFile键设置为nib文件的名称。更改此键的值可确保在调用应用程序delegate的应用程序：didFinishLaunchingWithOptions：方法时，nib文件已加载并可供使用。&lt;/p&gt;

&lt;h4 id=&quot;以编程方式创建window&quot;&gt;以编程方式创建window&lt;/h4&gt;

&lt;p&gt;如果您希望以编程方式创建应用程序的main window，则应在应用程序中包含与以下代码相似的代码：didFinishLaunchingWithOptions：应用程序delegate的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.window = [[[UIWindow alloc] initWithFrame：[[UIScreen mainScreen] bounds]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在前面的示例中，self.window被假定为您的应用程序delegate的声明属性，该属性被配置为保留window对象。如果您是为外部显示创建window，则应将其分配给其他变量，并且需要指定代表该显示的非主UIScreen对象的边界。&lt;/p&gt;

&lt;p&gt;创建window时，应始终将window的大小设置为屏幕的全部范围。您不应该减小window的大小来容纳状态栏或任何其他项目。状态栏总是浮在window的顶部，所以你应该缩小以容纳状态栏的唯一的东西就是你放入window的view。如果你使用view contoller，VC应该自动处理你的view的大小。&lt;/p&gt;

&lt;h4 id=&quot;将内容添加到window&quot;&gt;将内容添加到Window&lt;/h4&gt;

&lt;p&gt;每个window通常都有一个root view对象（由相应的view controller管理），其中包含代表您的内容的所有其他view。使用单个root view简化了更改界面的过程;要显示新的内容，你所要做的就是替换root view。要在window中安装view，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;addSubview：&lt;/code&gt;方法。例如，要安装由VC管理的view，可以使用类似于以下内容的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[window addSubview:viewController.view];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代替上述代码，您可以在您的nib文件中配置window的rootViewController属性。此属性提供了一种使用nib文件而非编程方式配置window的root view的便捷方法。如果在从其nib文件加载window时设置此属性，则UIKit会自动将相关VC的view安装为window的root view。此属性仅用于安装root view，不用于window与VC进行通信。
您可以使用任何您想要的view作为window的root view。取决于你的界面设计，root view可以是一个通用的UIView对象，充当一个或多个子view的容器，root view可以是标准的系统view，或者rootview可以是你定义的自定义view。通常用作roo tview的一些标准系统view包括滚动view，表view和图像view。
在配置window的rootview时，您需要负责在window内设置其初始大小和位置。对于不包含状态栏或显示半透明状态栏的应用程序，请将view大小设置为与window大小相匹配。对于显示不透明状态栏的应用程序，请将您的view放置在状态栏下方并相应地缩小其大小。从view的高度减去状态栏的高度可以防止view的顶部被遮挡。
注意：如果window的rootview由容器view控制器（如选项卡栏控制器，导航控制器或分割view控制器）提供，则不需要自行设置view的初始大小。容器view控制器root据状态栏是否可见，自动调整view大小。&lt;/p&gt;

&lt;h4 id=&quot;更改window级别&quot;&gt;更改Window级别&lt;/h4&gt;

&lt;p&gt;每个UIWindow对象都有一个可配置的windowLevel属性，用于确定该window相对于其他window的位置。 大多数情况下，您不需要更改应用程序window的级别。 新建window在创建时自动分配到正常window级别。 正常的window级别表示该window显示与应用程序相关的内容。 对于需要悬浮在应用程序内容之上的信息（比如系统状态栏或警报消息）保留更高的window级别。 虽然你可以自己分配window到这些级别，但是当你使用特定的接口时，系统通常会为你做这些。 例如，当您显示或隐藏状态栏或显示警报视图时，系统会自动创建所需的window来显示这些项目。&lt;/p&gt;

&lt;h4 id=&quot;监听window改变&quot;&gt;监听Window改变&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidBecomeVisibleNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidBecomeHiddenNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidBecomeKeyNotification&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowDidResignKeyNotification&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">View编程指南</title><link href="http://www.helloted.com/ios/2018/01/15/View_1/" rel="alternate" type="text/html" title="View编程指南" /><published>2018-01-15T20:00:00+08:00</published><updated>2018-01-15T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2018/01/15/View_1</id><content type="html" xml:base="http://www.helloted.com/ios/2018/01/15/View_1/">&lt;p&gt;苹果官方文档&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503-CH1-SW2&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;一简介&quot;&gt;一、简介&lt;/h3&gt;

&lt;p&gt;在iOS中，您可以使用windows和views在屏幕上显示应用程序的内容。 Windows本身没有任何可见的内容，但为应用程序的views提供了一个基本的容器。 views定义了您想要填充某些内容的windows的一部分。 例如，您可能具有显示图像，文本，形状或其组合的views。 您还可以使用views来组织和管理其他views。&lt;/p&gt;

&lt;p&gt;每个应用程序至少有一个windows和一个views来显示其内容。 UIKit和其他系统框架提供了预定义的views，您可以使用它来呈现您的内容。 这些view的范围从简单的按钮和文本标签到更复杂的view，如tableview，pickerview和scroll view。 在预定义views不提供您需要的地方，您还可以定义自定义views并自行管理views和事件处理。&lt;/p&gt;

&lt;h4 id=&quot;view管理应用程序可见内容&quot;&gt;View管理应用程序可见内容&lt;/h4&gt;

&lt;p&gt;view是UIView类（或其子类之一）的一个实例对象，并在应用程序window中管理矩形区域。view负责绘制内容，处理多点触控事件以及管理任何子view的布局。绘图涉及使用图形技术，例如Core Graphics，OpenGL ES或UIKit在view的矩形区域内绘制形状，图像和文本。view通过使用手势识别器或通过直接处理触摸事件来响应其矩形区域中的触摸事件。在view层次结构中，父view负责定位和调整其子view的大小，并且可以动态地执行。这种动态修改子view的功能使您的view能够适应不断变化的条件，如界面旋转和动画。&lt;/p&gt;

&lt;p&gt;您可以将view视为用于构建用户界面的构建块。您不是使用一个view呈现所有内容，而是经常使用多个view来构建view层次结构。层次结构中的每个view呈现用户界面的特定部分，通常针对特定类型的内容进行优化。例如，UIKit具有专门用于呈现图像，文本和其他类型的内容的view。&lt;/p&gt;

&lt;h4 id=&quot;windows协调显示views&quot;&gt;Windows协调显示Views&lt;/h4&gt;

&lt;p&gt;Windows是UIWindow类的一个实例，并处理应用程序用户界面的整体表示。 Windows使用view（及其拥有的view controller）来管理与可见view hierarchy的交互以及对可见view hierarchy的更改。 大多数情况下，您的应用程序的Windows永远不会改变。 Windows创建后，它保持不变，只有它显示的view改变。 每个应用程序至少有一个Window，在应用程序的主屏幕上显示应用程序的用户界面。 如果外部显示器连接到设备，应用程序可以创建另一个Window来在该屏幕上显示内容。&lt;/p&gt;

&lt;h4 id=&quot;animations为ui交互提供可见反馈&quot;&gt;Animations为UI交互提供可见反馈&lt;/h4&gt;

&lt;p&gt;动画为用户提供关于view hierarchy变化的可见反馈。 系统定义了标准动画，用于显示不同的view组之间的presenting model view和过渡。 然而，view的许多属性也可以直接动画。 例如，通过动画，您可以更改view的透明度，其在屏幕上的位置，大小，背景颜色或其他属性。 如果直接使用view的底层Core Animation layer对象，则还可以执行许多其他动画。&lt;/p&gt;

&lt;h4 id=&quot;interface-builder&quot;&gt;Interface Builder&lt;/h4&gt;

&lt;p&gt;Interface Builder是一个应用程序，用于以图形方式构建和配置应用程序的Windows和view。 使用Interface Builder，您可以组装view并将它们放置在一个nib文件中，该文件是存储view和其他对象的冻干版本的资源文件。 当你在运行时加载一个nib文件的时候，它里面的对象被重新编译成实际的对象，你的代码可以通过编程来操作。&lt;/p&gt;

&lt;p&gt;Interface Builder极大地简化了您在创建应用程序的用户界面方面所做的工作。 由于对Interface Builder和nib文件的支持已经整合到iOS中，所以将nib文件合并到您的应用程序的设计中需要一点努力。&lt;/p&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;p&gt;因为view是非常复杂和灵活的对象，所以不可能在一个文档中覆盖所有的行为。 但是，其他文档可帮助您了解管理view和用户界面的其他方面。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view控制器是管理应用程序view的重要组成部分。 一个view controller主持所有的view在一个单一的view hierarchy，并方便在屏幕上显示这些view。 有关view controller和他们扮演的角色的更多信息, &lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457&quot;&gt;&lt;em&gt;View Controller Programming Guide for iOS&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;view是应用程序中手势和触摸事件的关键接收者， &lt;em&gt;Event Handling Guide for iOS&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;自定义view必须使用可用的绘图技术来呈现其内容。 有关使用这些技术来绘制view的信息，&lt;a href=&quot;https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156&quot;&gt;&lt;em&gt;Drawing and Printing Guide for iOS&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;在标准view动画不够用的地方，可以使用Core Animation。 有关使用Core Animation实现动画的信息, &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514&quot;&gt;&lt;em&gt;Core Animation Programming Guide&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二view-and-window-架构&quot;&gt;二、View and Window 架构&lt;/h3&gt;

&lt;p&gt;View和window呈现您的应用程序的用户界面，并处理与该界面的交互。 UIKit和其他系统框架提供了许多views，你可以很少或根本没有修改就直接使用或者根据需要自定义View。&lt;/p&gt;

&lt;p&gt;无论您使用系统View还是创建自己的自定义View，都需要了解UIView和UIWindow类提供的基础结构。 这些课程提供先进的设施来管理View的布局和表示。 了解这些设施的工作方式对于在应用程序发生更改时确保View的行为是非常重要的。&lt;/p&gt;

&lt;h4 id=&quot;view架构基础&quot;&gt;View架构基础&lt;/h4&gt;

&lt;p&gt;大部分你可能想要做的事情都是通过view对象来完成的 - UIView类的实例。view对象在屏幕上定义了一个矩形区域，并处理该区域中的drawing和touch事件。View还可以作为其他view的父项，并协调这些view的布局和大小。 UIView类在管理这些View之间的这些关系方面做了大部分工作，但是您也可以根据需要自定义默认行为。&lt;/p&gt;

&lt;p&gt;View与Core Animation Layer一起工作来处理View内容的渲染和动画。 UIKit中的每个View都由一个layer对象（通常是CALayer类的一个实例）支持，这个layer管理View的后备存储并处理与View相关的动画。你执行的大多数操作应该通过UIView接口。但是，在需要更多地控制view的渲染或动画行为的情况下，您可以通过其layer执行操作。&lt;/p&gt;

&lt;p&gt;要理解View和图层之间的关系，有助于看一个例子。下图显示了ViewTransitions示例应用程序的view hierarchy以及与底层Core Animation layer的关系。每个View都有一个对应的layer对象，可以通过该view的layer属性访问。 （因为bar按钮项不是View，所以不能直接访问它的图层。）在这些layer对象的后面是Core Animation渲染对象，最后是用于管理屏幕上实际位的硬件缓冲区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/10.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Core Animation layer对象的使用对性能有重要的影响。 view对象的实际绘图代码被尽可能少地调用，并且当调用代码时，结果被Core Animation缓存，并在稍后被重用。 重用已经呈现的内容消除了通常需要更新view的昂贵的绘图周期。 在动画中重复使用这些内容是非常重要的，在动画中可以操纵现有的内容。 这种重复使用比创建新内容要便宜得多。&lt;/p&gt;

&lt;h4 id=&quot;view的层次结构和管理子view&quot;&gt;View的层次结构和管理子View&lt;/h4&gt;

&lt;p&gt;除了提供自己的内容之外，view还可以充当其他view的容器。当一个view包含另一个view时，两个view之间会创建一个父子关系。关系中的子view称为subview，父View称为superview。创建这种类型的关系对于应用程序的外观和应用程序的行为都有影响。
从视觉上来说，子view的内容掩盖了其父view的全部或部分内容。如果子view是完全不透明的，则子view占用的区域完全遮蔽了父view的相应区域。如果子View是部分透明的，则来自两个view的内容在被显示在屏幕上之前被混合在一起。每个superview将其子view存储在有序数组中，并且该数组中的顺序也会影响每个子View的可见性。如果两个兄弟子view彼此重叠，则最后添加的子view（或移动到子view数组的末尾）会出现在另一个之上。
Superview - subview关系也会影响多个view的行为。更改父view的大小会产生连锁效应，导致任何子view的大小和位置也发生变化。当您更改父view的大小时，可以通过适当地配置view来控制每个子view的大小调整行为。影响子view的其他更改包括隐藏superview，更改superview的透明度，或将数学变换应用于superview的坐标系。
View层次结构中的排列也决定了应用程序如何响应事件。当在特定view内发生触摸时，系统将带有触摸信息的事件对象直接发送到该view进行处理。但是，如果view不处理特定的触摸事件，它可以将事件对象传递给其superview。如果superview不处理事件，它将事件对象传递给它的superview，等等这样一个响应者链。特定的view也可以将事件对象传递给介入的响应者对象，如viewcontroller。如果没有对象处理事件，它最终会到达application对象，通常会丢弃它。&lt;/p&gt;

&lt;h4 id=&quot;view的绘图周期&quot;&gt;View的绘图周期&lt;/h4&gt;

&lt;p&gt;UIView类使用按需绘制模型来呈现内容。当一个view第一次出现在屏幕上时，系统要求它画出其内容。系统捕获此内容的snapshot，并将该snapshot用作view的视觉表示。如果你永远不改变view的内容，view的绘图代码可能永远不会再被调用。大多数涉及view的操作都会重用snapshot。如果您更改内容，则通知系统view已更改。这个View会重新绘制View并捕获新结果的快照。&lt;/p&gt;

&lt;p&gt;当你的view的内容改变时，你不要直接重绘这些改变。而是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsDisplay&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;setNeedsDisplayInRect：&lt;/code&gt;方法使view无效。这些方法告诉系统，view的内容改变了，需要在下一个机会重新绘制。在启动任何绘图操作之前，系统等待直到当前run loop的结束。这种延迟使您有机会使多个view失效，从您的层次结构中添加或删除view，隐藏view，调整view大小，并一次重新定位view。然后你所做的所有改变都会同时反映出来。&lt;/p&gt;

&lt;p&gt;注：更改view的(geometry)几何图形不会自动导致系统重新绘制view的内容。view的contentMode属性确定如何解释对geometry的更改。大多数contentMode在View的边界内拉伸或重新定位现有的快照，而不是创建一个新的快照。&lt;/p&gt;

&lt;p&gt;当呈现view的内容时，实际的绘图过程会根据View及其配置而变化。系统view通常实现私有绘图方法来呈现其内容。这些相同的系统View经常公开可用于配置view的实际外观的接口。对于自定义UIView子类，通常会覆盖View的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，并使用该方法绘制view的内容。还有其他方法可以提供view的内容，比如直接设置layer的内容，但是覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法是最常用的技术。&lt;/p&gt;

&lt;h4 id=&quot;content-modes&quot;&gt;Content Modes&lt;/h4&gt;

&lt;p&gt;每个view都有一个Content Modes，用于控制view如何回应其内容以响应View几何体的变化以及是否回收其内容。当view第一次显示时，它像往常一样渲染其内容，并将结果捕获在底层位图中。之后，对view’s geometry的更改并不总是会导致重新创建位图。相反，contentMode属性中的值决定是否缩放位图以适应新的边界，或者只是固定到View的一个角或边缘。&lt;/p&gt;

&lt;p&gt;view的content modes在您执行以下操作时应用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改view的frame或bounds矩形的宽度或高度。&lt;/li&gt;
  &lt;li&gt;将包含比例因子的变换分配给view的transform属性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认情况下，大多数view的contentMode属性被设置为UIViewContentModeScaleToFill，这会导致view的内容被缩放以适应新的frame size。下图显示了一些可用的内容模式的结果。从图中可以看出，并不是所有的content mode都会导致view的边界被完全填满，而那些content mode可能会扭曲view的内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/11.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Content Modes对回收view的内容非常有用，但是当您特别希望自定义view在缩放和调整大小操作期间重新绘制自己的内容时，您还可以将内容模式设置为UIViewContentModeRedraw值。 将view的Content Modes设置为该值会迫使系统调用view的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法来响应几何变化。 一般来说，你应该尽可能的避免使用这个值，你一定不要在标准系统view中使用它.&lt;/p&gt;

&lt;h4 id=&quot;可伸缩view&quot;&gt;可伸缩View&lt;/h4&gt;

&lt;p&gt;您可以指定View的一部分为可拉伸的，以便当view的大小改变时，只有可拉伸部分的内容受到影响。 您通常在按钮或其他View中使用可拉伸区域，其中部分view定义了可重复的图案。 您指定的可拉伸区域可以允许沿View的一个或两个轴伸展。 当然，当沿着两个轴伸展View时，view的边缘也必须定义可重复的图案以避免任何失真。  来自每个view的原始像素的颜色被复制以填充大view中的对应区域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/12.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;您可以使用contentStretch属性指定view的可拉伸区域。该属性接受一个矩形，其值被规范化为0.0到1.0的范围。当拉伸View时，系统将这些归一化值乘以view的当前边界和比例因子，以确定哪些像素或像素需要拉伸。每当View边界发生变化时，使用规范化值就可以减少更新contentStretch属性的必要性。&lt;/p&gt;

&lt;p&gt;view的content mode在确定如何使用view的可拉伸区域方面也起着重要作用。仅当content mode会导致View的内容被缩放时才使用可伸缩区域。这意味着只有UIViewContentModeScaleToFill，UIViewContentModeScaleAspectFit和UIViewContentModeScaleAspectFill内容模式才支持可伸缩view。如果指定将内容固定到边或角的内容模式（因此实际上不会缩放内容），则view将忽略可拉伸区域。&lt;/p&gt;

&lt;p&gt;注意：在可拉伸的UIImage对象为view指定背景时，才建议使用contentStretch属性。 可伸缩View完全在Core Animation layer中处理，通常可以提供更好的性能。&lt;/p&gt;

&lt;h4 id=&quot;内置的动画支持&quot;&gt;内置的动画支持&lt;/h4&gt;

&lt;p&gt;在每个view背后都有一个layer对象的好处之一是可以轻松地动画许多与view相关的更改。动画是向用户传递信息的有效方法，在设计应用程序时应始终考虑动画。 UIView类的许多属性都是可以动画的，也就是说，存在从一个值到另一个值的动画的半自动支持。要为其中一个动画属性执行动画，您只需执行以下操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;告诉UIKit你想要执行一个动画。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改属性的值。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以在UIView对象上动画的属性如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Frame - 使用此动画设置为view更改位置和大小变化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;bounds - 使用这个动画来改变view的大小。&lt;/li&gt;
  &lt;li&gt;center - 使用此可以动画显示view的位置。&lt;/li&gt;
  &lt;li&gt;transform - 使用它来旋转或缩放view。&lt;/li&gt;
  &lt;li&gt;alpha - 使用这个来改变view的透明度。&lt;/li&gt;
  &lt;li&gt;backgroundColor - 使用此更改view的背景颜色。&lt;/li&gt;
  &lt;li&gt;contentStretch - 使用它来改变view内容的拉伸方式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;动画非常重要的一个地方是从一组views转换到另一个views。通常，您使用view contoller来管理与用户界面各部分之间的重大更改相关联的动画。例如，对于涉及从较高级别信息到较低级别信息的接口，通常使用导航控制器来管理显示每个连续数据级别的view之间的转换。但是，您也可以使用动画而不是view controller在两组View之间创建转换。你可能会在标准的view controller动画没有产生你想要的结果的地方这样做。&lt;/p&gt;

&lt;p&gt;除了使用UIKit类创建的动画外，还可以使用Core Animation layer创建动画。layer可以更好地控制动画的时间和属性。&lt;/p&gt;

&lt;h4 id=&quot;view的几何和坐标系统&quot;&gt;View的几何和坐标系统&lt;/h4&gt;

&lt;p&gt;UIKit中的默认坐标系统的原点位于左上角，并具有从原点向下和向右延伸的轴。 坐标值使用浮点数来表示，无论底层的屏幕分辨率如何，都可以精确地布局和定位内容。 除了屏幕坐标系之外，window和view还定义了自己的局部坐标系，使您可以指定相对于window或view原点的坐标，而不是相对于屏幕。&lt;/p&gt;

&lt;p&gt;重要提示：某些iOS技术定义默认坐标系，其原点和方向与UIKit使用的坐标系不同。 例如，Core Graphics和OpenGL ES使用坐标系统，坐标系统的原点位于View或窗口的左下角，y轴相对于屏幕向上。 绘制或创建内容时，您的代码必须考虑到这些差异，并根据需要调整坐标值（或坐标系的默认方向）。&lt;/p&gt;

&lt;h4 id=&quot;frame-bounds-and-center&quot;&gt;Frame, Bounds, and Center&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt; 包含了 &lt;em&gt;frame 矩形&lt;/em&gt;, 在superview中定义View的大小和位置&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; 包含了 &lt;em&gt;bounds 矩形&lt;/em&gt;, 它在view的本地坐标系统中指定View的大小（及其内容的原点）。&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; 包含了在superview坐标系统中view的中点的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;您主要使用center和frame属性来操作当前view的几何图形。例如，在构建view层次结构或在运行时更改view的位置或大小时使用这些属性。如果您只改变view的位置（而不是View的大小），则中心属性是更好的选择。即使缩放或旋转因子已添加到View的变换中，属性中的值始终有效。对于frame属性中的值也是如此，如果view的变换不等于标识变换，则认为该值是无效的。&lt;/p&gt;

&lt;p&gt;绘图时主要使用bounds属性。bounds矩形在View的本地坐标系中表示。此矩形的默认原点是（0，0），其大小与frame矩形的大小相匹配。您在此矩形内绘制的任何东西都是view可见内容的一部分。如果更改bounds矩形的原点，则在新矩形内绘制的内容将成为view可见内容的一部分。&lt;/p&gt;

&lt;p&gt;图显示了图像View的frame和bounds之间的关系。在图中，图像view的左上角位于其superivew坐标系中的点（40,40），矩形的大小是240×380点。对于bounds矩形，原点为（0,0），矩形的大小为240乘380点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/13.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然更改frame，bounds和center的方法是相互独立的，但其中一个属性的更改会影响其他属性，方法如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当您设置frame属性时，bounds属性中的size值将更改为与frame矩形的新大小相匹配。 center属性中的值同样会更改为匹配frame矩形的新中心点。&lt;/li&gt;
  &lt;li&gt;当您设置center属性时，frame中的origin值会相应更改。&lt;/li&gt;
  &lt;li&gt;设置bounds属性的大小时，frame属性中的size值会更改为与bounds矩形的size相匹配。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认情况下，view的frame不会剪切到其superview的frame。 因此，任何超出superview frame的子view都将被完整地呈现。 不过，您可以通过将superview的clipsToBounds属性设置为YES来更改此行为。 无论子view是否可视化剪切，触摸事件总是尊重目标view的superview的边界矩形。 换句话说，发生在superview bounds矩形之外的view的一部分中的触摸事件不会被传送到该view。&lt;/p&gt;

&lt;h4 id=&quot;坐标系统转换&quot;&gt;坐标系统转换&lt;/h4&gt;

&lt;p&gt;坐标系转换提供了一种快速方便地更改view（或其内容）的方法。 &lt;em&gt;affine transform&lt;/em&gt;是一个数学矩阵，指定一个坐标系中的点如何映射到不同坐标系中的点。 您可以将&lt;em&gt;affine transform&lt;/em&gt;应用于整个view，以相对于其superivew更改View的大小，位置或方向。 您还可以在绘图代码中使用&lt;em&gt;affine transform&lt;/em&gt;对各个渲染内容进行相同类型的操作。 如何应用仿射变换取决于上下文：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;要修改整个view，请在View的transform属性中修改&lt;em&gt;affine transform&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;要修改view的特定内容,用&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，请修改与活动图形上下文关联的transform。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当您要实现动画时，通常会修改view的transform属性。 例如，您可以使用此属性来创建围绕其中心点旋转view的动画。 您不会使用此属性对您的view进行永久更改，例如在其superview的坐标空间内修改其view的位置或大小。 对于这种类型的更改，您应该修改view的frame矩形。&lt;/p&gt;

&lt;p&gt;注意：修改view的transform属性时，所有的转换都是相对于view的中心点执行的。&lt;/p&gt;

&lt;p&gt;每个子View的坐标系建立在其super的坐标系上。所以当你修改一个View的transform属性时，这个改变会影响view及其所有的subview。但是，这些更改仅影响屏幕上view的最终呈现。由于每个view都是绘制其内容，并将其子view相对于其bounds进行布局，所以在绘制和布局过程中可以忽略其superview的变换。&lt;/p&gt;

&lt;p&gt;图展示了两种不同的旋转因素在渲染时如何组合。在View的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法内部，对shape应用45度旋转因子会使该shape旋转45度。将单独的45度旋转因子应用于view，然后使shape看起来旋转90度。相对于绘制的view，shape仍然只旋转了45度，但view旋转使其看起来被旋转了更多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/14.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重要提示：如果View的transform属性不是标识transform，那么该View的frame属性的值是未定义的，必须忽略。 将变换应用于view时，必须使用view的bounds和center属性来获取view的size和position。 任何子view的frame矩形仍然有效，因为它们是相对于view的bounds&lt;/p&gt;

&lt;h4 id=&quot;view的运行时交互模型&quot;&gt;View的运行时交互模型&lt;/h4&gt;

&lt;p&gt;每当用户与您的用户界面进行交互时，或者您自己的代码以编程方式更改某些内容时，都会在UIKit内部发生一系列复杂的事件来处理该交互。 在这个序列的特定时间点，UIKit会调用您的Views，并让他们有机会代表您的应用程序进行响应。 理解这些标注点对于理解View适合系统的位置很重要。 图显示了用户触摸屏幕开始的事件的基本顺序，以图形系统作为响应更新屏幕内容结束。 任何由程序启动的动作也会发生相同的事件序列。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_3/15.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;用户触摸屏幕。
硬件将触摸事件报告给UIKit框架。
UIKit框架将触摸包装到UIEvent对象中并将其分派到相应的View。
view的事件处理代码响应事件。例如，您的代码可能会：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;更改view或其subview的属性（frame，bounds，alpha等）。&lt;/li&gt;
      &lt;li&gt;调用setNeedsLayout方法将view（或subviews）标记为需要布局更新。&lt;/li&gt;
      &lt;li&gt;调用setNeedsDisplay或setNeedsDisplayInRect：方法将view（或其subviews）标记为需要重绘。&lt;/li&gt;
      &lt;li&gt;通知controllers有关对某些数据的更改。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当然，由你来决定这些view应该做哪些事情以及应该调用哪些方法。
如果view的几何因任何原因而改变，则UIKit根据以下规则更新其subview：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;如果您为view配置了autoresizing规则，则UIKit会根据这些规则调整每个view。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果view实现了layoutSubviews方法，UIKit会调用它。&lt;/p&gt;

        &lt;p&gt;您可以在自定义view中重写此方法，并使用它来调整任何subview的位置和大小。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果任何view的任何部分被标记为需要重绘，则UIKit会要求view重绘本身。
对于显式定义&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法的自定义view，UIKit调用该方法。这个方法的实现应该尽可能快地重绘view的指定区域，而不是其他的。此时不要进行额外的布局更改，也不要对应用程序的数据模型进行其他更改。此方法的目的是更新view的可视内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;标准系统view通常不执行&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法，而是在这个时候管理他们的绘图。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;任何更新的view都会与应用程序的其余可见内容合成，并发送到图形硬件进行显示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;图形硬件将渲染的内容传输到屏幕上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意：上述更新模型主要适用于使用标准系统view和绘图技术的应用程序。 使用OpenGL ES进行绘制的应用程序通常会配置一个全屏View，并直接绘制到关联的OpenGL ES图形上下文中。 在这种情况下，view仍然可以处理触摸事件，但由于它是全屏的，所以不需要布置subviews。&lt;/p&gt;

&lt;p&gt;在前面的一系列步骤中，您自定义View的主要集成点是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;事件处理方法:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesBegan:withEvent:&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesMoved:withEvent:&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesEnded:withEvent:&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touchesCancelled:withEvent:&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutSubviews&lt;/code&gt; 方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect:&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些是view中最常用的重写方法，但您可能不需要重写所有这些方法。 如果使用手势识别器来处理事件，则不需要重写任何事件处理方法。 同样，如果您的view不包含subview或其大小不会更改，则没有理由重写layoutSubviews方法。 最后，只有在view的内容可以在运行时更改并且使用本技术（如UIKit或Core Graphics）进行绘制时，才需要&lt;code class=&quot;highlighter-rouge&quot;&gt;drawRect：&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&quot;高效地使用view&quot;&gt;高效地使用View&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;View不总是有一个相应的view controller&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	view和viewcontroller之间很少有一对一的关系。 viewcontroller的工作是管理一个View层次结构，通常由多个view组成，用于实现一些独立的功能。 对于iPhone应用程序，每个view层次结构通常填充整个屏幕，但对于iPad应用程序，view层次结构可能只填充屏幕的一部分。&lt;/p&gt;

&lt;p&gt;​	在设计应用程序的用户界面时，重要的是要考虑view controller将扮演的角色。 view controller提供了许多重要的行为，例如协调屏幕上的view显示，协调从屏幕上删除这些view，响应低内存警告释放内存，以及响应接口方向更改而旋转view。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最小化自定义绘图&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然自定义view有时是必要的，但它也是你应该尽可能避免的东西。 只有当现有系统View类不提供所需的外观或功能时，才能真正做到任何自定义绘图。 任何时候，您的内容都可以与现有View的组合进行组合，最好的办法就是将这些view对象组合成一个自定义的view层次结构。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;利用content mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;content mode可以减少重绘view的时间。 默认情况下，view使用UIViewContentModeScaleToFill内容模式，该模式缩放view的现有内容以适合view的框架矩形。 您可以根据需要更改此模式，以不同的方式调整您的内容，但是如果可以的话，您应该避免使用UIViewContentModeRedraw内容模式。 无论哪种内容模式生效，都可以通过调用setNeedsDisplay或setNeedsDisplayInRect：来强制view重绘其内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;尽可能声明View不透明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UIKit使用每个view的opaque属性来确定view是否可以优化合成操作。 将自定义view的此属性值设置为YES会告诉UIKit它不需要在view后面呈现任何内容。 较少的渲染会导致您的绘图代码的性能提高，并且通常会受到鼓励。 当然，如果将opaque属性设置为YES，则View必须完全填充完全不透明的内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;滚动时调整view的绘图行为&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;滚动可以在很短的时间内产生大量的view更新。 如果您的view的绘制代码没有适当地调整，则view的滚动性能可能会很低。 在开始滚动操作时，不要试图确保view的内容始终处于原始状态，而应考虑更改view的行为。 例如，您可以暂时降低渲染内容的质量，或在滚动正在进行时更改content mode。 当滚动停止时，您可以将view返回到之前的状态，并根据需要更新内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不要通过嵌入subview来自定义控件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然在技术上可以将subview添加到标准系统控件（从UIControl继承的对象），但不应该以这种方式定制它们。 支持自定义的控件通过控件类本身的明确的，记录良好的接口来实现。 例如，UIButton类包含设置按钮的标题和背景图像的方法。 使用定义的定制点意味着您的代码将始终正常工作。 通过在按钮内部嵌入自定义图像view或标签来限制这些方法，如果按钮的实现发生更改，则可能会导致应用程序现在或将来某个时刻的行为不正确。&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">苹果官方文档View Programming Guide for iOS</summary></entry><entry><title type="html">Flexbox布局指南</title><link href="http://www.helloted.com/css/2017/12/20/flexbox/" rel="alternate" type="text/html" title="Flexbox布局指南" /><published>2017-12-20T20:00:00+08:00</published><updated>2017-12-20T20:00:00+08:00</updated><id>http://www.helloted.com/css/2017/12/20/flexbox</id><content type="html" xml:base="http://www.helloted.com/css/2017/12/20/flexbox/">&lt;p&gt;本文翻译来自&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;一背景&quot;&gt;一、背景&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Flexbox Layout&lt;/code&gt; 模块旨在让容器container内的item布局、排列、散布item变得更加高效, 尽管它们的尺寸是未知或者是动态的(所以是flex可伸缩的)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Flexbox Layout&lt;/code&gt; 背后的主要思想是为了让容器container有能力去调整它的items的宽高顺序，从而最好地填充可用的空间(主要是为了适应各种尺寸的设备和屏幕)，一个可伸缩的container扩展它的items去填充可用的剩余空间，或者让它们缩小以防止超出范围。&lt;/p&gt;

&lt;p&gt;更为重要的是，与常规的相比(block基于垂直，inline基于水平)， &lt;code class=&quot;highlighter-rouge&quot;&gt;Flexbox Layout&lt;/code&gt; 是方向不可知的。虽然常规的那些布局对于页面也有效，但是它们缺乏灵活性来支持大型或复杂的应用程序（特别是在改变方向，调整大小，拉伸，缩小等方面）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; Flexbox布局最适合应用程序的组件和小规模布局，而Grid布局则适用于较大规模的布局。&lt;/p&gt;

&lt;h3 id=&quot;二基础和术语&quot;&gt;二、基础和术语&lt;/h3&gt;

&lt;p&gt;由于flexbox是一个完整的模块，而不是一个单一的属性，它涉及到很多东西，包括整套属性。 其中的一些属性是用来设置container（父元素，被称为“flex container”），而其他的是用来设置在items（子元素，称为“flex items”）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/02.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/03.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果常规布局基于block和inline流动方向，则 flex layout基于“弹性流动方向”。 请从规范中看一下这个数字，它们解释了flex布局背后的主要思想。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般来说，将会沿着主轴 &lt;code class=&quot;highlighter-rouge&quot;&gt;main axis&lt;/code&gt;(从 &lt;code class=&quot;highlighter-rouge&quot;&gt;main-start&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;main-end&lt;/code&gt;) 或者纵轴 &lt;code class=&quot;highlighter-rouge&quot;&gt;cross axis&lt;/code&gt;(从 &lt;code class=&quot;highlighter-rouge&quot;&gt;cross-start&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;cross-end&lt;/code&gt;)来放置items&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;main axis&lt;/strong&gt; - 主轴，用来布置items的主要轴线，小心，它不一定是水平的，还是要看 &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-direction&lt;/code&gt; 这个属性&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;main-start  main-end&lt;/strong&gt; - flex items 将会被放置在container 上，从 main-start 开始一直到 main-end.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;main size&lt;/strong&gt; - 主轴方向上的大小&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cross axis&lt;/strong&gt; - 垂直于主轴方向的轴被称为纵轴. 它的方向取决于主轴的方向&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cross-start cross-end&lt;/strong&gt; -  items填充在 container里，沿着  cross-start 朝着cross-end.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cross size&lt;/strong&gt; - 纵轴方向上的大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三container属性&quot;&gt;三、Container属性&lt;/h3&gt;

&lt;h4 id=&quot;display&quot;&gt;display&lt;/h4&gt;

&lt;p&gt;定义了container是一个弹性可伸缩的，值有可能为flex或者inline-flex&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* or inline-flex */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;flex-direction&quot;&gt;flex-direction&lt;/h4&gt;

&lt;p&gt;建立了主轴，从而决定了items放置在container里的方向， Flexbox是（除了可选的wrapping）单向布局的概念。 将items视为主要布置在水平行或垂直列中。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row-reverse&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column-reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/04.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;依次对应&lt;/p&gt;

&lt;h4 id=&quot;flex-wrap&quot;&gt;flex-wrap&lt;/h4&gt;

&lt;p&gt;一般默认情况，items都会试图填充进一行里，如果你不想这样，你可以通过这个属性来改变它&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/05.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nowrap&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap-reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nowrap&lt;/code&gt; (默认): 所有的弹性items都在一行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt;: 弹性items将会变成多行，从上到下&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap-reverse&lt;/code&gt;: 从下到上的多行.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;flex-flow&quot;&gt;flex-flow&lt;/h4&gt;

&lt;p&gt;适用于父容器元素，这是一个简短的&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-direction&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-wrap&lt;/code&gt;属性，它们一起定义了flex container的主轴和交叉轴。 默认是row nowrap。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Css&quot;&gt;flex-flow: &amp;lt;‘flex-direction’&amp;gt; || &amp;lt;‘flex-wrap’&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;justify-content&quot;&gt;justify-content&lt;/h4&gt;

&lt;p&gt;这定义了沿主轴的对齐方式。 当一条线上的所有items都不是弹性，或者是弹性的、但已经达到其最大尺寸时，它有助于分配剩余空间。 当items溢出时，它也对项目的对齐进行控制。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-evenly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/06.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt; (默认): items 从开始的地方一一放置&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-end&lt;/code&gt;: items从结束的地方一一惊喜放置&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;: 从中间沿着轴向两边&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-between&lt;/code&gt;: items 均匀地分布在轴上; 第一个items在轴开始, 最后一个在轴结束的地方&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-around&lt;/code&gt;: items均匀分布在轴上，周围有相同的间隙。请注意，视觉上间隙不相等，因为所有的项目在两边都有相同的间隙，第一个item左边只有一个间隙，最后一个item右边只有一个间隙，其他的左右均有两个间隙&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-evenly&lt;/code&gt;: items均匀分布在轴上，所有的items间隙都相同。不管是第一个或是最后一个。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;align-items&quot;&gt;align-items&lt;/h4&gt;

&lt;p&gt;这定义了如何在当前轴上沿纵向对齐的方式。 把它看作是纵轴轴（垂直于主轴）的 &lt;code class=&quot;highlighter-rouge&quot;&gt;justify-content&lt;/code&gt; 版本。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;baseline&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/07.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stretch&lt;/code&gt; (默认): 填充整个container (依旧遵照min-width/max-width)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt;: 靠上对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-end&lt;/code&gt;: 靠底部对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;: 纵轴中间对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baseline&lt;/code&gt;: 与基线对齐方式一样&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;align-content&quot;&gt;align-content&lt;/h4&gt;

&lt;p&gt;这种对齐方式是用于多行对齐，类似于’段落对齐’,与&lt;code class=&quot;highlighter-rouge&quot;&gt;justify-content&lt;/code&gt;类似，不过这里是每一行在纵轴方向&lt;/p&gt;

&lt;p&gt;注意：只有一行items时，此属性不起作用。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/08.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stretch&lt;/code&gt; (默认): 除了保留间隙会填满&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt;: 靠上对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-end&lt;/code&gt;: 靠下对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;: 居中对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-between&lt;/code&gt;: 均匀分布，相等空隙&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-around&lt;/code&gt;: 均匀分布&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四item属性&quot;&gt;四、item属性&lt;/h3&gt;

&lt;h4 id=&quot;order&quot;&gt;order&lt;/h4&gt;

&lt;p&gt;默认情况下，Flex项目按源代码顺序排列。 但是，order属性可以控制它们在container中的显示顺序。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* default is 0 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/09.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flex-grow&quot;&gt;flex-grow&lt;/h4&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-grow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* default 0 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这定义了item在必要时增长空间的能力。它接受一个没有单位的数字，用作比例。 它规定了该itme应该占用container内的可用空间量。
如果所有item的flex-grow的值设为1，则容器中的剩余空间将平均分配给所有的item, 如果其中一个item的值为2，其他为1，则剩余空间将占用其他空间的两倍（或者至少会尝试）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/10.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flex-shrink&quot;&gt;flex-shrink&lt;/h4&gt;

&lt;p&gt;定义了item在必要时进行缩小的能力&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-shrink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* default 1,必须大于0 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;flex-basis&quot;&gt;flex-basis&lt;/h4&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-basis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* default auto */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在剩余空间分配之前，这个定义了元素的默认大小。 它可以是一个长度（例如20％，5rem等）或关键字。 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;关键字的意思是“看我的宽度或高度属性”（这是临时由&lt;code class=&quot;highlighter-rouge&quot;&gt;main-size&lt;/code&gt;关键字完成，直到被弃用）。 &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; 关键字的意思是“根据item的内容来确定它的大小” - 这个关键字还没有得到很好的支持，所以很难去测试，也很难知道它的 &lt;code class=&quot;highlighter-rouge&quot;&gt;max-content&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;min-content&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;fit-content&lt;/code&gt; 是什么。&lt;/p&gt;

&lt;h4 id=&quot;flex&quot;&gt;flex&lt;/h4&gt;

&lt;p&gt;这是 &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-grow,&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-shrink&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-basis&lt;/code&gt; 集合. 第二个和第三个 (&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-shrink&lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-basis&lt;/code&gt;) 可选的，默认值是 &lt;code class=&quot;highlighter-rouge&quot;&gt;0 1 auto&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'flex-grow'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'flex-shrink'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'flex-basis'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简易你设置这个属性而不是单独对各个属性进行设置。&lt;/p&gt;

&lt;h4 id=&quot;align-self&quot;&gt;align-self&lt;/h4&gt;

&lt;p&gt;对某个item在纵轴方向上进行单独定义&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;align-self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-start&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;baseline&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/11.svg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vertical-align&lt;/code&gt; 在item上没有效果.&lt;/p&gt;

&lt;h3 id=&quot;五实例&quot;&gt;五、实例&lt;/h3&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example 1&lt;/h4&gt;

&lt;p&gt;我们来开始一个简单的实例，解决一个日常的问题，居中，如果用flexbox就再简单不过了&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Or whatever */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;/* Or whatever */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Or whatever */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;/* Magic! */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;依赖一个事实就是， margin设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; 在 container吸纳额外空间. 所以设置垂直居中为 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; 将会使item在两个轴上都完美居中.&lt;/p&gt;

&lt;p&gt;看看其他属性. 考虑如果列出 6 items, 因为美观，这6个item都有固定尺寸，但是都可以自动调整大小.当我们调整浏览器大小时，我们需要它们在水平方向上均匀且完美地分布&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.flex-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* 我们首先定义一个 flex layout 的上下文 */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c&quot;&gt;/* 我们来定义一个流动方向
   * 与相同:
   * flex-direction: row;
   * flex-wrap: wrap;
   */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c&quot;&gt;/* 再定义看看怎么进行分布剩余空间 */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整代码如下：&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flex-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Css&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;compass/css3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.flex-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-webkit-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-moz-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-ms-flexbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-webkit-flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nl&quot;&gt;-webkit-flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.flex-item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/12.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;example-2-不同屏幕下的导航栏效果&quot;&gt;Example 2 不同屏幕下的导航栏效果&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/13.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/14.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* 大屏 */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* This aligns items to the end line on main-axis */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* 中屏 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* When on medium sized screens, we center it by evenly distributing empty space around items */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* 小屏 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* On small screens, we are no longer using row direction but column */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整代码&lt;/p&gt;

&lt;p&gt;Html:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Products&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Css:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;compass/css3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;deepskyblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-webkit-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-moz-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-ms-flexbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-webkit-flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nl&quot;&gt;-webkit-flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;deepskyblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  
  &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:last-of-type&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;example-3-不同屏幕下的布局栏效果&quot;&gt;Example 3 不同屏幕下的布局栏效果&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/16.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/17.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/flex/18.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完整代码&lt;/p&gt;

&lt;p&gt;html:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aside aside-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Aside 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aside aside-2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Aside 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Css:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightgreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;deepskyblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.aside-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;gold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.aside-2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;hotpink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.aside&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.aside-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.aside-2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.footer&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Ted</name></author><category term="CSS" /><summary type="html">本文翻译来自https://css-tricks.com/snippets/css/a-guide-to-flexbox/</summary></entry><entry><title type="html">Objective-C Copy</title><link href="http://www.helloted.com/ios/2017/12/14/copy/" rel="alternate" type="text/html" title="Objective-C Copy" /><published>2017-12-14T20:00:00+08:00</published><updated>2017-12-14T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2017/12/14/copy</id><content type="html" xml:base="http://www.helloted.com/ios/2017/12/14/copy/">&lt;h3 id=&quot;一nsobject的copy实现&quot;&gt;一、NSObject的copy实现&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/objectivec/nsobject/1418807-copy?language=objc&quot;&gt;苹果官方文档对copy的描述&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NSObject进行拷贝的方法是调用copy方法&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;newobj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;前提是实现&lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt;&lt;/a&gt;协议的&lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying/1410311-copywithzone?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt;&lt;/a&gt;方法，否则会导致出现找不到selector的崩溃。&lt;code class=&quot;highlighter-rouge&quot;&gt;**unrecognized selector sent to instance**&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; does not itself support the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt;&lt;/a&gt; protocol. Subclasses must support the protocol and implement the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying/1410311-copywithzone?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt;&lt;/a&gt; method. A subclass version of the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying/1410311-copywithzone?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt;&lt;/a&gt; method should send the message to &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; first, to incorporate its implementation, unless the subclass descends directly from &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; 本身并不支持 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt;&lt;/a&gt; 协议. 子类必须遵从协议并且实现 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying/1410311-copywithzone?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt;&lt;/a&gt; 方法. 除非是直接继承自  &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt;.子类在实现 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscopying/1410311-copywithzone?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt;&lt;/a&gt; 必须先发送消息给 &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;简单例子&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Person.h
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSCopying&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Person.m
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copyWithZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allocWithZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;copyPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;copyPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/12.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;二深拷贝deep-copy和浅拷贝shallow-copy&quot;&gt;二、深拷贝(Deep Copy)和浅拷贝(Shallow Copy)&lt;/h3&gt;

&lt;p&gt;源自&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectCopying.html&quot;&gt;苹果官方文档&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An object can be copied if its class adopts the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt; protocol and implements its single method, &lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt;. If a class has mutable and immutable variants, the mutable class should adopt the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSMutableCopying&lt;/code&gt; protocol (instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt;) and implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;mutableCopyWithZone:&lt;/code&gt; method to ensure that copied objects remain mutable. You make a duplicate of an object by sending it a &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mutableCopy&lt;/code&gt; message. These messages result in the invocation of the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NSMutableCopying&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果一个对象的类采用了NSCopying协议并且实现了它的copyWithZone:方法，那么这个对象就可以被拷贝。&lt;/p&gt;

&lt;p&gt;如果一个类具有可变和不可变的变体：那么可变类应该采用NSMutableCopying协议（而不是NSCopying）并实现mutableCopyWithZone:方法来确保拷贝的对象保持可变。&lt;/p&gt;

&lt;p&gt;通过发送一个copy或mutableCopy消息来拷贝一个对象。这些消息导致调用适当的NSCopying或NSMutableCopying方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Copies of objects can be shallow or deep. Both shallow- and deep-copy approaches directly duplicate scalar properties but differ on how they handle pointer references, particularly references to objects (for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSString *str&lt;/code&gt;). A deep copy duplicates the objects referenced while a shallow copy duplicates only the references to those objects. So if object A is shallow-copied to object B, object B refers to the same instance variable (or property) that object A refers to. Deep-copying objects is preferred to shallow-copying, especially with value objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对象的copy可以是浅的或深的。浅拷贝和深拷贝方法都直接copy属性，但不同之处在于它们如何处理指针引用，特别是对对象的引用（例如NSString * str）。深拷贝复制所引用的对象，而浅拷贝仅复制对这些对象的引用。 因此，如果对象A被浅拷贝到对象B，则对象B引用对象A引用的同一个实例变量（或属性）。 深拷贝对象比浅拷贝更受欢迎，尤其是对于值对象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/13.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三值对象的深拷贝浅拷贝&quot;&gt;三、值对象的深拷贝，浅拷贝&lt;/h3&gt;

&lt;p&gt;在值对象对象(NSString, NSNumber，NSData, NSDate,NSvalue)中：对immutable对象进行copy操作，是指针复制（浅复制），mutableCopy操作时内容复制（深）；对mutable对象进行copy和mutableCopy都是内容复制。用代码简单表示如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[immutableObject copy] // 浅复制&lt;/li&gt;
  &lt;li&gt;[immutableObject mutableCopy] //深复制&lt;/li&gt;
  &lt;li&gt;[mutableObject copy] //深复制&lt;/li&gt;
  &lt;li&gt;[mutableObject mutableCopy] //深复制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/14.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从示例中可以看到，NSString作为不可变对象，copy为浅复制，只是拷贝了一份引用，地址不变，mutableCopy则是深复制。&lt;/p&gt;

&lt;h3 id=&quot;四集合类对象的深拷贝浅拷贝&quot;&gt;四、集合类对象的深拷贝，浅拷贝&lt;/h3&gt;

&lt;p&gt;部分源自&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html&quot;&gt;苹果官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;1浅拷贝&quot;&gt;1、浅拷贝&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you create a shallow copy, the objects in the original collection are sent a &lt;code class=&quot;highlighter-rouge&quot;&gt;retain&lt;/code&gt; message and the pointers are copied to the new collection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只会对集合里的对象的指针进行复制到新的集合里，有两种方法来进行浅拷贝&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shallowCopyArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someArray&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copyWithZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shallowCopyDict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copyItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2深拷贝&quot;&gt;2、深拷贝&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are two ways to make deep copies of a collection. You can use the collection’s equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithArray:copyItems:&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;YES&lt;/code&gt; as the second parameter. If you create a deep copy of a collection in this way, each object in the collection is sent a &lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt; message. If the objects in the collection have adopted the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt; protocol, the objects are deeply copied to the new collection, which is then the sole owner of the copied objects. If the objects do not adopt the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCopying&lt;/code&gt;protocol, attempting to copy them in such a way results in a runtime error. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt; produces a shallow copy. This kind of copy is only capable of producing a one-level-deep copy. If you only need a one-level-deep copy, you can explicitly call for one as in Listing 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有两种方式进行深拷贝：&lt;/p&gt;

&lt;p&gt;你可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;initWithArray:copyItems:&lt;/code&gt; 第二个参数传 &lt;code class=&quot;highlighter-rouge&quot;&gt;YES&lt;/code&gt;，如果用这种方法，集合里的每个对象都会被发送一个  &lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt; 消息，如果集合里的对象已经适配了NSCopying协议，那么这些对象的引用就会被拷贝到新的集合里。如果这些对象没有适配NSCopying协议，这种拷贝方式就会报runtime错误。然而，&lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithZone:&lt;/code&gt; 产生的是一个浅拷贝，这种类型的深拷贝，是指对集合对象的进行深拷贝。集合里的对象依旧是浅拷贝。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray *deepCopyArray=[[NSArray alloc] initWithArray:someArray copyItems:YES];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过对比对象地址我们可以发现，NSArray的集合对象是已经进行了深拷贝，但是集合里的每个对象都是进行的浅拷贝。&lt;/p&gt;

&lt;p&gt;在集合类对象(NSArray、NSDictionary、NSSet)中，对immutable对象进行copy，是指针复制，mutableCopy是内容复制；对mutable对象进行copy和mutableCopy都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制（浅复制）。用代码简单表示如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[immutableObject copy] // 浅复制&lt;/li&gt;
  &lt;li&gt;[immutableObject mutableCopy] //单层深复制 //NSArray层级的深复制&lt;/li&gt;
  &lt;li&gt;[mutableObject copy] //单层深复制&lt;/li&gt;
  &lt;li&gt;[mutableObject mutableCopy] //单层深复制&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;真深拷贝&quot;&gt;真*深拷贝&lt;/h4&gt;

&lt;p&gt;如果你需要一个真正的深拷贝：集合里的对象也要进行深拷贝，那么要NSKeyedArchiver，里面的每个对象都要遵从NSCoding协议&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/16.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过内存地址比对，可以发现，所有的对象都进行了深拷贝。&lt;/p&gt;

&lt;p&gt;以上代码都可以在&lt;a href=&quot;https://github.com/helloted/iOS_Demo/tree/master/CopyDemo&quot;&gt;Github&lt;/a&gt;下载&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">一、NSObject的copy实现</summary></entry><entry><title type="html">SS翻墙</title><link href="http://www.helloted.com/%E5%B7%A5%E5%85%B7/2017/12/13/passwall/" rel="alternate" type="text/html" title="SS翻墙" /><published>2017-12-13T20:00:00+08:00</published><updated>2017-12-13T20:00:00+08:00</updated><id>http://www.helloted.com/%E5%B7%A5%E5%85%B7/2017/12/13/passwall</id><content type="html" xml:base="http://www.helloted.com/%E5%B7%A5%E5%85%B7/2017/12/13/passwall/">&lt;h3 id=&quot;socks与vpn的区别&quot;&gt;Socks与VPN的区别&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;vpn&lt;/strong&gt;–虚拟专用网络，它的功能是：在公用网络上建立专用网络，进行加密通讯。在企业网络和高校的网络中应用很广泛。你接入vpn，其实就是接入了一个专有网络，你的网络访问都从这个出口出去，你和vpn之间的通信是否加密，取决于你连接vpn的方式或者协议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Socks5&lt;/strong&gt;:代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。&lt;/p&gt;

&lt;p&gt;vpn走的是专用通道，ss只是转发流量&lt;/p&gt;

&lt;p&gt;ss服务=国外VPS服务+showdosocks转发+本地showdosocks代理&lt;/p&gt;

&lt;h3 id=&quot;一购买vps&quot;&gt;一、购买VPS&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;VPS&lt;/em&gt;:（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。&lt;/p&gt;

&lt;p&gt;VPS服务商有很多，像阿里云、亚马逊这种知名的互联网公司都有提供这种服务。而如果要建立翻墙作用，当然是要用境外的VPS。流行的境外VPS有&lt;a href=&quot;https://www.vultr.com/&quot;&gt;Vultr&lt;/a&gt;和&lt;a href=&quot;https://www.bwh1.net/&quot;&gt;搬瓦工&lt;/a&gt;等等。&lt;/p&gt;

&lt;p&gt;今天教程用的是Vultr的VPS服务&lt;/p&gt;

&lt;p&gt;1、注册账号&lt;/p&gt;

&lt;p&gt;2、充值。充值支持支付宝充值，每次至少10美金起&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/07.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、充值完后，来到个人主页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/08.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

 	所有已建立的服务都会在这里有一个列表的形式展现出来。点击右上角的+号按钮，新部署服务

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/09.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

  	依次选择，国家、服务类型、大小、其他附加的条件。确定后就建立好了

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/10.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	按照服务商提供的IP地址和密码就可以登录VPS了&lt;/p&gt;

&lt;h3 id=&quot;二showdosocks转发&quot;&gt;二、showdosocks转发&lt;/h3&gt;

&lt;p&gt;1、Mac用终端登录远程服务器&lt;/p&gt;

&lt;p&gt;2、安装pip&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install epel-release
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install python-pip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum clean all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、安装shadowsocks&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install shadowsocks
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、配置shadowsocks&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/shadowsocks.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;​	配置的形式有官方样式两种&lt;/p&gt;

&lt;p&gt;​	一种是&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File&quot;&gt;单人配置&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_server_ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//VPSIP&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//VPS端口，&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mypassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//shadowsocks客户端用密码&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;​	&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Configure-Multiple-Users&quot;&gt;多人模式&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;port_password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;8381&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foobar1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;8382&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foobar2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;8383&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foobar3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;8384&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foobar4&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5、开启防火墙端口。&lt;/p&gt;

&lt;p&gt;​     如果要打开防火墙，则应打开上面设置的端口，示例打开8388端口&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -p tcp --dport 8388 -j ACCEPT 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;​	相关防火墙配置可参考&lt;a href=&quot;http://blog.csdn.net/u011846257/article/details/54707864&quot;&gt;防火墙配置&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6、开启showdosocks转发&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssserver -c /etc/shadowsocks.json  //前台运行，可看到日志
ssserver -c /etc/shadowsocks.json -d start    //后台运行
ssserver -c /etc/shadowsocks.json -d stop  //停止
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到这里，服务端的配置就完成了&lt;/p&gt;

&lt;h3 id=&quot;三本地showdosocks代理&quot;&gt;三、本地showdosocks代理&lt;/h3&gt;

&lt;p&gt;1、下载客户端&lt;/p&gt;

&lt;p&gt;​	&lt;a href=&quot;https://github.com/shadowsocks?utf8=%E2%9C%93&amp;amp;q=&amp;amp;type=&amp;amp;language=&quot;&gt;github下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、设置客户端&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/11.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​      其中，地址是VPS的IP地址，端口和密码是刚才设置的&lt;/p&gt;

&lt;p&gt;这样就可以翻墙了~&lt;/p&gt;</content><author><name>Ted</name></author><category term="工具" /><summary type="html">Socks与VPN的区别</summary></entry><entry><title type="html">Stackoverflow-iOS</title><link href="http://www.helloted.com/ios/2017/12/06/stackoverflow/" rel="alternate" type="text/html" title="Stackoverflow-iOS" /><published>2017-12-06T20:00:00+08:00</published><updated>2017-12-06T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2017/12/06/stackoverflow</id><content type="html" xml:base="http://www.helloted.com/ios/2017/12/06/stackoverflow/">&lt;p&gt;&lt;img src=&quot;/img/Simple_1/15.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;stackoverflow上Votes数排名靠前的部分问题整理，&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios&quot;&gt;Github地址&lt;/a&gt;，不断更新中……&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/a-skill-one-line.md&quot;&gt;一行代码了事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/whats-the-difference-between-the-atomic-and-nonatomic-attributes.md&quot;&gt;atomic和nonatomic有什么区别?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/vertically-align-text-to-top-within-a-uilabel.md&quot;&gt;UILabel的文字如何垂直居上？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/what-are-the-dangers-of-method-swizzling-in-objective-c.md&quot;&gt;使用Method-swizzling的危害?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-check-for-an-active-internet-connection-on-ios-or-osx.md&quot;&gt;如何判断iOS或者OSX的网络连接状况?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-do-i-check-if-a-string-contains-another-string-in-objective-c.md&quot;&gt;如何判断一个字符串包含另外一个字符串?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-do-i-sort-an-nsmutablearray-with-custom-objects-in-it.md&quot;&gt;如何在NSMutableArray里对自定义对象进行排序？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/constants-in-objective-c.md&quot;&gt;如何声明一个全局常量？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/class-vs-import.md&quot;&gt;@class VS #import&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/synthesize-vs-dynamic-what-are-the-differences.md&quot;&gt;@synthesize vs @dynamic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/nsobject-load-and-initialize-what-do-they-do.md&quot;&gt;NSobject的+load +initialize分别做了什么？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-scale-a-uiimageview-proportionally.md&quot;&gt;UIImageView的伸缩模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/difference-between-objectforkey-and-valueforkey.md&quot;&gt;objectForKey和valueForKey有什么区别？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/nsstring-property-copy-or-retain.md&quot;&gt;NSString的属性修饰符应该用copy还是strong(retain)？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/when-to-use-nsinteger-vs-int.md&quot;&gt;什么情况下使用NSInteger或者Int？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/uiview-frame-bounds-and-center.md&quot;&gt;UIView的frame, bounds, center？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/what-does-private-mean-in-objective-c.md&quot;&gt;@private在Objective-C里是什么意思？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/objective-c-declared-property-attributes-nonatomic-copy-strong-weak.md&quot;&gt;Objective-C属性修饰符(nonatomic, copy, strong, weak)？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-store-custom-objects-in-nsuserdefaults.md&quot;&gt;如何在NSUserDefaults里保存一个自定义对象？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-do-i-animate-constraint-changes.md&quot;&gt;更改布局时如何用动画？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/can-i-embed-a-custom-font-in-an-iphone-application.md&quot;&gt;APP里如何使用自定义字体？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/nsoperation-vs-grand-central-dispatch.md&quot;&gt;NSOperation vs. GCD？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/can-you-animate-a-height-change-on-a-uitableviewcell-when-selected.md&quot;&gt;选中UITableViewCell时动画更改高度&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-hide-uinavigationbar-1px-bottom-line.md&quot;&gt;如何隐藏UINavigationBar底部的线？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/creating-a-blurring-overlay-view.md&quot;&gt;创建一个带模糊效果的View&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/send-post-request-using-nsurlsession.md&quot;&gt;用NSURLSession发送一个POST请求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/always-pass-weak-reference-of-self-into-block-in-arc.md&quot;&gt;往ARC的Block传值一定要弱引用么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/best-way-to-remove-from-nsmutablearray-while-iterating.md&quot;&gt;NSMutableArray遍历移除的最好方式？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/easy-way-to-see-saved-nsuserdefaults.md&quot;&gt;查看存储在NSUserDefaults的值&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-does-synchronized-lock-unlock-in-objective-c.md&quot;&gt;@synchronized是如何加锁/解锁？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/difference-between-nil-nil-and-null-in-objective-c.md&quot;&gt;nil, NIL, NULL, NSNull的区别？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/applicationwillenterforeground-vs-applicationdidbecomeactive-applicationwillre.md&quot;&gt;application几种状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/try-catch-block-in-objective-c.md&quot;&gt;@try - catch block&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-rotate-a-uiimage-90-degrees.md&quot;&gt;旋转图片&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/what-is-the-best-way-to-create-constants-in-objective-c.md&quot;&gt;Objective-C声明常量的最好方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/types-in-objective-c-on-iphone.md&quot;&gt;Objective-C里类型大小&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/check-if-ios-app-is-in-background.md&quot;&gt;检测iOS APP是否在后台&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-stop-unwanted-uibutton-animation-on-title-change.md&quot;&gt;去除UIButton修改标题时的动画效果&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/uibutton-how-to-center-an-image-and-a-text-using-imageedgeinsets-and-titleedgei.md&quot;&gt;如何使UIButton的图片和文字都居中？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/number-of-days-between-two-nsdates.md&quot;&gt;计算两个NSDate之间的天数？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/when-to-use-enumerateobjectsusingblock-vs-for.md&quot;&gt;for循环 vs. enumerateObjectsUsingBlock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-can-i-programmatically-get-the-mac-address-of-an-iphone.md&quot;&gt;设备唯一标识/MAC地址&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/the-best-way-to-remove-duplicate-values-from-nsmutablearray-in-objective-c.md&quot;&gt;数组去重&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/iphone-sdk-what-is-the-difference-between-loadview-and-viewdidload.md&quot;&gt;loadView和viewDidLoad&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/objective-c-pass-block-as-parameter.md&quot;&gt;Block作为参数传递&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-compare-uicolors.md&quot;&gt;UIColor进行比较&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-use-nscache.md&quot;&gt;如何使用NSCache?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/deep-copying-an-nsarray.md&quot;&gt;NSArray的深拷贝&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-set-the-full-width-of-separator-in-uitableview.md&quot;&gt;UITableView填满分割线&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/using-performselector-vs-just-calling-the-method.md&quot;&gt;performSelector: vs. method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/cancelling-queued-performselectorafterdelay-calls.md&quot;&gt;取消performSelector:afterDelay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/get-parts-of-a-nsurl-in-objective-c.md&quot;&gt;获取NSURL里的部分信息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/ios-app-programmatically-get-build-version.md&quot;&gt;获取APP的版本信息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-pass-object-with-nsnotificationcenter.md&quot;&gt;NSNotificationCenter传递对象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/when-is-it-better-to-use-an-nsset-over-an-nsarray.md&quot;&gt;NSSet vs. NSArray&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-embed-small-icon-in-uilabel.md&quot;&gt;UILabel嵌入小图片&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-can-i-create-a-uicolor-from-a-hex-string.md&quot;&gt;16进制的UIColor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-tell-if-uiviewcontrollers-view-is-visible.md&quot;&gt;如何判断UIViewController的View是否可见&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-do-i-detect-when-someone-shakes-an-iphone.md&quot;&gt;如何检测手机的摇动？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/filtering-nsarray-into-a-new-nsarray-in-objective-c.md&quot;&gt;数组过滤&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-add-a-border-just-on-the-top-side-of-a-uiview.md&quot;&gt;给UIView的一边添加border&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/detect-if-the-device-is-iphone-x.md&quot;&gt;判断设备型号iphone X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/detecting-taps-on-attributed-text-in-a-uitextview-in-ios.md&quot;&gt;检测UITextView上的点击了字符串&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/detecting-when-the-back-button-is-pressed-on-a-navbar.md&quot;&gt;监测NavBar的返回按钮被点击&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-disable-copy-cut-select-select-all-in-uitextview.md&quot;&gt;禁用UITextView的粘贴板功能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-check-if-an-nsdate-occurs-between-two-other-nsdates.md&quot;&gt;判断一个时间在另外两个时间之间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/what-is-nszombie.md&quot;&gt;什么是僵尸对象?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/does-the-apns-device-token-ever-change-once-created.md&quot;&gt;APNs的Token创建后会更新吗?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-create-an-array-of-selectors.md&quot;&gt;创建一个Selectors的数组&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/whats-the-best-way-to-put-a-c-struct-in-an-nsarray.md&quot;&gt;数组存储结构体&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/what-is-the-difference-between-ivars-and-properties-in-objective-c.md&quot;&gt;实例变量(iVar)与属性(property)的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/whats-the-difference-between-a-method-and-a-selector.md&quot;&gt;Method vs. selector vs. IMP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/checking-a-null-value-in-objective-c-that-has-been-returned-from-a-json-string.md&quot;&gt;JSON字符串里的null处理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/objective-c-assertion-vs-exception-vs-error.md&quot;&gt;Objective-C: Assertion vs. Exception vs. Error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/using-a-constant-nsstring-as-the-key-for-nsuserdefaults.md&quot;&gt;字符串常量作为key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/uialertcontroller-custom-font-size-color.md&quot;&gt;UIAlertController自定义字体&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/how-to-get-uitableview-from-uitableviewcell.md&quot;&gt;获取UITableViewCell的UITableView&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios/blob/master/content/any-way-to-bold-part-of-a-nsstring.md&quot;&gt;字符串部分粗体&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/helloted/stackoverflow_top_ios&quot;&gt;Github地址&lt;/a&gt;，不断更新中……&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html"></summary></entry><entry><title type="html">Block那些事</title><link href="http://www.helloted.com/ios/2017/11/29/blocks/" rel="alternate" type="text/html" title="Block那些事" /><published>2017-11-29T20:00:00+08:00</published><updated>2017-11-29T20:00:00+08:00</updated><id>http://www.helloted.com/ios/2017/11/29/blocks</id><content type="html" xml:base="http://www.helloted.com/ios/2017/11/29/blocks/">&lt;p&gt;查看LLVM官方文档&lt;a href=&quot;http://clang.llvm.org/docs/Block-ABI-Apple.html&quot;&gt;Block-ABI-Apple&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;一不含变量block&quot;&gt;一、不含变量Block&lt;/h3&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过Clang命令，可以看到编译的C++文件：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__blk_block_impl_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__blk_block_desc_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__blk_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__blk_block_desc_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NSConcreteGlobalBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__main_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_desc_0_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__main_block_func_0&lt;/code&gt;这个是block的执行函数，参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;__main_block_impl_0&lt;/code&gt;类型。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__main_block_impl_0&lt;/code&gt;这个结构体就是Block的底层实现了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;isa:指向的是_NSConcreteGlobalBlock，这个是全局block&lt;/li&gt;
  &lt;li&gt;Flags:标志&lt;/li&gt;
  &lt;li&gt;FuncPtr：实现函数指针&lt;/li&gt;
  &lt;li&gt;Desc：block的一些信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的情况是将block的定义在函数外，在函数内引用，特别的，当把block的定义放入函数体内，如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, const char * argv[]) {
    void (^blk)(void) = ^{
        printf(&quot;hello world dk&quot;);
    };
    NSLog(@&quot;%@&quot;, blk);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;clang命令后：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NSConcreteStackBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;isa指针由&lt;code class=&quot;highlighter-rouge&quot;&gt;_NSConcreteGlobalBlock&lt;/code&gt;变为&lt;code class=&quot;highlighter-rouge&quot;&gt;_NSConcreteStackBlock&lt;/code&gt;但根据LLVM实际打印结果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lockDemo[59807:10443592] &amp;lt;__NSGlobalBlock__: 0x100001040&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;所以应当还是GlobalBlock，这里clang与LLVM有点不同。以LLVM为准。&lt;/p&gt;

&lt;h3 id=&quot;二含变量的block&quot;&gt;二、含变量的Block&lt;/h3&gt;

&lt;p&gt;加了一个变量int i;&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;打印结果&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MRC
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlockDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59851&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10455160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__NSStackBlock__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fff5fbff6a8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ARC
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlockDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60278&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10523410&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__NSMallocBlock__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10055e4b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clang之后变成&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NSConcreteStackBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__main_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bound by copy
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_desc_0_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过对比可发现，isa指针已经指向NSConcreteStackBlock，Block被复制到了堆上，而且函数多个几个i&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/03.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_main_block_impl_0&lt;/code&gt;结构体中多了一个i，成功将i变量的值捕获。因为main函数中的局部变量i和函数__main_block_func_0不在同一个作用域中，调用过程中只是进行了值传递。main函数的i是在栈中，block是在堆上，所以不能对值进行修改。&lt;/p&gt;

&lt;p&gt;如果想要在block内修改i的值，会报错&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/04.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三block内修改外部变量&quot;&gt;三、Block内修改外部变量&lt;/h3&gt;

&lt;p&gt;我们都知道，在block内部修改变量的话，要在变量前面加上修饰符’__block’;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objc&quot;&gt;int main(int argc, const char * argv[]) {
    int i = 100;
    __block int block_i = i;
    void (^blk)(void) = ^{
        block_i = 50;
    };
  	NSLog(@&quot;%@&quot;,blk);
    blk();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印结果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MRC
BlockDemo[59851:10455160] &amp;lt;__NSStackBlock__: 0x7fff5fbff6a8&amp;gt;
// ARC
BlockDemo[60278:10523410] &amp;lt;__NSMallocBlock__: 0x10055e4b0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clang之后变成&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__isa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__forwarding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// by ref
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_block_i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__forwarding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NSConcreteStackBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__main_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bound by ref
&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__forwarding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__main_block_copy_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Block_object_assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*BLOCK_FIELD_IS_BYREF*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__main_block_dispose_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Block_object_dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*BLOCK_FIELD_IS_BYREF*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_desc_0_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_copy_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main_block_dispose_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__blocks__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_impl_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main_block_desc_0_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__Block_byref_block_i_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;570425344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__block_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可与发现，大概多了三个部分&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/05.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当block从栈上被copy到堆上时，会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;__main_block_copy_0&lt;/code&gt;将__block类型的成员变量i从栈上复制到堆上，同时，栈上的&lt;code class=&quot;highlighter-rouge&quot;&gt;__Block_byref_i_0&lt;/code&gt;结构体中的__forwarding指针也会指向堆上的地址。而当block被释放时，相应地会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;_main_block_dispose_0&lt;/code&gt;来释__block类型的成员变量i。&lt;/p&gt;

&lt;p&gt;这样，就成功地修改变量的值。&lt;/p&gt;

&lt;h4 id=&quot;修改外部变量&quot;&gt;修改外部变量&lt;/h4&gt;

&lt;p&gt;引用外部变量，值进行读操作&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/21.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改外部变量，进行写操作&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple_2/22.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;arc与mrc&quot;&gt;ARC与MRC&lt;/h4&gt;

&lt;p&gt;因此在ARC情况下,创建的block仍然是NSConcreteStackBlock类型,只不过当block被引用或返回时,ARC帮助我们完成了copy和内存管理的工作变成NSConcreteMallocBlock放在堆上。&lt;/p&gt;

&lt;p&gt;在 ARC 开启的情况下，将只会有 NSConcreteGlobalBlock 和 NSConcreteMallocBlock 类型的 block。&lt;/p&gt;</content><author><name>Ted</name></author><category term="iOS" /><summary type="html">查看LLVM官方文档Block-ABI-Apple</summary></entry></feed>